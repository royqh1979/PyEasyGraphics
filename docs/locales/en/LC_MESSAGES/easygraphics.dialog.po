# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Roy Qu
# This file is distributed under the same license as the EasyGraphics
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyGraphics \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-20 10:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/easygraphics.dialog.rst:2
msgid "easygraphics.dialog package"
msgstr ""

#: ../../source/easygraphics.dialog.rst:5
msgid "Submodules"
msgstr ""

#: ../../source/easygraphics.dialog.rst:8
msgid "easygraphics.dialog.calendar\\_widget module"
msgstr ""

#: easygraphics.dialog.calendar_widget.CalendarWidget:1 of
msgid "Bases: :class:`PyQt5.QtWidgets.QWidget`"
msgstr ""

#: easygraphics.dialog.calendar_widget.CalendarWidget:1 of
msgid "Creates a calendar widget allowing the user to select a date."
msgstr ""

#: ../../source/easygraphics.dialog.rst:16
msgid "easygraphics.dialog.dialog module"
msgstr ""

#: easygraphics.dialog.dialog:1 of
msgid ""
"Message Dialogs most code from "
"EasyGUI_Qt(https://github.com/aroberge/easygui_qt/)"
msgstr ""

#: easygraphics.dialog.dialog.set_dialog_font_size:1 of
msgid "set font size of the dialogs :param size: font size"
msgstr ""

#: easygraphics.dialog.dialog.set_dialog_font_size:4 of
msgid ""
">>>from easygraphics import * >>>from easygraphics.dialog import * "
">>>init_graph(800,600) >>>set_dialog_font_size(18) >>>show_message(\"font"
" setted!\") >>>close_graph()"
msgstr ""

#: easygraphics.dialog.dialog.show_message:1 of
msgid "Simple message box."
msgstr ""

#: easygraphics.dialog.dialog.get_abort easygraphics.dialog.dialog.get_choice
#: easygraphics.dialog.dialog.get_continue_or_cancel
#: easygraphics.dialog.dialog.get_date
#: easygraphics.dialog.dialog.get_directory_name
#: easygraphics.dialog.dialog.get_file_names
#: easygraphics.dialog.dialog.get_float easygraphics.dialog.dialog.get_int
#: easygraphics.dialog.dialog.get_integer
#: easygraphics.dialog.dialog.get_list_of_choices
#: easygraphics.dialog.dialog.get_many_strings
#: easygraphics.dialog.dialog.get_new_password
#: easygraphics.dialog.dialog.get_password
#: easygraphics.dialog.dialog.get_save_file_name
#: easygraphics.dialog.dialog.get_string
#: easygraphics.dialog.dialog.get_username_password
#: easygraphics.dialog.dialog.get_yes_or_no
#: easygraphics.dialog.dialog.show_code easygraphics.dialog.dialog.show_file
#: easygraphics.dialog.dialog.show_message easygraphics.dialog.dialog.show_text
#: of
msgid "Parameters"
msgstr ""

#: easygraphics.dialog.dialog.show_message:3 of
msgid "message string"
msgstr ""

#: easygraphics.dialog.dialog.get_date:3
#: easygraphics.dialog.dialog.show_message:4 of
msgid "window title"
msgstr ""

#: easygraphics.dialog.dialog.show_text:1 of
msgid "Displays some text in a window."
msgstr ""

#: easygraphics.dialog.dialog.get_abort:6
#: easygraphics.dialog.dialog.show_code:3
#: easygraphics.dialog.dialog.show_file:5
#: easygraphics.dialog.dialog.show_text:3 of
msgid "the window title"
msgstr ""

#: easygraphics.dialog.dialog.show_code:4
#: easygraphics.dialog.dialog.show_text:4 of
msgid "a string to display in the window."
msgstr ""

#: easygraphics.dialog.dialog.show_code:1 of
msgid "Displays some text in a window, in a monospace font."
msgstr ""

#: easygraphics.dialog.dialog.show_file:1 of
msgid ""
"Displays a file in a window.  While it looks as though the file can be "
"edited, the only changes that happened are in the window and nothing can "
"be saved."
msgstr ""

#: easygraphics.dialog.dialog.show_file:6 of
msgid "the file name, (path) relative to the calling program"
msgstr ""

#: easygraphics.dialog.dialog.show_file:7 of
msgid "possible values: ``text``, ``code``, ``html``, ``python``."
msgstr ""

#: easygraphics.dialog.dialog.show_file:9 of
msgid ""
"By default, file_type is assumed to be ``text``; if set to ``code``, the "
"content is displayed with a monospace font and, if set to ``python``, "
"some code highlighting is done. If the file_type is ``html``, it is "
"processed assuming it follows html syntax."
msgstr ""

#: easygraphics.dialog.dialog.show_file:15 of
msgid "**Note**: a better Python code hightlighter would be most welcome!"
msgstr ""

#: easygraphics.dialog.dialog.get_abort:1 of
msgid ""
"Displays a message about a problem. If the user clicks on \"abort\", "
"sys.exit() is called and the program ends.  If the user clicks on "
"\"ignore\", the program resumes its execution."
msgstr ""

#: easygraphics.dialog.dialog.get_abort:7 of
msgid "the message to display"
msgstr ""

#: easygraphics.dialog.dialog.get_choice:1 of
msgid "Simple _dialog to ask a user to select an item within a drop-down list"
msgstr ""

#: easygraphics.dialog.dialog.get_choice:3
#: easygraphics.dialog.dialog.get_float:4 easygraphics.dialog.dialog.get_int:5
#: easygraphics.dialog.dialog.get_integer:5
#: easygraphics.dialog.dialog.get_password:3
#: easygraphics.dialog.dialog.get_string:3 of
msgid "Message displayed to the user, inviting a response"
msgstr ""

#: easygraphics.dialog.dialog.get_choice:4
#: easygraphics.dialog.dialog.get_directory_name:3
#: easygraphics.dialog.dialog.get_file_names:3
#: easygraphics.dialog.dialog.get_float:5 easygraphics.dialog.dialog.get_int:6
#: easygraphics.dialog.dialog.get_integer:6
#: easygraphics.dialog.dialog.get_list_of_choices:3
#: easygraphics.dialog.dialog.get_many_strings:3
#: easygraphics.dialog.dialog.get_new_password:3
#: easygraphics.dialog.dialog.get_password:4
#: easygraphics.dialog.dialog.get_save_file_name:3
#: easygraphics.dialog.dialog.get_string:4
#: easygraphics.dialog.dialog.get_username_password:3 of
msgid "Window title"
msgstr ""

#: easygraphics.dialog.dialog.get_choice:5 of
msgid ""
"iterable (list or tuple) containing the names of the items that can be "
"selected."
msgstr ""

#: easygraphics.dialog.dialog.get_choice
#: easygraphics.dialog.dialog.get_continue_or_cancel
#: easygraphics.dialog.dialog.get_date
#: easygraphics.dialog.dialog.get_directory_name
#: easygraphics.dialog.dialog.get_file_names
#: easygraphics.dialog.dialog.get_float easygraphics.dialog.dialog.get_int
#: easygraphics.dialog.dialog.get_integer
#: easygraphics.dialog.dialog.get_list_of_choices
#: easygraphics.dialog.dialog.get_many_strings
#: easygraphics.dialog.dialog.get_new_password
#: easygraphics.dialog.dialog.get_password
#: easygraphics.dialog.dialog.get_save_file_name
#: easygraphics.dialog.dialog.get_string
#: easygraphics.dialog.dialog.get_username_password
#: easygraphics.dialog.dialog.get_yes_or_no of
msgid "Returns"
msgstr ""

#: easygraphics.dialog.dialog.get_choice:8
#: easygraphics.dialog.dialog.get_password:7
#: easygraphics.dialog.dialog.get_string:7 of
msgid "a string, or ``None`` if \"cancel\" is clicked or window is closed."
msgstr ""

#: easygraphics.dialog.dialog.get_color_hex:1 of
msgid ""
"Using a color _dialog, returns a color in hexadecimal notation i.e. a "
"string '#RRGGBB' or \"None\" if color _dialog is dismissed."
msgstr ""

#: easygraphics.dialog.dialog.get_color_rgb:1 of
msgid ""
"Using a color _dialog, returns a color in rgb notation i.e. a tuple (r, "
"g, b)  or \"None\" if color _dialog is dismissed."
msgstr ""

#: easygraphics.dialog.dialog.get_continue_or_cancel:1 of
msgid ""
"Continue or cancel question, shown as a warning (i.e. more urgent than "
"simple message)"
msgstr ""

#: easygraphics.dialog.dialog.get_continue_or_cancel:4
#: easygraphics.dialog.dialog.get_yes_or_no:3 of
msgid "Question (string) asked"
msgstr ""

#: easygraphics.dialog.dialog.get_continue_or_cancel:5
#: easygraphics.dialog.dialog.get_yes_or_no:4 of
msgid "Window title (string)"
msgstr ""

#: easygraphics.dialog.dialog.get_continue_or_cancel:6
#: easygraphics.dialog.dialog.get_continue_or_cancel:7 of
msgid "text to display on button"
msgstr ""

#: easygraphics.dialog.dialog.get_continue_or_cancel:9 of
msgid "True for \"Continue\", False for \"Cancel\""
msgstr ""

#: easygraphics.dialog.dialog.get_date:1 of
msgid "Calendar widget"
msgstr ""

#: easygraphics.dialog.dialog.get_date:4 of
msgid "the selected date as a ``datetime.date`` instance"
msgstr ""

#: easygraphics.dialog.dialog.get_directory_name:1 of
msgid "Gets the name (full path) of an existing directory"
msgstr ""

#: easygraphics.dialog.dialog.get_directory_name:4 of
msgid "the name of a directory or an empty string if cancelled."
msgstr ""

#: easygraphics.dialog.dialog.get_directory_name:11
#: easygraphics.dialog.dialog.get_file_names:12
#: easygraphics.dialog.dialog.get_save_file_name:15 of
msgid ""
"By default, this _dialog initially displays the content of the current "
"working directory."
msgstr ""

#: easygraphics.dialog.dialog.get_file_names:1 of
msgid "Gets the names (full path) of existing files"
msgstr ""

#: easygraphics.dialog.dialog.get_file_names:4 of
msgid "the list of names (paths) of files selected. (It can be an empty list.)"
msgstr ""

#: easygraphics.dialog.dialog.get_float:1 of
msgid ""
"Simple _dialog to ask a user to select a floating point number within a "
"certain range and a maximum precision."
msgstr ""

#: easygraphics.dialog.dialog.get_float:6 of
msgid ""
"Default value for value appearing in the text box; set to the closest of "
"``min_`` or ``max_`` if outside of allowed range."
msgstr ""

#: easygraphics.dialog.dialog.get_float:9 of
msgid "Minimum value allowed"
msgstr ""

#: easygraphics.dialog.dialog.get_float:10 of
msgid "Maximum value allowed"
msgstr ""

#: easygraphics.dialog.dialog.get_float:11 of
msgid "Indicate the maximum decimal precision allowed"
msgstr ""

#: easygraphics.dialog.dialog.get_float:13 of
msgid ""
"a floating-point number, or ``None`` if \"cancel\" is clicked or window "
"is closed."
msgstr ""

#: easygraphics.dialog.dialog.get_float:21 of
msgid ""
"**Note:** depending on the locale of the operating system where this is "
"used, instead of a period being used for indicating the decimals, a comma"
" may appear instead; this is the case for the French version of Windows "
"for example.  Therefore, entry of floating point values in this situation"
" will require the use of a comma instead of a period.  However, the "
"internal representation will still be the same, and the number passed to "
"Python will be using the familar notation."
msgstr ""

#: easygraphics.dialog.dialog.get_int:1
#: easygraphics.dialog.dialog.get_integer:1 of
msgid "Simple _dialog to ask a user to select an integer within a certain range."
msgstr ""

#: easygraphics.dialog.dialog.get_int:3
#: easygraphics.dialog.dialog.get_integer:3 of
msgid "**Note**: **get_int()** and **get_integer()** are identical."
msgstr ""

#: easygraphics.dialog.dialog.get_int:7
#: easygraphics.dialog.dialog.get_integer:7 of
msgid ""
"Default value for integer appearing in the text box; set to the closest "
"of ``min_`` or ``max_`` if outside of allowed range."
msgstr ""

#: easygraphics.dialog.dialog.get_int:10
#: easygraphics.dialog.dialog.get_integer:10 of
msgid "Minimum integer value allowed"
msgstr ""

#: easygraphics.dialog.dialog.get_int:11
#: easygraphics.dialog.dialog.get_integer:11 of
msgid "Maximum integer value allowed"
msgstr ""

#: easygraphics.dialog.dialog.get_int:12
#: easygraphics.dialog.dialog.get_integer:12 of
msgid ""
"Indicate the change in integer value when clicking on arrows on the right"
" hand side"
msgstr ""

#: easygraphics.dialog.dialog.get_int:15
#: easygraphics.dialog.dialog.get_integer:15 of
msgid "an integer, or ``None`` if \"cancel\" is clicked or window is closed."
msgstr ""

#: easygraphics.dialog.dialog.get_int:24
#: easygraphics.dialog.dialog.get_integer:24 of
msgid ""
"If ``default_value`` is larger than ``max_``, it is set to ``max_``; if "
"it is smaller than ``min_``, it is set to ``min_``."
msgstr ""

#: easygraphics.dialog.dialog.get_list_of_choices:1 of
msgid "Show a list of possible choices to be selected."
msgstr ""

#: easygraphics.dialog.dialog.get_list_of_choices:4 of
msgid "iterable (list, tuple, ...) containing the choices as strings"
msgstr ""

#: easygraphics.dialog.dialog.get_list_of_choices:7 of
msgid "a list of selected items, otherwise an empty list."
msgstr ""

#: easygraphics.dialog.dialog.get_many_strings:1 of
msgid "Multiple strings input"
msgstr ""

#: easygraphics.dialog.dialog.get_many_strings:4 of
msgid "an iterable containing the labels for to use for the entries"
msgstr ""

#: easygraphics.dialog.dialog.get_many_strings:5 of
msgid "optional parameter."
msgstr ""

#: easygraphics.dialog.dialog.get_many_strings:8 of
msgid ""
"An ordered dict containing the labels as keys, and the input from the "
"user (empty string by default) as value"
msgstr ""

#: easygraphics.dialog.dialog.get_many_strings:11 of
msgid ""
"The parameter ``masks`` if set must be an iterable of the same length as "
"``choices`` and contain either True or False as entries indicating if the"
" entry of the text is masked or not.  For example, one could ask for a "
"username and password using get_many_strings as follows [note that "
"get_username_password exists and automatically takes care of specifying "
"the masks and is a better choice for this use case.]"
msgstr ""

#: easygraphics.dialog.dialog.get_new_password:1 of
msgid "Change password input box."
msgstr ""

#: easygraphics.dialog.dialog.get_new_password:4 of
msgid ""
"an iterable containing the labels for \"Old password\" and \"New "
"password\" and \"Confirm new password\". All three labels must be "
"different strings as they are used as keys in a dict - however, they "
"could differ only by a space."
msgstr ""

#: easygraphics.dialog.dialog.get_new_password:10 of
msgid ""
"An ordered dict containing the fields item as keys, and the input from "
"the user as values."
msgstr ""

#: easygraphics.dialog.dialog.get_new_password:13
#: easygraphics.dialog.dialog.get_username_password:11 of
msgid ""
"Note: this function is a special case of ``get_many_strings`` where the "
"required masks are provided automatically.."
msgstr ""

#: easygraphics.dialog.dialog.get_password:1 of
msgid "Simple password input box.  Used to query the user and get a string back."
msgstr ""

#: easygraphics.dialog.dialog.get_save_file_name:1 of
msgid "Gets the name (full path) of of a file to be saved."
msgstr ""

#: easygraphics.dialog.dialog.get_save_file_name:4 of
msgid "the name (path) of file selected"
msgstr ""

#: easygraphics.dialog.dialog.get_save_file_name:6 of
msgid ""
"The user is warned if the file already exists and can choose to cancel.  "
"However, this _dialog actually does NOT save any file: it only return a "
"string containing the full path of the chosen file."
msgstr ""

#: easygraphics.dialog.dialog.get_string:1 of
msgid "Simple text input box.  Used to query the user and get a string back."
msgstr ""

#: easygraphics.dialog.dialog.get_string:5 of
msgid "default response appearing in the text box"
msgstr ""

#: easygraphics.dialog.dialog.get_username_password:1 of
msgid "User name and password input box."
msgstr ""

#: easygraphics.dialog.dialog.get_username_password:4 of
msgid ""
"an iterable containing the labels for \"user name\" and \"password\"; if "
"the value not specified, the default values will be used."
msgstr ""

#: easygraphics.dialog.dialog.get_username_password:8 of
msgid ""
"An ordered dict containing the fields item as keys, and the input from "
"the user (empty string by default) as value"
msgstr ""

#: easygraphics.dialog.dialog.get_yes_or_no:1 of
msgid "Simple yes or no question."
msgstr ""

#: easygraphics.dialog.dialog.get_yes_or_no:6 of
msgid "``True`` for \"Yes\", ``False`` for \"No\", and ``None`` for \"Cancel\"."
msgstr ""

#: ../../source/easygraphics.dialog.rst:24
msgid "easygraphics.dialog.invoke\\_in\\_app\\_thread module"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.CallEvent:1 of
msgid "Bases: :class:`PyQt5.QtCore.QEvent`"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.CallEvent:1 of
msgid "An event containing a request for a function call."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.Caller:1 of
msgid "Bases: :class:`PyQt5.QtCore.QObject`"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.Caller:1 of
msgid "An event handler which calls the function held within a CallEvent."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.get_in_app_thread_result:1 of
msgid "Processes the result of :func:`qtutils.invoke_in_main.inmain_later`."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.get_in_app_thread_result:3 of
msgid ""
"This function takes the queue returned by :code:`inmain_later` and blocks"
" until a result is obtained. If an exception occurred when executing the "
"function in the MainThread, it is raised again here (it is also raised in"
" the MainThread). If no exception was raised, the result from the "
"execution of the function is returned."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.get_in_app_thread_result:10
#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:18 of
msgid "Arguments:"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.get_in_app_thread_result:10 of
msgid "queue: The Python Queue object returned by :code:`inmain_later`"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.get_in_app_thread_result:13
#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:27
#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:22 of
msgid "Returns:"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.get_in_app_thread_result:13 of
msgid ""
"The result from executing the function specified in the call to "
":code:`inmain_later`"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:1 of
msgid ""
"A decorator which enforces the execution of the decorated thread to occur"
" in the MainThread."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:3 of
msgid ""
"This decorator wraps the decorated function or method in either "
":func:`qtutils.invoke_in_main.inmain` or "
":func:`qtutils.invoke_in_main.inmain_later`."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:17 of
msgid "Keyword Arguments:"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:10 of
msgid "wait_for_return: Specifies whether to use :code:`inmain` (if"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:9 of
msgid ":code:`True`) or :code:`inmain_later` (if :code:`False`)."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:17 of
msgid "exceptions_in_main: Specifies whether the exceptions should be raised"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:13 of
msgid ""
"in the main thread or not. This is ignored if "
":code:`wait_for_return=True`. If this is :code:`False`, then exceptions "
"may be silenced if you do not explicitly use "
":func:`qtutils.invoke_in_main.get_inmain_result`."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:20 of
msgid ""
"The decorator returns a function that has wrapped the decorated function "
"in the appropriate call to :code:`inmain` or :code:`inmain_later` (if you"
" are unfamiliar with how decorators work, please see the Python "
"documentation)."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoid_in_thread:25 of
msgid ""
"When calling the decorated function, the result is either the result of "
"the function executed in the MainThread (if :code:`wait_for_return=True`)"
" or a Python Queue to be used with "
":func:`qtutils.invoke_in_main.get_inmain_result` at a later time."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:1 of
msgid ""
"Queue up the executing of a function in the main thread and return "
"immediately."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:3 of
msgid ""
"This function queues up a custom :code:`QEvent` to the Qt event loop. "
"This event executes the specified function :code:`fn` in the Python "
"MainThread with the specified arguments and keyword arguments, and "
"returns a Python Queue which will eventually hold the result from the "
"executing of :code:`fn`. To access the result, use "
":func:`qtutils.invoke_in_main.get_inmain_result`."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:9 of
msgid ""
"This function can be used from the MainThread, but such use will just "
"directly call the function, bypassing the Qt event loop."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:12 of
msgid "fn: A reference to the function or method to run in the MainThread."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:15 of
msgid "*args: Any arguments to pass to :code:`fn` when it is called from the"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:15 of
msgid "MainThread."
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:18 of
msgid "**kwargs: Any keyword arguments to pass to :code:`fn` when it is called"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:18 of
msgid "from the MainThread"
msgstr ""

#: easygraphics.dialog.invoke_in_app_thread.invoke_in_app_thread:21 of
msgid ""
"A Python Queue which will eventually hold the result :code:`(fn(*args, "
"**kwargs), exception)` where :code:`exception=[type,value,traceback]`."
msgstr ""

#: ../../source/easygraphics.dialog.rst:32
msgid "easygraphics.dialog.multichoice module"
msgstr ""

#: easygraphics.dialog.multichoice.MultipleChoicesDialog:1
#: easygraphics.dialog.multifields.MultipleFieldsDialog:1 of
msgid "Bases: :class:`PyQt5.QtWidgets.QDialog`"
msgstr ""

#: easygraphics.dialog.multichoice.MultipleChoicesDialog:1 of
msgid "Dialog with the possibility of selecting one or more items from a list"
msgstr ""

#: easygraphics.dialog.multichoice.MultipleChoicesDialog.cancel:1 of
msgid "cancel and set the selection to an empty list"
msgstr ""

#: easygraphics.dialog.multichoice.MultipleChoicesDialog.clear_all:1 of
msgid "Reset to have no selected values"
msgstr ""

#: easygraphics.dialog.multichoice.MultipleChoicesDialog.select_all:1 of
msgid "Set all possible values as selected"
msgstr ""

#: easygraphics.dialog.multichoice.MultipleChoicesDialog.selection_completed:1
#: easygraphics.dialog.multifields.MultipleFieldsDialog.confirm:1 of
msgid "Selection completed, set the value and close"
msgstr ""

#: ../../source/easygraphics.dialog.rst:40
msgid "easygraphics.dialog.multifields module"
msgstr ""

#: easygraphics.dialog.multifields.MultipleFieldsDialog:1 of
msgid ""
"Dialog with multiple fields stored in a dict, with the label being the "
"key and the entry being the corresponding value"
msgstr ""

#: ../../source/easygraphics.dialog.rst:48
msgid "easygraphics.dialog.show\\_text\\_window module"
msgstr ""

#: easygraphics.dialog.show_text_window:1 of
msgid ""
"A simple text window used to display either Python code with some simple "
"syntax highlighting, or some other document which will be formatted as "
"though it was an html file or a simple text file."
msgstr ""

#: easygraphics.dialog.show_text_window:5 of
msgid "The syntax highlighter for Python code is really inadequate;  HELP!! :-)"
msgstr ""

#: easygraphics.dialog.show_text_window.Highlighter:1 of
msgid "Bases: :class:`PyQt5.QtGui.QSyntaxHighlighter`"
msgstr ""

#: easygraphics.dialog.show_text_window.Highlighter:1 of
msgid "Adapted from example included with PyQt distribution"
msgstr ""

#: easygraphics.dialog.show_text_window.TextWindow:1 of
msgid "Bases: :class:`PyQt5.QtWidgets.QMainWindow`"
msgstr ""

#: ../../source/easygraphics.dialog.rst:57
msgid "Module contents"
msgstr ""

