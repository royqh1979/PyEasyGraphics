# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Roy Qu
# This file is distributed under the same license as the EasyGraphics
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyGraphics \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-12 08:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../apis/easygraphics.dialog.rst:2
msgid "easygraphics.dialog package"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:3
msgid "An easy-to-use dialogs library."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:5
msgid "You can use it to create and show dialogs."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:7
msgid ""
"Based on code from EasyGUI_Qt(https://github.com/aroberge/easygui_qt/). "
"The original EasyGUI-Qt library won't work properly with EasyGraphics. So"
" use this library instead."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:10 easygraphics.music:5 of
msgid "A simple example:"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:17
msgid "Function list"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_choice <easygraphics.dialog.get_choice>`\\ \\(message\\, "
"title\\, choices\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_choice:1 of
msgid "Simple dialog to ask a user to select an item within a drop-down list"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ":obj:`get_color <easygraphics.dialog.get_color>`\\ \\(\\[color\\]\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_color:1 of
msgid "Display a color picker and return the selected color"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_color_hex <easygraphics.dialog.get_color_hex>`\\ "
"\\(\\[color\\]\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid "Using a color dialog, returns a color in hexadecimal notation i.e."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_color_rgb <easygraphics.dialog.get_color_rgb>`\\ "
"\\(\\[color\\]\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid "Using a color dialog, returns a color in rgb notation i.e."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_continue_or_cancel "
"<easygraphics.dialog.get_continue_or_cancel>`\\ \\(question\\, title\\, "
"...\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid "Continue or cancel question, shown as a warning (i.e."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ":obj:`get_date <easygraphics.dialog.get_date>`\\ \\(title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_date:1 of
msgid "Calendar widget"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_directory_name <easygraphics.dialog.get_directory_name>`\\ "
"\\(title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_directory_name:1 of
msgid "Gets the name (full path) of an existing directory"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ":obj:`get_file_names <easygraphics.dialog.get_file_names>`\\ \\(title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_file_names:1 of
msgid "Gets the names (full path) of existing files"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_float <easygraphics.dialog.get_float>`\\ \\(message\\, title\\,"
" default\\_value\\, ...\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_float:1 of
msgid ""
"Simple dialog to ask a user to select a floating point number within a "
"certain range and a maximum precision."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_int <easygraphics.dialog.get_int>`\\ \\(message\\, title\\, "
"default\\_value\\, min\\_\\, ...\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_int:1 easygraphics.dialog.get_integer:1 of
msgid "Simple dialog to ask a user to select an integer within a certain range."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_list_of_choices <easygraphics.dialog.get_list_of_choices>`\\ "
"\\(title\\, choices\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_list_of_choices:1 of
msgid "Show a list of possible choices to be selected."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_many_strings <easygraphics.dialog.get_many_strings>`\\ "
"\\(title\\, labels\\, masks\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_many_strings:1 of
msgid "Multiple strings input"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_new_password <easygraphics.dialog.get_new_password>`\\ "
"\\(title\\, labels\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_new_password:1 of
msgid "Change password input box."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_password <easygraphics.dialog.get_password>`\\ \\(message\\, "
"title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid "Simple password input box."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_save_file_name <easygraphics.dialog.get_save_file_name>`\\ "
"\\(title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_save_file_name:1 of
msgid "Gets the name (full path) of of a file to be saved."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_string <easygraphics.dialog.get_string>`\\ \\(message\\, "
"title\\, default\\_response\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid "Simple text input box."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_username_password "
"<easygraphics.dialog.get_username_password>`\\ \\(title\\, labels\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_username_password:1 of
msgid "User name and password input box."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`get_yes_or_no <easygraphics.dialog.get_yes_or_no>`\\ \\(question\\,"
" title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.get_yes_or_no:1 of
msgid "Simple yes or no question."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`set_dialog_font_size <easygraphics.dialog.set_dialog_font_size>`\\ "
"\\(size\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.set_dialog_font_size:1 of
msgid "Set font size of the dialogs."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_html <easygraphics.dialog.show_html>`\\ \\(title\\, text\\, "
"width\\, height\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_html:1 of
msgid "Displays some html text in a window."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_image_dialog <easygraphics.dialog.show_image_dialog>`\\ "
"\\(image\\, title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_image_dialog:1 of
msgid "Display the image in a dialog."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_lists_table <easygraphics.dialog.show_lists_table>`\\ "
"\\(\\*args\\, column\\_names\\, title\\, ...\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_lists_table:1 of
msgid "Displays list of datas in a table"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_message <easygraphics.dialog.show_message>`\\ \\(message\\, "
"title\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_message:1 of
msgid "Simple message box."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_objects <easygraphics.dialog.show_objects>`\\ \\(objects\\, "
"fields\\, field\\_names\\, ...\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_objects:1 easygraphics.dialog.show_table:1 of
msgid "Displays list of objects in a table"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_text <easygraphics.dialog.show_text>`\\ \\(title\\, text\\, "
"width\\, height\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_text:1 of
msgid "Displays some text in a window."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_table <easygraphics.dialog.show_table>`\\ \\(objects\\, "
"fields\\, field\\_names\\, ...\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_code <easygraphics.dialog.show_code>`\\ \\(title\\, code\\, "
"width\\, height\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
#: easygraphics.dialog.show_code:1 of
msgid "Displays some text in a window, in a monospace font."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid ""
":obj:`show_file <easygraphics.dialog.show_file>`\\ \\(file\\_name\\, "
"title\\, file\\_type\\)"
msgstr ""

#: ../../apis/easygraphics.dialog.rst:50:<autosummary>:1
msgid "Displays a file in a window."
msgstr ""

#: ../../apis/easygraphics.dialog.rst:52 ../../apis/easygraphics.music.rst:27
msgid "Functions"
msgstr ""

#: easygraphics.dialog.get_abort easygraphics.dialog.get_choice
#: easygraphics.dialog.get_continue_or_cancel easygraphics.dialog.get_date
#: easygraphics.dialog.get_directory_name easygraphics.dialog.get_file_names
#: easygraphics.dialog.get_float easygraphics.dialog.get_int
#: easygraphics.dialog.get_integer easygraphics.dialog.get_list_of_choices
#: easygraphics.dialog.get_many_strings easygraphics.dialog.get_new_password
#: easygraphics.dialog.get_password easygraphics.dialog.get_save_file_name
#: easygraphics.dialog.get_string easygraphics.dialog.get_username_password
#: easygraphics.dialog.get_yes_or_no easygraphics.dialog.set_dialog_font_size
#: easygraphics.dialog.show_code easygraphics.dialog.show_file
#: easygraphics.dialog.show_html easygraphics.dialog.show_image_dialog
#: easygraphics.dialog.show_lists_table easygraphics.dialog.show_message
#: easygraphics.dialog.show_objects easygraphics.dialog.show_table
#: easygraphics.dialog.show_text easygraphics.legacy.bar
#: easygraphics.legacy.circle easygraphics.legacy.cleardevice
#: easygraphics.legacy.clearviewport easygraphics.legacy.drawpoly
#: easygraphics.legacy.ellipse easygraphics.legacy.fillellipse
#: easygraphics.legacy.fillpoly easygraphics.legacy.floodfill
#: easygraphics.legacy.getbkcolor easygraphics.legacy.getcolor
#: easygraphics.legacy.getimage easygraphics.legacy.getpixel
#: easygraphics.legacy.getx easygraphics.legacy.gety
#: easygraphics.legacy.initgraph easygraphics.legacy.line
#: easygraphics.legacy.linerel easygraphics.legacy.lineto
#: easygraphics.legacy.moverel easygraphics.legacy.moveto
#: easygraphics.legacy.outtext easygraphics.legacy.outtextxy
#: easygraphics.legacy.putimage easygraphics.legacy.putpixel
#: easygraphics.legacy.rectangle easygraphics.legacy.sector
#: easygraphics.legacy.setbkcolor easygraphics.legacy.setcolor
#: easygraphics.legacy.setviewport easygraphics.legacy.textheight
#: easygraphics.legacy.textwidth easygraphics.music.fade_out_music
#: easygraphics.music.load_music easygraphics.music.play_music
#: easygraphics.music.queue_music easygraphics.music.set_music_pos
#: easygraphics.music.set_music_volume easygraphics.turtle.Turtle.back
#: easygraphics.turtle.Turtle.backward easygraphics.turtle.Turtle.bk
#: easygraphics.turtle.Turtle.facing easygraphics.turtle.Turtle.fd
#: easygraphics.turtle.Turtle.forward easygraphics.turtle.Turtle.gotoxy
#: easygraphics.turtle.Turtle.left easygraphics.turtle.Turtle.left_turn
#: easygraphics.turtle.Turtle.lt easygraphics.turtle.Turtle.move_arc
#: easygraphics.turtle.Turtle.move_ellipse easygraphics.turtle.Turtle.right
#: easygraphics.turtle.Turtle.right_turn easygraphics.turtle.Turtle.rt
#: easygraphics.turtle.Turtle.set_heading easygraphics.turtle.Turtle.set_speed
#: easygraphics.turtle.Turtle.setxy easygraphics.turtle.Turtle.turn_to
#: easygraphics.turtle.TurtleWorld.add_turtle
#: easygraphics.turtle.TurtleWorld.set_immediate
#: easygraphics.turtle.TurtleWorld.snap_shot_to_image easygraphics.turtle.back
#: easygraphics.turtle.backward easygraphics.turtle.bk
#: easygraphics.turtle.create_world easygraphics.turtle.facing
#: easygraphics.turtle.fd easygraphics.turtle.forward
#: easygraphics.turtle.gotoxy easygraphics.turtle.left
#: easygraphics.turtle.left_turn easygraphics.turtle.lt
#: easygraphics.turtle.move_arc easygraphics.turtle.move_ellipse
#: easygraphics.turtle.right easygraphics.turtle.right_turn
#: easygraphics.turtle.rt easygraphics.turtle.set_heading
#: easygraphics.turtle.set_immediate easygraphics.turtle.set_pen_size
#: easygraphics.turtle.set_speed easygraphics.turtle.setxy
#: easygraphics.turtle.turn_to easygraphics.widget.ImageWidget.setImage
#: easygraphics.widget.TurtleWidget.run_animated_code of
msgid "Parameters"
msgstr ""

#: easygraphics.dialog.set_dialog_font_size:3 of
msgid "font size"
msgstr ""

#: easygraphics.dialog.show_message:3 of
msgid "message string"
msgstr ""

#: easygraphics.dialog.get_date:3 easygraphics.dialog.show_message:4 of
msgid "window title"
msgstr ""

#: easygraphics.dialog.get_abort:6 easygraphics.dialog.show_code:3
#: easygraphics.dialog.show_file:5 easygraphics.dialog.show_html:3
#: easygraphics.dialog.show_text:3 of
msgid "the window title"
msgstr ""

#: easygraphics.dialog.show_code:4 easygraphics.dialog.show_html:4
#: easygraphics.dialog.show_text:4 of
msgid "a string to display in the window."
msgstr ""

#: easygraphics.dialog.show_code:5 easygraphics.dialog.show_html:5
#: easygraphics.dialog.show_lists_table:12 easygraphics.dialog.show_objects:18
#: easygraphics.dialog.show_table:18 easygraphics.dialog.show_text:5 of
msgid "width of the dialog window"
msgstr ""

#: easygraphics.dialog.show_code:6 easygraphics.dialog.show_html:6
#: easygraphics.dialog.show_lists_table:13 easygraphics.dialog.show_objects:19
#: easygraphics.dialog.show_table:19 easygraphics.dialog.show_text:6 of
msgid "height of the dialog window"
msgstr ""

#: easygraphics.dialog.show_file:1 of
msgid ""
"Displays a file in a window.  While it looks as though the file can be "
"edited, the only changes that happened are in the window and nothing can "
"be saved."
msgstr ""

#: easygraphics.dialog.show_file:6 of
msgid "the file name, (path) relative to the calling program"
msgstr ""

#: easygraphics.dialog.show_file:7 of
msgid "possible values: ``text``, ``code``, ``html``, ``python``."
msgstr ""

#: easygraphics.dialog.show_file:9 of
msgid ""
"By default, file_type is assumed to be ``text``; if set to ``code``, the "
"content is displayed with a monospace font and, if set to ``python``, "
"some code highlighting is done. If the file_type is ``html``, it is "
"processed assuming it follows html syntax."
msgstr ""

#: easygraphics.dialog.show_file:15 of
msgid "**Note**: a better Python code hightlighter would be most welcome!"
msgstr ""

#: easygraphics.dialog.show_objects:14 easygraphics.dialog.show_table:14 of
msgid "the object list to show"
msgstr ""

#: easygraphics.dialog.show_objects:15 easygraphics.dialog.show_table:15 of
msgid "fields to show of the object"
msgstr ""

#: easygraphics.dialog.show_objects:16 easygraphics.dialog.show_table:16 of
msgid "the field names displayed on the table header"
msgstr ""

#: easygraphics.dialog.show_lists_table:11 easygraphics.dialog.show_objects:17
#: easygraphics.dialog.show_table:17 of
msgid "title of the dialog window"
msgstr ""

#: easygraphics.dialog.get_abort:1 of
msgid ""
"Displays a message about a problem. If the user clicks on \"abort\", "
"sys.exit() is called and the program ends.  If the user clicks on "
"\"ignore\", the program resumes its execution."
msgstr ""

#: easygraphics.dialog.get_abort:7 of
msgid "the message to display"
msgstr ""

#: easygraphics.dialog.get_choice:3 easygraphics.dialog.get_float:4
#: easygraphics.dialog.get_int:5 easygraphics.dialog.get_integer:5
#: easygraphics.dialog.get_password:3 easygraphics.dialog.get_string:3 of
msgid "Message displayed to the user, inviting a response"
msgstr ""

#: easygraphics.dialog.get_choice:4 easygraphics.dialog.get_directory_name:3
#: easygraphics.dialog.get_file_names:3 easygraphics.dialog.get_float:5
#: easygraphics.dialog.get_int:6 easygraphics.dialog.get_integer:6
#: easygraphics.dialog.get_list_of_choices:3
#: easygraphics.dialog.get_many_strings:3
#: easygraphics.dialog.get_new_password:3 easygraphics.dialog.get_password:4
#: easygraphics.dialog.get_save_file_name:3 easygraphics.dialog.get_string:4
#: easygraphics.dialog.get_username_password:3
#: easygraphics.dialog.show_image_dialog:4 of
msgid "Window title"
msgstr ""

#: easygraphics.dialog.get_choice:5 of
msgid ""
"iterable (list or tuple) containing the names of the items that can be "
"selected."
msgstr ""

#: easygraphics.dialog.get_choice easygraphics.dialog.get_color
#: easygraphics.dialog.get_continue_or_cancel easygraphics.dialog.get_date
#: easygraphics.dialog.get_directory_name easygraphics.dialog.get_file_names
#: easygraphics.dialog.get_float easygraphics.dialog.get_int
#: easygraphics.dialog.get_integer easygraphics.dialog.get_list_of_choices
#: easygraphics.dialog.get_many_strings easygraphics.dialog.get_new_password
#: easygraphics.dialog.get_password easygraphics.dialog.get_save_file_name
#: easygraphics.dialog.get_string easygraphics.dialog.get_username_password
#: easygraphics.dialog.get_yes_or_no easygraphics.legacy.getbkcolor
#: easygraphics.legacy.getcolor easygraphics.legacy.getfillsettings
#: easygraphics.legacy.getlinesettings easygraphics.legacy.getmaxx
#: easygraphics.legacy.getmaxy easygraphics.legacy.getpixel
#: easygraphics.legacy.getx easygraphics.legacy.gety
#: easygraphics.legacy.textheight easygraphics.legacy.textwidth
#: easygraphics.music.get_music_pos easygraphics.music.get_music_volume
#: easygraphics.music.is_music_playing
#: easygraphics.turtle.Turtle.create_turtle_icon
#: easygraphics.turtle.Turtle.get_heading easygraphics.turtle.Turtle.get_icon
#: easygraphics.turtle.Turtle.get_x easygraphics.turtle.Turtle.get_y
#: easygraphics.turtle.Turtle.is_filling
#: easygraphics.turtle.Turtle.is_out_of_window
#: easygraphics.turtle.Turtle.is_show
#: easygraphics.turtle.TurtleWorld.create_snap_shot
#: easygraphics.turtle.TurtleWorld.create_turtle
#: easygraphics.turtle.TurtleWorld.get_height
#: easygraphics.turtle.TurtleWorld.get_width
#: easygraphics.turtle.TurtleWorld.get_world_image
#: easygraphics.turtle.TurtleWorld.is_immediate
#: easygraphics.turtle.TurtleWorld.is_on_screen easygraphics.turtle.get_heading
#: easygraphics.turtle.get_turtle easygraphics.turtle.get_turtle_world
#: easygraphics.turtle.get_x easygraphics.turtle.get_y
#: easygraphics.turtle.is_out_of_window easygraphics.turtle.is_run
#: easygraphics.widget.ImageWidget.getImage
#: easygraphics.widget.TurtleWidget.getTurtle
#: easygraphics.widget.TurtleWidget.getWorld
#: easygraphics.widget.TurtleWidget.is_run of
msgid "Returns"
msgstr ""

#: easygraphics.dialog.get_choice:8 easygraphics.dialog.get_password:7
#: easygraphics.dialog.get_string:7 of
msgid "a string, or ``None`` if \"cancel\" is clicked or window is closed."
msgstr ""

#: easygraphics.dialog.get_color_hex:1 of
msgid ""
"Using a color dialog, returns a color in hexadecimal notation i.e. a "
"string '#RRGGBB' or \"None\" if color dialog is dismissed."
msgstr ""

#: easygraphics.dialog.get_color_rgb:1 of
msgid ""
"Using a color dialog, returns a color in rgb notation i.e. a tuple (r, g,"
" b) or \"None\" if color dialog is dismissed."
msgstr ""

#: easygraphics.dialog.get_color:8 of
msgid "the color selected"
msgstr ""

#: easygraphics.dialog.get_continue_or_cancel:1 of
msgid ""
"Continue or cancel question, shown as a warning (i.e. more urgent than "
"simple message)"
msgstr ""

#: easygraphics.dialog.get_continue_or_cancel:3
#: easygraphics.dialog.get_yes_or_no:3 of
msgid "Question (string) asked"
msgstr ""

#: easygraphics.dialog.get_continue_or_cancel:4
#: easygraphics.dialog.get_yes_or_no:4 of
msgid "Window title (string)"
msgstr ""

#: easygraphics.dialog.get_continue_or_cancel:5
#: easygraphics.dialog.get_continue_or_cancel:6 of
msgid "text to display on button"
msgstr ""

#: easygraphics.dialog.get_continue_or_cancel:8 of
msgid "True for \"Continue\", False for \"Cancel\""
msgstr ""

#: easygraphics.dialog.get_date:4 of
msgid "the selected date as a ``datetime.date`` instance"
msgstr ""

#: easygraphics.dialog.get_directory_name:4 of
msgid "the name of a directory or an empty string if cancelled."
msgstr ""

#: easygraphics.dialog.get_directory_name:11
#: easygraphics.dialog.get_file_names:12
#: easygraphics.dialog.get_save_file_name:15 of
msgid ""
"By default, this dialog initially displays the content of the current "
"working directory."
msgstr ""

#: easygraphics.dialog.get_file_names:4 of
msgid "the list of names (paths) of files selected. (It can be an empty list.)"
msgstr ""

#: easygraphics.dialog.get_float:6 of
msgid ""
"Default value for value appearing in the text box; set to the closest of "
"``min_`` or ``max_`` if outside of allowed range."
msgstr ""

#: easygraphics.dialog.get_float:9 of
msgid "Minimum value allowed"
msgstr ""

#: easygraphics.dialog.get_float:10 of
msgid "Maximum value allowed"
msgstr ""

#: easygraphics.dialog.get_float:11 of
msgid "Indicate the maximum decimal precision allowed"
msgstr ""

#: easygraphics.dialog.get_float:13 of
msgid ""
"a floating-point number, or ``None`` if \"cancel\" is clicked or window "
"is closed."
msgstr ""

#: easygraphics.dialog.get_float:21 of
msgid ""
"**Note:** depending on the locale of the operating system where this is "
"used, instead of a period being used for indicating the decimals, a comma"
" may appear instead; this is the case for the French version of Windows "
"for example.  Therefore, entry of floating point values in this situation"
" will require the use of a comma instead of a period.  However, the "
"internal representation will still be the same, and the number passed to "
"Python will be using the familar notation."
msgstr ""

#: easygraphics.dialog.get_int:3 easygraphics.dialog.get_integer:3 of
msgid "**Note**: **get_int()** and **get_integer()** are identical."
msgstr ""

#: easygraphics.dialog.get_int:7 easygraphics.dialog.get_integer:7 of
msgid ""
"Default value for integer appearing in the text box; set to the closest "
"of ``min_`` or ``max_`` if outside of allowed range."
msgstr ""

#: easygraphics.dialog.get_int:10 easygraphics.dialog.get_integer:10 of
msgid "Minimum integer value allowed"
msgstr ""

#: easygraphics.dialog.get_int:11 easygraphics.dialog.get_integer:11 of
msgid "Maximum integer value allowed"
msgstr ""

#: easygraphics.dialog.get_int:12 easygraphics.dialog.get_integer:12 of
msgid ""
"Indicate the change in integer value when clicking on arrows on the right"
" hand side"
msgstr ""

#: easygraphics.dialog.get_int:15 easygraphics.dialog.get_integer:15 of
msgid "an integer, or ``None`` if \"cancel\" is clicked or window is closed."
msgstr ""

#: easygraphics.dialog.get_int:24 easygraphics.dialog.get_integer:24 of
msgid ""
"If ``default_value`` is larger than ``max_``, it is set to ``max_``; if "
"it is smaller than ``min_``, it is set to ``min_``."
msgstr ""

#: easygraphics.dialog.get_list_of_choices:4 of
msgid "iterable (list, tuple, ...) containing the choices as strings"
msgstr ""

#: easygraphics.dialog.get_list_of_choices:7 of
msgid "a list of selected items, otherwise an empty list."
msgstr ""

#: easygraphics.dialog.get_many_strings:4 of
msgid "an iterable containing the labels for to use for the entries"
msgstr ""

#: easygraphics.dialog.get_many_strings:5 of
msgid "optional parameter."
msgstr ""

#: easygraphics.dialog.get_many_strings:8 of
msgid ""
"An ordered dict containing the labels as keys, and the input from the "
"user (empty string by default) as value"
msgstr ""

#: easygraphics.dialog.get_many_strings:11 of
msgid ""
"The parameter ``masks`` if set must be an iterable of the same length as "
"``choices`` and contain either True or False as entries indicating if the"
" entry of the text is masked or not.  For example, one could ask for a "
"username and password using get_many_strings as follows [note that "
"get_username_password exists and automatically takes care of specifying "
"the masks and is a better choice for this use case.]"
msgstr ""

#: easygraphics.dialog.get_new_password:4 of
msgid ""
"an iterable containing the labels for \"Old password\" and \"New "
"password\" and \"Confirm new password\". All three labels must be "
"different strings as they are used as keys in a dict - however, they "
"could differ only by a space."
msgstr ""

#: easygraphics.dialog.get_new_password:10 of
msgid ""
"An ordered dict containing the fields item as keys, and the input from "
"the user as values."
msgstr ""

#: easygraphics.dialog.get_new_password:13
#: easygraphics.dialog.get_username_password:11 of
msgid ""
"Note: this function is a special case of ``get_many_strings`` where the "
"required masks are provided automatically.."
msgstr ""

#: easygraphics.dialog.get_password:1 of
msgid "Simple password input box.  Used to query the user and get a string back."
msgstr ""

#: easygraphics.dialog.get_save_file_name:4 of
msgid "the name (path) of file selected"
msgstr ""

#: easygraphics.dialog.get_save_file_name:6 of
msgid ""
"The user is warned if the file already exists and can choose to cancel.  "
"However, this dialog actually does NOT save any file: it only return a "
"string containing the full path of the chosen file."
msgstr ""

#: easygraphics.dialog.get_string:1 of
msgid "Simple text input box.  Used to query the user and get a string back."
msgstr ""

#: easygraphics.dialog.get_string:5 of
msgid "default response appearing in the text box"
msgstr ""

#: easygraphics.dialog.get_username_password:4 of
msgid ""
"an iterable containing the labels for \"user name\" and \"password\"; if "
"the value not specified, the default values will be used."
msgstr ""

#: easygraphics.dialog.get_username_password:8 of
msgid ""
"An ordered dict containing the fields item as keys, and the input from "
"the user (empty string by default) as value"
msgstr ""

#: easygraphics.dialog.get_yes_or_no:6 of
msgid "``True`` for \"Yes\", ``False`` for \"No\", and ``None`` for \"Cancel\"."
msgstr ""

#: easygraphics.dialog.show_image_dialog:3 of
msgid "the image to be displayed"
msgstr ""

#: easygraphics.dialog.show_lists_table:9 of
msgid "the lists to show"
msgstr ""

#: easygraphics.dialog.show_lists_table:10 of
msgid "the column names displayed on the table header"
msgstr ""

#: ../../apis/easygraphics.legacy.rst:2
msgid "easygraphics.legacy package"
msgstr ""

#: ../../apis/easygraphics.legacy.rst:3
msgid "The BGI compatible module."
msgstr ""

#: ../../apis/easygraphics.legacy.rst:5
msgid ""
"This module redefines the functions using the same names used in the BGI,"
" for easily porting BGI graphics programs to python."
msgstr ""

#: easygraphics.legacy.arc:1 of
msgid "Draw a Circular Arc"
msgstr ""

#: easygraphics.legacy.arc:3 of
msgid ""
"arc() draws the outline of an arc in the current drawing color.  The "
"circular arc is centered at ('x','y') with a radius of 'rad'.  The arc "
"travels from 'start' to 'end."
msgstr ""

#: easygraphics.legacy.arc:7 of
msgid "**Note**:    'start' and 'end' are in degrees; 0 degrees is a 3"
msgstr ""

#: easygraphics.legacy.arc:8 of
msgid "o'clock."
msgstr ""

#: easygraphics.legacy.bar:1 of
msgid ""
"Draws a rectangle with upper left corner at (left, top) and lower right "
"corner at (right,bottom)."
msgstr ""

#: easygraphics.legacy.bar:3 of
msgid "The rectangle doesn't have outline."
msgstr ""

#: easygraphics.legacy.bar:5 easygraphics.legacy.rectangle:5 of
msgid "x coordinate value of the upper left corner"
msgstr ""

#: easygraphics.legacy.bar:6 easygraphics.legacy.rectangle:6 of
msgid "y coordinate value of the upper left corner"
msgstr ""

#: easygraphics.legacy.bar:7 easygraphics.legacy.rectangle:7 of
msgid "x coordinate value of the lower right corner"
msgstr ""

#: easygraphics.legacy.bar:8 easygraphics.legacy.rectangle:8 of
msgid "y coordinate value of the lower right corner"
msgstr ""

#: easygraphics.legacy.bar:9 easygraphics.legacy.circle:8
#: easygraphics.legacy.cleardevice:3 easygraphics.legacy.clearviewport:3
#: easygraphics.legacy.drawpoly:18 easygraphics.legacy.ellipse:13
#: easygraphics.legacy.fillellipse:9 easygraphics.legacy.fillpoly:20
#: easygraphics.legacy.floodfill:8 easygraphics.legacy.getpixel:5
#: easygraphics.legacy.line:9 easygraphics.legacy.linerel:6
#: easygraphics.legacy.lineto:5 easygraphics.legacy.moverel:9
#: easygraphics.legacy.moveto:7 easygraphics.legacy.putpixel:6
#: easygraphics.legacy.rectangle:9 easygraphics.legacy.sector:15
#: easygraphics.legacy.textheight:3 easygraphics.legacy.textwidth:4 of
msgid ""
"the target image which will be painted on. None means it is the target "
"image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.circle:1 of
msgid "Draw a circle outline centered at (x,y) with radius r."
msgstr ""

#: easygraphics.legacy.circle:3 of
msgid "The circle is not filled."
msgstr ""

#: easygraphics.legacy.circle:5 of
msgid "x coordinate value of the circle's center"
msgstr ""

#: easygraphics.legacy.circle:6 of
msgid "y coordinate value of the circle's center"
msgstr ""

#: easygraphics.legacy.circle:7 of
msgid "radius of the circle"
msgstr ""

#: easygraphics.legacy.cleardevice:1 of
msgid "Clear the image to show the background."
msgstr ""

#: easygraphics.legacy.clearviewport:1 of
msgid "clear view port to show the background."
msgstr ""

#: easygraphics.legacy.closegraph:1 of
msgid "Close the graphics windows."
msgstr ""

#: easygraphics.legacy.closegraph:3 of
msgid "The program will exit too."
msgstr ""

#: easygraphics.legacy.drawpoly:1 of
msgid "Draw a poly line."
msgstr ""

#: easygraphics.legacy.drawpoly:3 of
msgid ""
"\"end_points\" is a 2D points list. Each 2 values in the list make a "
"point. A poly line will be drawn to connect adjacent end_points defined "
"by the the list."
msgstr ""

#: easygraphics.legacy.drawpoly:6 of
msgid ""
"For examples , if \"end_points\" is [50,50,550,350, 50,150,550,450, "
"50,250,550,550], draw_poly_line() will draw 5 lines: (50,50) to "
"(550,350), (550,350) to (50,150), (50,150) to (550,450), (550,540) to "
"(50,250) and(50,250) to (550,550)."
msgstr ""

#: easygraphics.legacy.drawpoly:17 easygraphics.legacy.fillpoly:19 of
msgid "point value list"
msgstr ""

#: easygraphics.legacy.ellipse:1 of
msgid ""
"Draw an elliptical arc from start_angle to end_angle. The base ellipse is"
" centered at (x,y) which radius on x-axis is radius_x and radius on "
"y-axis is radius_y."
msgstr ""

#: easygraphics.legacy.ellipse:4 easygraphics.legacy.sector:6 of
msgid ""
"Note: Positive values for the angles mean counter-clockwise while "
"negative values mean the clockwise direction. Zero degrees is at the 3 "
"o'clock position."
msgstr ""

#: easygraphics.legacy.ellipse:7 easygraphics.legacy.fillellipse:5
#: easygraphics.legacy.sector:9 of
msgid "x coordinate value of the ellipse's center"
msgstr ""

#: easygraphics.legacy.ellipse:8 easygraphics.legacy.fillellipse:6
#: easygraphics.legacy.sector:10 of
msgid "y coordinate value of the ellipse's center"
msgstr ""

#: easygraphics.legacy.ellipse:9 of
msgid "start angle of the arc"
msgstr ""

#: easygraphics.legacy.ellipse:10 of
msgid "end angle of the arc"
msgstr ""

#: easygraphics.legacy.ellipse:11 easygraphics.legacy.fillellipse:7
#: easygraphics.legacy.sector:13 of
msgid "radius on x-axis of the ellipse"
msgstr ""

#: easygraphics.legacy.ellipse:12 easygraphics.legacy.fillellipse:8
#: easygraphics.legacy.sector:14 of
msgid "radius on y-axis of the ellipse"
msgstr ""

#: easygraphics.legacy.fillellipse:1 of
msgid ""
"Draw an ellipse centered at (x,y) , radius on x-axis is radius_x, radius "
"on y-axis is radius_y."
msgstr ""

#: easygraphics.legacy.fillellipse:3 of
msgid "The ellipse is filled and has outline."
msgstr ""

#: easygraphics.legacy.fillpoly:1 of
msgid "Fill a polygon."
msgstr ""

#: easygraphics.legacy.fillpoly:3 of
msgid ""
"\"vertices\" is a 2D point list. Each 2 values in the list make a point. "
"A polygon will be drawn to connect adjacent points defined by the the "
"list."
msgstr ""

#: easygraphics.legacy.fillpoly:6 of
msgid ""
"For examples , if \"vertices\" is [50,50,550,350, 50,150], fill_polygon()"
" will fill a triangle with vertices at (50,50) , (550,350) and (50,150)."
msgstr ""

#: easygraphics.legacy.fillpoly:9 of
msgid "The polygon doesn't have outline."
msgstr ""

#: easygraphics.legacy.floodfill:1 of
msgid ""
"Flood fill the image starting from(x,y) and ending at borders with "
"border_color."
msgstr ""

#: easygraphics.legacy.floodfill:3 of
msgid "The fill region border must be closed,or the whole image will be filled!"
msgstr ""

#: easygraphics.legacy.floodfill:5 easygraphics.legacy.line:5 of
msgid "x coordinate value of the start point"
msgstr ""

#: easygraphics.legacy.floodfill:6 easygraphics.legacy.line:6
#: easygraphics.legacy.line:8 of
msgid "y coordinate value of the start point"
msgstr ""

#: easygraphics.legacy.floodfill:7 of
msgid "color of the fill region border"
msgstr ""

#: easygraphics.legacy.getbkcolor:1 of
msgid "Get the background color of the image."
msgstr ""

#: easygraphics.legacy.getbkcolor:3 of
msgid ""
"the target image whose background color is to be gotten. None means it is"
" the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.getbkcolor:5 of
msgid "background color of the specified image"
msgstr ""

#: easygraphics.legacy.getcolor:1 of
msgid "Get the foreground (drawing) color of the specified image."
msgstr ""

#: easygraphics.legacy.getcolor:3 of
msgid "it will be used when drawing lines or shape outlines"
msgstr ""

#: easygraphics.legacy.getcolor:5 of
msgid ""
"the target image whose foreground color is to be gotten. None means it is"
" the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.getcolor:7 of
msgid "foreground color of the specified image"
msgstr ""

#: easygraphics.legacy.getfillsettings:1 of
msgid "get fill settings"
msgstr ""

#: easygraphics.legacy.getfillsettings:3 of
msgid "fill style, fill color"
msgstr ""

#: easygraphics.legacy.getimage:1 of
msgid "Caputre specified region on the graphics windows to target image."
msgstr ""

#: easygraphics.legacy.getimage:3 of
msgid "x coordinate of the capture region's upper left corner"
msgstr ""

#: easygraphics.legacy.getimage:4 of
msgid "y coordinate of the capture region's upper left corner"
msgstr ""

#: easygraphics.legacy.getimage:5 of
msgid "x coordinate of the capture region's bottom right corner"
msgstr ""

#: easygraphics.legacy.getimage:6 of
msgid "y coordinate of the capture region's bottom right corner"
msgstr ""

#: easygraphics.legacy.getimage:7 of
msgid "image to save the capture"
msgstr ""

#: easygraphics.legacy.getlinesettings:1 of
msgid "Get line settings"
msgstr ""

#: easygraphics.legacy.getlinesettings:3 of
msgid "line style, line width"
msgstr ""

#: easygraphics.legacy.getmaxx:1 of
msgid "Get the maximum x value of graphics screen"
msgstr ""

#: easygraphics.legacy.getmaxx:3 of
msgid "the maximum x value"
msgstr ""

#: easygraphics.legacy.getmaxy:1 of
msgid "Get the maximum y value of graphics screen"
msgstr ""

#: easygraphics.legacy.getmaxy:3 of
msgid "the maximum y value"
msgstr ""

#: easygraphics.legacy.getpixel:1 of
msgid "Get a pixel's color on the specified image."
msgstr ""

#: easygraphics.legacy.getpixel:3 easygraphics.legacy.putpixel:3 of
msgid "x coordinate value of the pixel"
msgstr ""

#: easygraphics.legacy.getpixel:4 easygraphics.legacy.putpixel:4 of
msgid "y coordinate value of the pixel"
msgstr ""

#: easygraphics.legacy.getpixel:7 of
msgid "color of the pixel"
msgstr ""

#: easygraphics.legacy.getx:1 of
msgid "Get the x coordinate value of the current drawing position (x,y)."
msgstr ""

#: easygraphics.legacy.getx:3 easygraphics.legacy.gety:3 of
msgid ""
"Some drawing functions will use the current pos to draw.(see "
"line_to(),line_rel(),move_to(),move_rel())."
msgstr ""

#: easygraphics.legacy.getx:5 easygraphics.legacy.gety:5 of
msgid ""
"the target image whose drawing pos is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.getx:7 of
msgid "the x coordinate value of the current drawing position"
msgstr ""

#: easygraphics.legacy.gety:1 of
msgid "Get the y coordinate value of the current drawing position (x,y)."
msgstr ""

#: easygraphics.legacy.gety:7 of
msgid "the y coordinate value of the current drawing position"
msgstr ""

#: easygraphics.legacy.initgraph:1 of
msgid "Init the easygraphics system and show the graphics window."
msgstr ""

#: easygraphics.legacy.initgraph:3 of
msgid ""
"If \"headless\" is True, easygraphics will run in headless mode, which "
"means there will be no graphics window. Use this mode if you want to draw"
" and save image to files."
msgstr ""

#: easygraphics.legacy.initgraph:7 of
msgid "width of the graphics window (in pixels)"
msgstr ""

#: easygraphics.legacy.initgraph:8 of
msgid "height of the graphics window (in pixels)"
msgstr ""

#: easygraphics.legacy.initgraph:9 of
msgid "True to run in headless mode."
msgstr ""

#: easygraphics.legacy.line:1 of
msgid "Draw a line from (x1,y1) to (x2,y2) on the specified image."
msgstr ""

#: easygraphics.legacy.line:3 of
msgid "It's the same with line()."
msgstr ""

#: easygraphics.legacy.line:7 of
msgid "x coordinate value of the end point"
msgstr ""

#: easygraphics.legacy.linerel:1 of
msgid ""
"Draw a line from the current drawing position (x,y) to (x+dx,y+dy), then "
"set the drawing position is set to (x+dx,y+dy)."
msgstr ""

#: easygraphics.legacy.linerel:4 easygraphics.legacy.moverel:7 of
msgid "x coordinate offset of the new drawing position"
msgstr ""

#: easygraphics.legacy.linerel:5 easygraphics.legacy.moverel:8 of
msgid "y coordinate offset of the new drawing position"
msgstr ""

#: easygraphics.legacy.lineto:1 of
msgid ""
"Draw a line from the current drawing position to (x,y), then set the "
"drawing position is set to (x,y)."
msgstr ""

#: easygraphics.legacy.lineto:3 easygraphics.legacy.moveto:5 of
msgid "x coordinate value of the new drawing position"
msgstr ""

#: easygraphics.legacy.lineto:4 easygraphics.legacy.moveto:6 of
msgid "y coordinate value of the new drawing position"
msgstr ""

#: easygraphics.legacy.moverel:1 of
msgid "Move the drawing position by (dx,dy)."
msgstr ""

#: easygraphics.legacy.moverel:3 of
msgid "If the old position is (x,y), then the new position will be (x+dx,y+dy)."
msgstr ""

#: easygraphics.legacy.moverel:5 of
msgid "The drawing position is used by line_to(), line_rel()."
msgstr ""

#: easygraphics.legacy.moveto:1 of
msgid "Set the drawing position to (x,y)."
msgstr ""

#: easygraphics.legacy.moveto:3 of
msgid "The drawing position is used by line_to(), line_rel() and move_rel()."
msgstr ""

#: easygraphics.legacy.outtext:1 of
msgid "Display the given text on the current position"
msgstr ""

#: easygraphics.legacy.outtext:3 easygraphics.legacy.outtextxy:5 of
msgid "text to be displayed"
msgstr ""

#: easygraphics.legacy.outtextxy:1 of
msgid "Display the given text on the specified position"
msgstr ""

#: easygraphics.legacy.outtextxy:3 of
msgid "x pos of the string"
msgstr ""

#: easygraphics.legacy.outtextxy:4 of
msgid "y pos of the string"
msgstr ""

#: easygraphics.legacy.putimage:1 of
msgid "Puts a previously-saved bit image back onto the screen."
msgstr ""

#: easygraphics.legacy.putimage:3 of
msgid "The coordinates ('left','top') are used to place the image on the screen."
msgstr ""

#: easygraphics.legacy.putimage:6 of
msgid "image is a previously screen copy (using getimage())."
msgstr ""

#: easygraphics.legacy.putimage:8 of
msgid ""
"'op' determines how the color for each destination pixel is computed. "
"This is based on the pixel already on the screen and the source pixel in "
"memory. The available ops are COPY_PUT, XOR_PUT, OR_PUT, AND_PUT and "
"NOT_PUT"
msgstr ""

#: easygraphics.legacy.putimage:12 of
msgid "left position on the screen to be copied"
msgstr ""

#: easygraphics.legacy.putimage:13 of
msgid "top position on the screen to be copied"
msgstr ""

#: easygraphics.legacy.putimage:14 of
msgid "the image to be copied"
msgstr ""

#: easygraphics.legacy.putimage:15 of
msgid "copy operation"
msgstr ""

#: easygraphics.legacy.putpixel:1 of
msgid "Set a pixel's color on the specified image."
msgstr ""

#: easygraphics.legacy.putpixel:5 of
msgid "the color"
msgstr ""

#: easygraphics.legacy.rectangle:1 of
msgid ""
"Draws a rectangle outline with upper left corner at (left, top) and lower"
" right corner at (right,bottom)."
msgstr ""

#: easygraphics.legacy.rectangle:3 of
msgid "The rectangle is not filled."
msgstr ""

#: easygraphics.legacy.sector:1 of
msgid ""
"Draw an elliptical pie from start_angle to end_angle. The base ellipse is"
" centered at (x,y) which radius on x-axis is radius_x and radius on "
"y-axis is radius_y."
msgstr ""

#: easygraphics.legacy.sector:4 of
msgid "The pie is filled and has outline."
msgstr ""

#: easygraphics.legacy.sector:11 of
msgid "start angle of the pie"
msgstr ""

#: easygraphics.legacy.sector:12 of
msgid "end angle of the pie"
msgstr ""

#: easygraphics.legacy.setbkcolor:1 of
msgid "Set and change the background color."
msgstr ""

#: easygraphics.legacy.setbkcolor:3 easygraphics.legacy.setcolor:5 of
msgid ""
"the possible color could be consts defined in Color class, or the color "
"created by rgb() function, or PyQt5's QColor , QGradient object or "
"Qt.GlobalColor consts (see the pyqt reference)."
msgstr ""

#: easygraphics.legacy.setbkcolor:7 of
msgid "the background color"
msgstr ""

#: easygraphics.legacy.setbkcolor:8 of
msgid ""
"the target image whose background color is to be set. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.setcolor:1 of
msgid "Set the foreground (drawing) color of the specified image."
msgstr ""

#: easygraphics.legacy.setcolor:3 of
msgid "it will be used when drawing lines or shape outlines."
msgstr ""

#: easygraphics.legacy.setcolor:9 of
msgid "the foreground color"
msgstr ""

#: easygraphics.legacy.setcolor:10 of
msgid ""
"the target image whose foreground color is to be set. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.setfillstyle:1 of
msgid "Set fill pattern :param pattern: fill style :param color: fill color"
msgstr ""

#: easygraphics.legacy.setlinestyle:1 of
msgid ""
"Set line style :param linstyle: line style :param upattern:  no use "
":param thickness: line width :param img: :return:"
msgstr ""

#: easygraphics.legacy.settextjustify:1 of
msgid "Set Current Text Justification Settings"
msgstr ""

#: easygraphics.legacy.settextjustify:3 of
msgid ""
"settextjustify() controls text justification with respect to the current "
"position (CP).  The text is justified horizontally and vertically."
msgstr ""

#: easygraphics.legacy.settextjustify:7 of
msgid ""
"Constants of the text_just for 'horiz' are: LEFT_TEXT, CENTER_TEXT, "
"RIGHT_TEXT"
msgstr ""

#: easygraphics.legacy.settextjustify:9 of
msgid ""
"Constants of the text_just for 'vert' are: TOP_TEXT, CENTER_TEXT, "
"BOTTOM_TEXT"
msgstr ""

#: easygraphics.legacy.setviewport:1 of
msgid "Set the view port of the the specified image."
msgstr ""

#: easygraphics.legacy.setviewport:3 of
msgid "View port is the drawing zone on the image."
msgstr ""

#: easygraphics.legacy.setviewport:15 of
msgid "left of the view port rectangle"
msgstr ""

#: easygraphics.legacy.setviewport:16 of
msgid "top of the view port rectangle"
msgstr ""

#: easygraphics.legacy.setviewport:17 of
msgid "right of the view port rectangle"
msgstr ""

#: easygraphics.legacy.setviewport:18 of
msgid "bottom of the view port rectangle"
msgstr ""

#: easygraphics.legacy.setviewport:19 of
msgid "if True, drawings outside the port rectangle will be clipped"
msgstr ""

#: easygraphics.legacy.setviewport:20 of
msgid ""
"the target image whose view port is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.legacy.setwritemode:1 of
msgid "Set Write Mode for Line Drawing"
msgstr ""

#: easygraphics.legacy.setwritemode:3 of
msgid ""
"This function sets the writing mode for line drawing. If mode is 0, lines"
" overwrite the screen's current contents. On the other hand, If mode is "
"1, an exclusive OR (XOR) is done."
msgstr ""

#: easygraphics.legacy.textheight:1 of
msgid "Return height of the text (font height)."
msgstr ""

#: easygraphics.legacy.textheight:5 of
msgid "height of the text (font height)"
msgstr ""

#: easygraphics.legacy.textwidth:1 of
msgid "Return width of the text."
msgstr ""

#: easygraphics.legacy.textwidth:3 of
msgid "the text"
msgstr ""

#: easygraphics.legacy.textwidth:6 of
msgid "width of the text"
msgstr ""

#: ../../apis/easygraphics.music.rst:2
msgid "easygraphics.music package"
msgstr ""

#: ../../apis/easygraphics.music.rst:3
msgid "A simple music play module."
msgstr ""

#: ../../apis/easygraphics.music.rst:6
msgid "Function List"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`load_music <easygraphics.music.load_music>`\\ \\(filename\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.load_music:1 of
msgid "Load a music file for playback."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`close_music <easygraphics.music.close_music>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.close_music:1 of
msgid "Close the music playback device."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`play_music <easygraphics.music.play_music>`\\ \\(loops\\, start\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.play_music:1 of
msgid "Play the music."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`pause_music <easygraphics.music.pause_music>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.pause_music:1 of
msgid "Pause the music playback."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`unpause_music <easygraphics.music.unpause_music>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.unpause_music:1 of
msgid "Unpause the music playback."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`stop_music <easygraphics.music.stop_music>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.stop_music:1 of
msgid "Stop the music playback."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`queue_music <easygraphics.music.queue_music>`\\ \\(filename\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.queue_music:1 of
msgid "Add music to the playing queue."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`is_music_playing <easygraphics.music.is_music_playing>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.is_music_playing:1 of
msgid "Get if the music is playing."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`get_music_pos <easygraphics.music.get_music_pos>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.get_music_pos:1 of
msgid "Get current music playback position ."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`get_music_volume <easygraphics.music.get_music_volume>`\\ \\(\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.get_music_volume:1 of
msgid "Return the music playback volume."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`set_music_pos <easygraphics.music.set_music_pos>`\\ \\(pos\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.set_music_pos:1 of
msgid "Set current music play position."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ""
":obj:`set_music_volume <easygraphics.music.set_music_volume>`\\ "
"\\(volume\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.set_music_volume:1 of
msgid "Set volume of the music playback."
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
msgid ":obj:`fade_out_music <easygraphics.music.fade_out_music>`\\ \\(time\\)"
msgstr ""

#: ../../apis/easygraphics.music.rst:25:<autosummary>:1
#: easygraphics.music.fade_out_music:1 of
msgid "Fade out and stop the music."
msgstr ""

#: easygraphics.music:1 of
msgid "A simple music play library."
msgstr ""

#: easygraphics.music:3 of
msgid "You can use it to load and play music files."
msgstr ""

#: easygraphics.music.load_music:3 of
msgid ""
"If music playback device is note initialized, it will be initialized "
"automatically."
msgstr ""

#: easygraphics.music.load_music:5 of
msgid "Use play_music() to play the music."
msgstr ""

#: easygraphics.music.load_music:7 of
msgid "the music file to play"
msgstr ""

#: easygraphics.music.play_music:3 of
msgid "loops. 0 means no loop"
msgstr ""

#: easygraphics.music.play_music:4 of
msgid "start position of the music"
msgstr ""

#: easygraphics.music.queue_music:3 of
msgid "the music file to be queued."
msgstr ""

#: easygraphics.music.is_music_playing:3 of
msgid "True if is playing, False if is not."
msgstr ""

#: easygraphics.music.get_music_pos:3 of
msgid "current position"
msgstr ""

#: easygraphics.music.get_music_volume:3 of
msgid "the playback volume."
msgstr ""

#: easygraphics.music.set_music_pos:3 of
msgid "the position to set."
msgstr ""

#: easygraphics.music.set_music_volume:3 of
msgid "volume of the playback"
msgstr ""

#: easygraphics.music.fade_out_music:3 of
msgid "fade out time (in milliseconds)"
msgstr ""

#: ../../apis/easygraphics.turtle.rst:2 ../../apis/easygraphics.widget.rst:2
msgid "easygraphics.turtle module"
msgstr ""

#: ../../apis/easygraphics.turtle.rst:3
msgid "The turtle graphics package."
msgstr ""

#: ../../apis/easygraphics.turtle.rst:5
msgid ""
"The turtle graphics is a classic and popular way to introducing "
"programming to kids."
msgstr ""

#: ../../apis/easygraphics.turtle.rst:7
msgid ""
"In the turtle graphics, you control a turtle to move around the graphics "
"window. The traces left by its move form drawings."
msgstr ""

#: ../../apis/easygraphics.turtle.rst:10
msgid ""
"Note that in the turtle graphics, the origin (0,0) is in the center of "
"the graphics window, and Y-axis is bottom-up."
msgstr ""

#: easygraphics.turtle.create_world:1 of
msgid "Create an world for turtle drawing."
msgstr ""

#: easygraphics.turtle.create_world:3 of
msgid "width of the graphics window"
msgstr ""

#: easygraphics.turtle.create_world:4 of
msgid "height of the graphics window"
msgstr ""

#: easygraphics.turtle.close_world:1 of
msgid "Close the turtle world and the graphics window."
msgstr ""

#: easygraphics.turtle.Turtle.fd:1 easygraphics.turtle.Turtle.forward:1
#: easygraphics.turtle.fd:1 easygraphics.turtle.forward:1 of
msgid ""
"Move the turtle forward by the specified distance, in the direction the "
"turtle is heading."
msgstr ""

#: easygraphics.turtle.Turtle.back:3 easygraphics.turtle.Turtle.backward:3
#: easygraphics.turtle.Turtle.bk:3 easygraphics.turtle.Turtle.fd:3
#: easygraphics.turtle.Turtle.forward:3 easygraphics.turtle.back:3
#: easygraphics.turtle.backward:3 easygraphics.turtle.bk:3
#: easygraphics.turtle.fd:3 easygraphics.turtle.forward:3 of
msgid "the distance to move"
msgstr ""

#: easygraphics.turtle.Turtle.back:1 easygraphics.turtle.Turtle.backward:1
#: easygraphics.turtle.Turtle.bk:1 easygraphics.turtle.back:1
#: easygraphics.turtle.backward:1 easygraphics.turtle.bk:1 of
msgid ""
"Move the turtle backward by the specified distance, in the direction the "
"turtle is heading."
msgstr ""

#: easygraphics.turtle.Turtle.left:1 easygraphics.turtle.Turtle.left_turn:1
#: easygraphics.turtle.Turtle.lt:1 easygraphics.turtle.left:1
#: easygraphics.turtle.left_turn:1 easygraphics.turtle.lt:1 of
msgid "Turn turtle left (counter-clockwise) by \"degree\" degree."
msgstr ""

#: easygraphics.turtle.Turtle.left:3 easygraphics.turtle.Turtle.left_turn:3
#: easygraphics.turtle.Turtle.lt:3 easygraphics.turtle.Turtle.right:3
#: easygraphics.turtle.Turtle.right_turn:3 easygraphics.turtle.Turtle.rt:3
#: easygraphics.turtle.left:3 easygraphics.turtle.left_turn:3
#: easygraphics.turtle.lt:3 easygraphics.turtle.right:3
#: easygraphics.turtle.right_turn:3 easygraphics.turtle.rt:3 of
msgid "the degree to turn"
msgstr ""

#: easygraphics.turtle.Turtle.right:1 easygraphics.turtle.Turtle.right_turn:1
#: easygraphics.turtle.Turtle.rt:1 easygraphics.turtle.right:1
#: easygraphics.turtle.right_turn:1 easygraphics.turtle.rt:1 of
msgid "Turn turtle right (clockwise) by \"degree\" degree."
msgstr ""

#: easygraphics.turtle.TurtleWorld.clear:1
#: easygraphics.turtle.TurtleWorld.clear_screen:1
#: easygraphics.turtle.TurtleWorld.cs:1 easygraphics.turtle.clear_screen:1
#: easygraphics.turtle.cs:1 of
msgid "Delete all drawings from the screen. Do not move turtle."
msgstr ""

#: easygraphics.turtle.Turtle.gotoxy:1 easygraphics.turtle.gotoxy:1 of
msgid "Move the turtle to point (x,y). Will leave traces if the pen is down."
msgstr ""

#: easygraphics.turtle.Turtle.gotoxy:3 easygraphics.turtle.Turtle.gotoxy:4
#: easygraphics.turtle.Turtle.setxy:3 easygraphics.turtle.gotoxy:3
#: easygraphics.turtle.gotoxy:4 easygraphics.turtle.setxy:3 of
msgid "x coordinate value of the destination point."
msgstr ""

#: easygraphics.turtle.Turtle.home:1 easygraphics.turtle.home:1 of
msgid ""
"Move the turtle back to the origin(0,0), and heading up. Will leave "
"traces if the pen is down."
msgstr ""

#: easygraphics.turtle.Turtle.turn_to:1 easygraphics.turtle.turn_to:1 of
msgid "Turn the angle to orient to the specified angle."
msgstr ""

#: easygraphics.turtle.Turtle.set_heading:3
#: easygraphics.turtle.Turtle.turn_to:3 easygraphics.turtle.set_heading:3
#: easygraphics.turtle.turn_to:3 of
msgid "the new heading angle (in degrees)."
msgstr ""

#: easygraphics.turtle.Turtle.facing:1 easygraphics.turtle.facing:1 of
msgid "Turn the turtle to face the point(x,y)."
msgstr ""

#: easygraphics.turtle.facing:3 of
msgid "x coordinate value of the target point"
msgstr ""

#: easygraphics.turtle.facing:4 of
msgid "y coordinate value of the target point"
msgstr ""

#: easygraphics.turtle.Turtle.begin_fill:1 easygraphics.turtle.begin_fill:1 of
msgid "Begin to record the turtle's shape drawing path for filling."
msgstr ""

#: easygraphics.turtle.Turtle.end_fill:1 easygraphics.turtle.end_fill:1 of
msgid ""
"Fill the shape enclosed by the turtle's drawing path after the last call "
"to begin_fill."
msgstr ""

#: easygraphics.turtle.Turtle.setxy:1 easygraphics.turtle.setxy:1 of
msgid "Set the turtle's current position to point (x,y). Will not leave traces."
msgstr ""

#: easygraphics.turtle.Turtle.setxy:4 easygraphics.turtle.setxy:4 of
msgid "y coordinate value of the destination point."
msgstr ""

#: easygraphics.turtle.Turtle.set_heading:1 easygraphics.turtle.set_heading:1
#: of
msgid "Set the angle current heading to the specified angle."
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:3 easygraphics.turtle.move_arc:1 of
msgid ""
"The center is radius units left of the turtle. That is, if radius > 0, "
"the center is on the left of the turtle; if radius < 0, the center is on "
"the right of the turtle."
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:6
#: easygraphics.turtle.Turtle.move_ellipse:10 easygraphics.turtle.move_arc:4
#: easygraphics.turtle.move_ellipse:10 of
msgid ""
"If angle > 0, the turtle moves forward around the center; if angle < 0, "
"the turtle moves backward around the center. So:"
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:9 easygraphics.turtle.move_arc:7 of
msgid ""
"if angle > 0 and radius > 0, the turtle moves forward and turns counter-"
"clockwise;"
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:10 easygraphics.turtle.move_arc:8 of
msgid "if angle > 0 and raidus < 0, the turtle move forward and turns clockwise;"
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:11 easygraphics.turtle.move_arc:9 of
msgid "if angle <0 and radius > 0, the turtle moves backward and turns clockwise;"
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:12 easygraphics.turtle.move_arc:10 of
msgid ""
"if angle <0 and radius < 0, the turtle moves backward and turns counter-"
"clockwise."
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:14 easygraphics.turtle.move_arc:12 of
msgid "radius of the arc"
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:15
#: easygraphics.turtle.Turtle.move_ellipse:20 easygraphics.turtle.move_arc:13
#: easygraphics.turtle.move_ellipse:20 of
msgid "how many degrees the turtle will move"
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:1 easygraphics.turtle.move_ellipse:1
#: of
msgid "Move the turtle in an elliptical path."
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:3 easygraphics.turtle.move_ellipse:3
#: of
msgid ""
"\"radius_left\" is the radius of the ellipse on the direction "
"perpendicular to the turtle's orientation, it can be postive or "
"negtive;\"radius_top\" is the radius of the ellipse on the direction "
"parallel to the turtle's orientation, it must be postive."
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:7 easygraphics.turtle.move_ellipse:7
#: of
msgid ""
"The center is radius_left units left of the turtle. That is, if "
"radius_left > 0, the center is on the left of the turtle; if radius_left "
"< 0, the center is on the right of the turtle."
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:13
#: easygraphics.turtle.move_ellipse:13 of
msgid ""
"if angle > 0 and radius_left > 0, the turtle moves forward and turns "
"counter-clockwise;"
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:14
#: easygraphics.turtle.move_ellipse:14 of
msgid ""
"if angle > 0 and radius_left < 0, the turtle move forward and turns "
"clockwise;"
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:15
#: easygraphics.turtle.move_ellipse:15 of
msgid ""
"if angle <0 and radius_left > 0, the turtle moves backward and turns "
"clockwise;"
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:16
#: easygraphics.turtle.move_ellipse:16 of
msgid ""
"if angle <0 and radius_left < 0, the turtle moves backward and turns "
"counter-clockwise."
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:18
#: easygraphics.turtle.move_ellipse:18 of
msgid ""
"the radius of the ellipse on the direction perpendicular to the turtle's "
"orientation"
msgstr ""

#: easygraphics.turtle.Turtle.move_ellipse:19
#: easygraphics.turtle.move_ellipse:19 of
msgid ""
"the radius of the ellipse on the direction parallel to the turtle's "
"orientation"
msgstr ""

#: easygraphics.turtle.Turtle.get_y:1 easygraphics.turtle.get_y:1 of
msgid "Get the turtle's current y position."
msgstr ""

#: easygraphics.turtle.Turtle.get_y:3 easygraphics.turtle.get_y:3 of
msgid "the turtle's y position."
msgstr ""

#: easygraphics.turtle.Turtle.get_x:1 easygraphics.turtle.get_x:1 of
msgid "Get the turtle's current x position."
msgstr ""

#: easygraphics.turtle.Turtle.get_x:3 easygraphics.turtle.get_x:3 of
msgid "the turtle's x position."
msgstr ""

#: easygraphics.turtle.Turtle.get_heading:1 easygraphics.turtle.get_heading:1
#: of
msgid "Get the turtle's heading angle."
msgstr ""

#: easygraphics.turtle.Turtle.get_heading:3 easygraphics.turtle.get_heading:3
#: of
msgid "the turtle's heading angle."
msgstr ""

#: easygraphics.turtle.get_turtle:1 of
msgid "Get the current turtle."
msgstr ""

#: easygraphics.turtle.get_turtle:3 of
msgid "the current turtle"
msgstr ""

#: easygraphics.turtle.get_turtle_world:1 of
msgid "Get the current turtle world."
msgstr ""

#: easygraphics.turtle.get_turtle_world:3 of
msgid "the current turtle world"
msgstr ""

#: easygraphics.turtle.set_pen_size:1 of
msgid "Set line width (thickness) of the specified image."
msgstr ""

#: easygraphics.turtle.set_pen_size:3 of
msgid "It will be used when drawing lines or shape outlines"
msgstr ""

#: easygraphics.turtle.set_pen_size:5 of
msgid "line width (line thickness)"
msgstr ""

#: easygraphics.turtle.set_pen_size:6 of
msgid ""
"the target image whose line width is to be set. None means it is the "
"target image (see set_target() and get_target())"
msgstr ""

#: easygraphics.turtle.set_immediate:1 of
msgid "Set if there are animations when the turtle moving."
msgstr ""

#: easygraphics.turtle.TurtleWorld.set_immediate:3
#: easygraphics.turtle.set_immediate:3 of
msgid ""
"True to turn off animation (the move finishes immediately). False to turn"
" on."
msgstr ""

#: easygraphics.turtle.Turtle.set_speed:1 easygraphics.turtle.set_speed:1 of
msgid "Set the turtle's moving speed."
msgstr ""

#: easygraphics.turtle.Turtle.set_speed:3 easygraphics.turtle.set_speed:3 of
msgid "the new speed"
msgstr ""

#: easygraphics.turtle.Turtle.pd:1 easygraphics.turtle.Turtle.pen_down:1
#: easygraphics.turtle.pd:1 easygraphics.turtle.pen_down:1 of
msgid "Pull the pen down – drawing when the turtle moving."
msgstr ""

#: easygraphics.turtle.Turtle.pen_up:1 easygraphics.turtle.Turtle.pu:1
#: easygraphics.turtle.pen_up:1 easygraphics.turtle.pu:1 of
msgid "Pull the pen up – no drawing when the turtle moving."
msgstr ""

#: easygraphics.turtle.Turtle.hide:1 easygraphics.turtle.hide:1 of
msgid "Hide the turtle."
msgstr ""

#: easygraphics.turtle.Turtle.show:1 easygraphics.turtle.show:1 of
msgid "Show the turtle."
msgstr ""

#: easygraphics.turtle.pause:1 of
msgid "Pause the program and wait for mouse clicking or keyboard hitting."
msgstr ""

#: easygraphics.turtle.is_run:1 of
msgid "Test if the graphics system is running."
msgstr ""

#: easygraphics.turtle.is_run:3 of
msgid "True if the graphics system is running."
msgstr ""

#: easygraphics.turtle.Turtle.is_out_of_window:1
#: easygraphics.turtle.is_out_of_window:1 of
msgid "Test if the turtle is out of the graphics window."
msgstr ""

#: easygraphics.turtle.Turtle.is_out_of_window:3
#: easygraphics.turtle.is_out_of_window:3 of
msgid "True if the turtle is out of the window, False otherwise."
msgstr ""

#: easygraphics.turtle.Turtle:1 of
msgid "The Turtle class."
msgstr ""

#: easygraphics.turtle.Turtle.cancle_fill:1 of
msgid "Cancle the turtle's drawing path recording."
msgstr ""

#: easygraphics.turtle.Turtle.close:1 of
msgid "Close and cleanup the turtle."
msgstr ""

#: easygraphics.turtle.Turtle.create_turtle_icon:1 of
msgid "Create the default turtle icon."
msgstr ""

#: easygraphics.turtle.Turtle.create_turtle_icon:3 of
msgid "the turtle icon image"
msgstr ""

#: easygraphics.turtle.Turtle.facing:3 of
msgid "x coordinate value of the point facing to"
msgstr ""

#: easygraphics.turtle.Turtle.facing:4 of
msgid "y coordinate value of the point facing to"
msgstr ""

#: easygraphics.turtle.Turtle.get_icon:1 of
msgid "Get the icon image of the turtle."
msgstr ""

#: easygraphics.turtle.Turtle.get_icon:3 of
msgid "the icon image"
msgstr ""

#: easygraphics.turtle.Turtle.is_filling:1 of
msgid "Test if it is recording the turtle's drawing path (for fill)."
msgstr ""

#: easygraphics.turtle.Turtle.is_show:1 of
msgid "Check if the turtle is shown."
msgstr ""

#: easygraphics.turtle.Turtle.is_show:3 of
msgid "True the turtle is shown, False the turtle is hiding."
msgstr ""

#: easygraphics.turtle.Turtle.move_arc:1 of
msgid "Move the turtle in a arc path."
msgstr ""

#: easygraphics.turtle.TurtleWorld:1 of
msgid ""
"Turtles move and draw in a world. This is the class representing the "
"world."
msgstr ""

#: easygraphics.turtle.TurtleWorld:3 of
msgid ""
"You must remember to close it by calling the close() method, if you have "
"finished the drawing and won't use it anymore."
msgstr ""

#: easygraphics.turtle.TurtleWorld:7 of
msgid ""
"Note that in the default world, we are using a normal coordinate system "
"that (0,0) is in the center of the graphics window (image), the X-axis "
"grows from left to right, and the Y-axis grows from bottom to top. A "
"positive degree means turn counter-clockwise, and a negtive degree means "
"turn clockwise."
msgstr ""

#: easygraphics.turtle.TurtleWorld.add_turtle:1 of
msgid "Put the turtle into the world."
msgstr ""

#: easygraphics.turtle.TurtleWorld.add_turtle:3
#: easygraphics.widget.TurtleWidget.getTurtle:3 of
msgid "the turtle"
msgstr ""

#: easygraphics.turtle.TurtleWorld.close:1 of
msgid "Close the turtles world."
msgstr ""

#: easygraphics.turtle.TurtleWorld.create_snap_shot:1 of
msgid "Create a snap shot of the current drawing."
msgstr ""

#: easygraphics.turtle.TurtleWorld.create_snap_shot:3 of
msgid "the snap shot image."
msgstr ""

#: easygraphics.turtle.TurtleWorld.create_turtle:1 of
msgid "Create a new turtle in the world and put it to the origin(0,0)."
msgstr ""

#: easygraphics.turtle.TurtleWorld.create_turtle:3 of
msgid "If x and y are None, the turtle is put on the center."
msgstr ""

#: easygraphics.turtle.TurtleWorld.create_turtle:5 of
msgid "the created turtle."
msgstr ""

#: easygraphics.turtle.TurtleWorld.get_height:1 of
msgid "Get the height of the underlying graphics window (image)."
msgstr ""

#: easygraphics.turtle.TurtleWorld.get_height:3 of
msgid "height of the underlying graphics window (image)"
msgstr ""

#: easygraphics.turtle.TurtleWorld.get_width:1 of
msgid "Get the width of the underlying graphics window (image)."
msgstr ""

#: easygraphics.turtle.TurtleWorld.get_width:3 of
msgid "width of the underlying graphics window (image)"
msgstr ""

#: easygraphics.turtle.TurtleWorld.get_world_image:1 of
msgid "Return the drawing image of the world."
msgstr ""

#: easygraphics.turtle.TurtleWorld.get_world_image:3 of
msgid "the drawing image of the world."
msgstr ""

#: easygraphics.turtle.TurtleWorld.is_immediate:1 of
msgid "Check if there are animations when turtles moving."
msgstr ""

#: easygraphics.turtle.TurtleWorld.is_immediate:3 of
msgid ""
"True if there aren't any animations (the move finishes immediately), "
"False otherwise."
msgstr ""

#: easygraphics.turtle.TurtleWorld.is_on_screen:1 of
msgid "Test if the underlying image is the graphics window."
msgstr ""

#: easygraphics.turtle.TurtleWorld.is_on_screen:3 of
msgid "True if the underlying image is the graphics window, False otherwise."
msgstr ""

#: easygraphics.turtle.TurtleWorld.set_immediate:1 of
msgid "Set if there are animations when turtles moving."
msgstr ""

#: easygraphics.turtle.TurtleWorld.snap_shot_to_image:1 of
msgid "Create a snap shot to the specified image."
msgstr ""

#: easygraphics.turtle.TurtleWorld.snap_shot_to_image:3 of
msgid "The snap shot will be copied to the image's (x,y)."
msgstr ""

#: easygraphics.turtle.TurtleWorld.snap_shot_to_image:5 of
msgid "the image to copy the snap shot"
msgstr ""

#: easygraphics.turtle.TurtleWorld.snap_shot_to_image:6 of
msgid "x coordinate value of the target position"
msgstr ""

#: easygraphics.turtle.TurtleWorld.snap_shot_to_image:7 of
msgid "y coordinate value of the target position"
msgstr ""

#: ../../apis/easygraphics.widget.rst:3
msgid "The qt widget package."
msgstr ""

#: ../../apis/easygraphics.widget.rst:5
msgid ""
"This package provides two qt widget classes, for embeding easygraphics "
"image or turtle graphics in qt applications:"
msgstr ""

#: ../../apis/easygraphics.widget.rst:8
msgid ""
"ImageWidget: this class is for embedding easygraphics image in qt "
"applications. No animation support"
msgstr ""

#: ../../apis/easygraphics.widget.rst:9
msgid ""
"TurtleWidget: this class is for embedding turtle graphics in qt "
"applications. Can run animation code (using run_animated_code() method)."
msgstr ""

#: easygraphics.widget.ImageWidget.getImage:1 of
msgid "Get the underlying image object."
msgstr ""

#: easygraphics.widget.ImageWidget.getImage:3
#: easygraphics.widget.ImageWidget.setImage:3 of
msgid "the underlying image object"
msgstr ""

#: easygraphics.widget.ImageWidget.setImage:1 of
msgid "Set the widget's underlying Image object."
msgstr ""

#: easygraphics.widget.TurtleWidget.close:1 of
msgid "Close the widget."
msgstr ""

#: easygraphics.widget.TurtleWidget.getTurtle:1 of
msgid "Get the turtle."
msgstr ""

#: easygraphics.widget.TurtleWidget.getWorld:1 of
msgid "Get the underlying turtle world."
msgstr ""

#: easygraphics.widget.TurtleWidget.getWorld:3 of
msgid "the turtle world"
msgstr ""

#: easygraphics.widget.TurtleWidget.is_run:1 of
msgid "Test if the turtle world is running."
msgstr ""

#: easygraphics.widget.TurtleWidget.is_run:3 of
msgid "True if is running, False if not."
msgstr ""

#: easygraphics.widget.TurtleWidget.run_animated_code:1 of
msgid "Run turtle code."
msgstr ""

#: easygraphics.widget.TurtleWidget.run_animated_code:3 of
msgid "the callable object(function or method) to run"
msgstr ""

#~ msgid "easygraphics.graphwin module"
#~ msgstr ""

#~ msgid "Bases: :class:`sphinx.ext.autodoc.importer._MockObject`"
#~ msgstr ""

#~ msgid "Main Window for painting graphics"
#~ msgstr ""

#~ msgid "we use an Image object (self._canvas) to save the painted contents"
#~ msgstr ""

#~ msgid ""
#~ "how to process repaint event: if "
#~ "we are in immediate mode (RENDER_AUTO,"
#~ " self._immediate=True) ,"
#~ msgstr ""

#~ msgid "we directly paint the saved contents to the window"
#~ msgstr ""

#~ msgid ""
#~ "if we are in manual refresh mode"
#~ " (RENDER_MANUAL, self._immediate=False),"
#~ msgstr ""

#~ msgid ""
#~ "we use another image object( "
#~ "self._device_image) as an intermediary the "
#~ "contents on this object is painted "
#~ "to the window and this object is"
#~ " synced with self._screen manually"
#~ msgstr ""

#~ msgid "delay for milliseconds :param milliseconds: time to delay"
#~ msgstr ""

#~ msgid "delay to control fps without frame skiping"
#~ msgstr ""

#~ msgid "never skip frames"
#~ msgstr ""

#~ msgid "delay to control fps with frame skiping"
#~ msgstr ""

#~ msgid ""
#~ "if we don't have enough time to"
#~ " delay, we'll skip some frames :param"
#~ " fps: frames per second (max is "
#~ "1000) :param max_skip_count: max num of"
#~ "  frames to skip"
#~ msgstr ""

#~ msgid ""
#~ "get the ascii char inputted by "
#~ "keybord if not any char key is "
#~ "pressed in last 100 ms, the "
#~ "program will stop and wait for the"
#~ " next key hitting"
#~ msgstr ""

#~ msgid "the character inputted by keybord"
#~ msgstr ""

#~ msgid ""
#~ "get the key inputted by keyboard "
#~ "if not any  key is pressed in "
#~ "last 100 ms, the program will stop"
#~ " and wait for the next key "
#~ "hitting"
#~ msgstr ""

#~ msgid ""
#~ "keyboard code (see "
#~ "http://pyQtCore.Qt.sourceforge.net/Docs/PyQt4/QtCore.Qt.html#Key-"
#~ "enum) , keyboard modifier codes"
#~ msgstr ""

#~ msgid ""
#~ "(see "
#~ "http://pyQtCore.Qt.sourceforge.net/Docs/PyQt4/QtCore.Qt.html"
#~ "#KeyboardModifier-enum)"
#~ msgstr ""

#~ msgid ""
#~ "get the key inputted by keybord if"
#~ " not any  key is pressed in "
#~ "last 100 ms, the program will stop"
#~ " and wait for the next key "
#~ "hitting"
#~ msgstr ""

#~ msgid "x of the cursor, y of the cursor , mouse buttons down"
#~ msgstr ""

#~ msgid ""
#~ "( QtCore.Qt.LeftButton or QtCore.Qt.RightButton "
#~ "or QtCore.Qt.MidButton or QtCore.Qt.NoButton)"
#~ msgstr ""

#~ msgid "try to invalidate window"
#~ msgstr ""

#~ msgid ""
#~ "if is in immediate mode (MODE_AUTO), "
#~ "the window is updated and repaint; "
#~ "otherwise, the window is not updated"
#~ msgstr ""

#~ msgid ""
#~ "get if the graphics window will be"
#~ " updated immediately after things are "
#~ "drawn"
#~ msgstr ""

#~ msgid ""
#~ "see if any ascii char key is "
#~ "hitted in the last 100 ms use "
#~ "it with get_char()"
#~ msgstr ""

#~ msgid "True if hitted, False or not"
#~ msgstr ""

#~ msgid "see if any key is hitted in the last 100 ms use it with get_key()"
#~ msgstr ""

#~ msgid ""
#~ "see if there's any mouse message(event)"
#~ " in the last 100 ms use it "
#~ "with get_mouse()"
#~ msgstr ""

#~ msgid "True if any mouse message, False or not"
#~ msgstr ""

#~ msgid "pause and wait for mouse click or keyboard hit"
#~ msgstr ""

#~ msgid "really update and repaint the window"
#~ msgstr ""

#~ msgid "the intermediary image (self._device_image) is synced with the canvas"
#~ msgstr ""

#~ msgid ""
#~ "set if the graphics window will be"
#~ " updated immediately after things are "
#~ "drawn"
#~ msgstr ""

#~ msgid "possible values:"
#~ msgstr ""

#~ msgid ""
#~ "**True** (default, auto mode) update the"
#~ " window immediately after every drawing"
#~ msgstr ""

#~ msgid ""
#~ "**False** (manual mode) only update the"
#~ " window after pause()/delay()/delay_fps()/delay_jfps()"
#~ " is called."
#~ msgstr ""

#~ msgid "manual mode is used for animations"
#~ msgstr ""

#~ msgid "if the graphics window will be updated immediately"
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical arc from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)          which radius"
#~ " on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "draw a bezier curve"
#~ msgstr ""

#~ msgid ""
#~ "poly_points is a 2D point list. "
#~ "Each point has 2 coordinate values "
#~ "in the list.         So if you "
#~ "have 4 points (x0,y0),(x1,y1),(x2,y2),(x3,y3), "
#~ "the list should be          "
#~ "[x0,y0,x1,y1,x2,y2,x3,y3]"
#~ msgstr ""

#~ msgid "point list"
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical chord outline from"
#~ " start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)           "
#~ "which radius on x-axis is radius_x "
#~ "and radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the chord is not filled."
#~ msgstr ""

#~ msgid "Clear the image with the background color"
#~ msgstr ""

#~ msgid "clear view port with the background color"
#~ msgstr ""

#~ msgid "disable clipping"
#~ msgstr ""

#~ msgid "drawings will not be clipped"
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical chord outline from"
#~ " start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)          "
#~ "which radius on x-axis is radius_x "
#~ "and radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the chord is filled and has outline"
#~ msgstr ""

#~ msgid ""
#~ "draw an ellipse centered at (x,y) "
#~ ", radius on x-axis is radius_x, "
#~ "radius on y-axis is radius_y"
#~ msgstr ""

#~ msgid "the ellipse is filled and has outline."
#~ msgstr ""

#~ msgid ""
#~ "copy part of the source image "
#~ "(image) to the destination image (self)"
#~ " at (x,y)"
#~ msgstr ""

#~ msgid "Draw a line from (x1,y1) to (x2,y2) on the specified image"
#~ msgstr ""

#~ msgid ""
#~ "draw lines points is a 2D point"
#~ " pair list. It should contain even"
#~ " points, and each 2 points make "
#~ "a point pair. And each point have"
#~ " 2 coordinate values(x,y). So if you"
#~ " have n point pairs, the points "
#~ "list should have 4*n values."
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)          which radius"
#~ " on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the pie is filled and has outline."
#~ msgstr ""

#~ msgid "draw a point at (x,y) on the specified image"
#~ msgstr ""

#~ msgid "draw poly lines"
#~ msgstr ""

#~ msgid ""
#~ "points is a 2D point list. Each"
#~ " 2 values in the list make a"
#~ " point. A poly line will be "
#~ "drawn to connect adjecent points defined"
#~ " by the the list."
#~ msgstr ""

#~ msgid ""
#~ "For examples , if points is "
#~ "[50,50,550,350, 50,150,550,450, 50,250,550,550], "
#~ "draw_poly_line() will draw 5 lines: "
#~ "(50,50) to (550,350), (550,350) to "
#~ "(50,150), (50,150) to (550,450), (550,540) "
#~ "to (50,250) and(50,250) to (550,550)"
#~ msgstr ""

#~ msgid "draw polygon"
#~ msgstr ""

#~ msgid ""
#~ "points is a 2D point list. Each"
#~ " 2 values in the list make a"
#~ " point. A polygon will be drawn "
#~ "to connect adjecent points defined by"
#~ " the the list."
#~ msgstr ""

#~ msgid ""
#~ "Draws a rectangle with upper left "
#~ "corner at (left, top) and lower "
#~ "right corner at (right,bottom)"
#~ msgstr ""

#~ msgid "the rectangle is filled and has outline"
#~ msgstr ""

#~ msgid "Prints the given texts beginning at the given position (x,y)"
#~ msgstr ""

#~ msgid ""
#~ "draw an ellipse outline centered at "
#~ "(x,y) , radius on x-axis is "
#~ "radius_x, radius on y-axis is radius_y"
#~ msgstr ""

#~ msgid "the ellipse is not filled"
#~ msgstr ""

#~ msgid "the chord doesn't have outline."
#~ msgstr ""

#~ msgid ""
#~ "fill an ellipse centered at (x,y) "
#~ ", radius on x-axis is radius_x, "
#~ "radius on y-axis is radius_y"
#~ msgstr ""

#~ msgid "the ellipse dosen't has outline"
#~ msgstr ""

#~ msgid ""
#~ "fill an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)          which radius"
#~ " on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the pie dosen't have outline."
#~ msgstr ""

#~ msgid "the rectangle doesn't have outline"
#~ msgstr ""

#~ msgid ""
#~ "flood fill the image starting from(x,y)"
#~ " and ending at borders with "
#~ "border_color"
#~ msgstr ""

#~ msgid "get the background color of the image"
#~ msgstr ""

#~ msgid "get the foreground (drawing) color of the specified image"
#~ msgstr ""

#~ msgid "get the fill color of the specified image"
#~ msgstr ""

#~ msgid "it will be used when drawing and fill shapes."
#~ msgstr ""

#~ msgid "get fill style of the specified image"
#~ msgstr ""

#~ msgid "get the internal QImage"
#~ msgstr ""

#~ msgid ""
#~ "**note** EasyGraphics don't require and "
#~ "release qpainter each time. Because "
#~ "there can only be one QPainter"
#~ "         for each QImage at time, so"
#~ " if you want to draw on this"
#~ " image customly, use get_painter() to "
#~ "get         the internal QPainter instance."
#~ " :return: the QImage instance used "
#~ "internally"
#~ msgstr ""

#~ msgid "get line style"
#~ msgstr ""

#~ msgid "get line width (thickness)"
#~ msgstr ""

#~ msgid "It will be used when drawing lines or shape outlines"
#~ msgstr ""

#~ msgid "get a pixel's color on the specified image"
#~ msgstr ""

#~ msgid "get write mode of the specified image"
#~ msgstr ""

#~ msgid ""
#~ "When drawing ,the write mode will "
#~ "decide how the result pixel color "
#~ "will be computed"
#~ msgstr ""

#~ msgid "(using source color and color of the destination)"
#~ msgstr ""

#~ msgid "write mode"
#~ msgstr ""

#~ msgid "get the x coordinate value of the current drawing position (x,y)"
#~ msgstr ""

#~ msgid "get the y coordinate value of the current drawing position (x,y)"
#~ msgstr ""

#~ msgid ""
#~ "draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),"
#~ "          then set the drawing position "
#~ "is set to (x+d,y+dy)"
#~ msgstr ""

#~ msgid ""
#~ "draw a line from the current "
#~ "drawing position to (x,y), then set "
#~ "the drawing position is set to "
#~ "(x,y)"
#~ msgstr ""

#~ msgid "move the drawing position by (dx,dy)"
#~ msgstr ""

#~ msgid "if the old position is (x,y), then the new position will be (x+dx,y+dy)"
#~ msgstr ""

#~ msgid "the drawing position is used by line_to(), line_rel()"
#~ msgstr ""

#~ msgid "set the drawing position to (x,y)"
#~ msgstr ""

#~ msgid "the drawing position is used by line_to(), line_rel() and move_rel()"
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical pie outline from "
#~ "start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)          "
#~ "which radius on x-axis is radius_x "
#~ "and radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the pie is not filled."
#~ msgstr ""

#~ msgid "draw polygon outline"
#~ msgstr ""

#~ msgid "set a pixel's color on the specified image"
#~ msgstr ""

#~ msgid ""
#~ "Draws a rectangle outline with upper "
#~ "left corner at (left, top) and "
#~ "lower right corner at (right,bottom)"
#~ msgstr ""

#~ msgid "the rectangle is not filled"
#~ msgstr ""

#~ msgid "reset all transforms (translate/rotate/scale)"
#~ msgstr ""

#~ msgid "disable the view port setting"
#~ msgstr ""

#~ msgid "reset/remove the logical window"
#~ msgstr ""

#~ msgid "see set_window()"
#~ msgstr ""

#~ msgid "Rotates the coordinate system the given angle (in degree)clockwise ."
#~ msgstr ""

#~ msgid "set the background  color of the image"
#~ msgstr ""

#~ msgid ""
#~ "the possible color could be consts "
#~ "defined in Color class, or the "
#~ "color created by rgb() function, or "
#~ "PyQt5's QColor , QGradient object or "
#~ "QtCore.Qt.GlobalColor consts (see the pyqt "
#~ "reference)."
#~ msgstr ""

#~ msgid "set the clip rect"
#~ msgstr ""

#~ msgid "set the foreground (drawing) color of the specified image"
#~ msgstr ""

#~ msgid "set the fill (drawing) color of the specified image"
#~ msgstr ""

#~ msgid "set fill style of the specified image"
#~ msgstr ""

#~ msgid ""
#~ "it will be used when drawing and"
#~ " fill shapes. Valid values are the"
#~ " consts defined in FillStyle"
#~ msgstr ""

#~ msgid "set line style"
#~ msgstr ""

#~ msgid "set line width (thinkness) of the specified image"
#~ msgstr ""

#~ msgid "set the view port of the the specified image"
#~ msgstr ""

#~ msgid "set the logical drawing window"
#~ msgstr ""

#~ msgid "set write mode of the specified image"
#~ msgstr ""

#~ msgid ""
#~ "When drawing ,the write mode will "
#~ "decide how the result pixel color "
#~ "will be computed (using source color "
#~ "and color of the destination)"
#~ msgstr ""

#~ msgid "source color is the color of the pen/brush"
#~ msgstr ""

#~ msgid "destination color is the color of the pixel will be painted on"
#~ msgstr ""

#~ msgid "the result color will be computed by bitwise operations"
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),"
#~ "          then set the drawing position "
#~ "is set to (x+d,y+dy)."
#~ msgstr ""

#~ msgid ""
#~ "some drawing functions will use the "
#~ "current pos to draw.(see "
#~ "line_to(),line_rel(),move_to(),move_rel())"
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),     "
#~ "then set the drawing position is "
#~ "set to (x+d,y+dy)."
#~ msgstr ""

#~ msgid ""
#~ "Simple _dialog to ask a user to"
#~ " select a floating point number "
#~ "within a certain range and a "
#~ "maximum precision."
#~ msgstr ""

#~ msgid ""
#~ "Simple _dialog to ask a user to"
#~ " select an integer within a certain"
#~ " range."
#~ msgstr ""

#~ msgid ""
#~ "Using a color dialog, returns a "
#~ "color in hexadecimal notation i.e. a "
#~ "string '#RRGGBB' or \"None\" if color"
#~ " _dialog is dismissed."
#~ msgstr ""

#~ msgid ""
#~ "Using a color dialog, returns a "
#~ "color in rgb notation i.e. a tuple"
#~ " (r, g, b)  or \"None\" if "
#~ "color _dialog is dismissed."
#~ msgstr ""

#~ msgid ""
#~ "By default, this _dialog initially "
#~ "displays the content of the current "
#~ "working directory."
#~ msgstr ""

#~ msgid ""
#~ "The user is warned if the file "
#~ "already exists and can choose to "
#~ "cancel.  However, this _dialog actually "
#~ "does NOT save any file: it only"
#~ " return a string containing the full"
#~ " path of the chosen file."
#~ msgstr ""

#~ msgid "Used by autodoc_mock_imports."
#~ msgstr ""

#~ msgid ""
#~ ">>>from easygraphics import * "
#~ ">>>init_graph(800,600) >>>pause() >>>close_graph()"
#~ msgstr ""

#~ msgid "Draw polygon"
#~ msgstr ""

#~ msgid "Fill polygon"
#~ msgstr ""

#~ msgid "Draw poly lines."
#~ msgstr ""

#~ msgid "fill polygon"
#~ msgstr ""

#~ msgid "Clean up the images :return:"
#~ msgstr ""

#~ msgid ""
#~ "Copy part of the source image "
#~ "(image) to the destination image (self)"
#~ " at (x,y)."
#~ msgstr ""

#~ msgid "Reflect the coordinates against the line passing (0,0) and (x,y)"
#~ msgstr ""

#~ msgid "Reflect the coordinates against the line passing (0,0) and (x,y)."
#~ msgstr ""

#~ msgid "x coordinate value"
#~ msgstr ""

#~ msgid "y coordinate value"
#~ msgstr ""

#~ msgid "Rotates the coordinate system the given angle (in degree) clockwise."
#~ msgstr ""

#~ msgid "Shear (skew) the coordinates around the origin by sh,sv"
#~ msgstr ""

#~ msgid "easygraphics.image module"
#~ msgstr ""

#~ msgid "Bases: :class:`object`"
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical arc from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)          which radius"
#~ " on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid ""
#~ "**note**: Degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is         at "
#~ "12 o'click , degree 180 is at "
#~ "9 o'clock , degree 270 is at "
#~ "6 o'clock, etc."
#~ msgstr ""

#~ msgid "Draw a cubic bezier curve."
#~ msgstr ""

#~ msgid ""
#~ "\"control_points\" is a list of 4 "
#~ "control points. Each point has 2 "
#~ "coordinate values in the list , so"
#~ " there should be 8 values int "
#~ "the list."
#~ msgstr ""

#~ msgid ""
#~ "That is , if your 4 control "
#~ "points  are (x0,y0),(x1,y1),(x2,y2),(x3,y3), "
#~ "\"control_points\" should be          "
#~ "[x0,y0,x1,y1,x2,y2,x3,y3] ."
#~ msgstr ""

#~ msgid "the control points list"
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical chord outline from"
#~ " start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)           "
#~ "which radius on x-axis is radius_x "
#~ "and radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "The chord is not filled."
#~ msgstr ""

#~ msgid ""
#~ "**note**: degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is          at"
#~ " 12 o'click , degree 180 is at"
#~ " 9 o'clock , degree 270 is at"
#~ " 6 o'clock, etc."
#~ msgstr ""

#~ msgid "start angle of the chord"
#~ msgstr ""

#~ msgid "end angle of the chord"
#~ msgstr ""

#~ msgid "Clear view port to show the background."
#~ msgstr ""

#~ msgid "Close and clean up the image."
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical chord outline from"
#~ " start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)          "
#~ "which radius on x-axis is radius_x "
#~ "and radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "The chord is filled and has outline."
#~ msgstr ""

#~ msgid ""
#~ "**note**: degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is         at "
#~ "12 o'click , degree 180 is at "
#~ "9 o'clock , degree 270 is at "
#~ "6 o'clock, etc."
#~ msgstr ""

#~ msgid "Copy part of the source image (image) to the destination image (self)."
#~ msgstr ""

#~ msgid ""
#~ "(x, y) specifies the top-left "
#~ "point in the destination image that "
#~ "is to be drawn onto."
#~ msgstr ""

#~ msgid ""
#~ "(sx, sy) specifies the top-left "
#~ "point of the part in the source"
#~ " image that is to          be drawn."
#~ " The default is (0, 0)."
#~ msgstr ""

#~ msgid ""
#~ "(sw, sh) specifies the size of the"
#~ " part of the source image that "
#~ "is to be drawn.          The default,"
#~ " (0, 0) (and negative) means all "
#~ "the way to the bottom-right of "
#~ "the image."
#~ msgstr ""

#~ msgid ""
#~ "If with_background is False, the source"
#~ " image's background will not be "
#~ "copied."
#~ msgstr ""

#~ msgid ""
#~ "The final result will depend on "
#~ "the composition mode and the source "
#~ "image's background. In the default mode"
#~ " (CompositionMode.SOURCE_OVER), the source will"
#~ " fully overwrite the destination)."
#~ msgstr ""

#~ msgid ""
#~ "If you want to get a transparent"
#~ " copy, you should use "
#~ "CompositionMode.SOURCE_OVER and with_background ="
#~ " False."
#~ msgstr ""

#~ msgid "x coordinate value of the upper left point on the destination image"
#~ msgstr ""

#~ msgid "y coordinate value of the upper left point on the destination image"
#~ msgstr ""

#~ msgid "the source image to be copied"
#~ msgstr ""

#~ msgid "x coordinate value of the top-left point of of the part to be drawn"
#~ msgstr ""

#~ msgid "y coordinate value of the top-left point of of the part to be drawn"
#~ msgstr ""

#~ msgid "witdh of the top-left point of of the part to be drawn"
#~ msgstr ""

#~ msgid "height of the top-left point of of the part to be drawn"
#~ msgstr ""

#~ msgid "if the background should be copied."
#~ msgstr ""

#~ msgid "if is None, use dst image's composition mode to copy."
#~ msgstr ""

#~ msgid "Draw lines."
#~ msgstr ""

#~ msgid ""
#~ "\"points\" is a 2D point pair "
#~ "list. It should contain even points, "
#~ "and each 2 points make a point "
#~ "pair. And each point have 2 "
#~ "coordinate values(x,y). So if you have"
#~ " n point pairs, the points list "
#~ "should have 4*n values."
#~ msgstr ""

#~ msgid ""
#~ "For examples , if points is "
#~ "[50,50,550,350, 50,150,550,450, 50,250,550,550], "
#~ "draw_lines() will draw 3 lines: (50,50)"
#~ " to (550,350), (50,150) to (550,450), "
#~ "(50,250) to (550,550)"
#~ msgstr ""

#~ msgid "Draw and fill a path."
#~ msgstr ""

#~ msgid "path to drawn and fill"
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)          which radius"
#~ " on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "Draw a point at (x,y) on the specified image."
#~ msgstr ""

#~ msgid "x coordinate value of the drawing point"
#~ msgstr ""

#~ msgid "y coordinate value of the drawing point"
#~ msgstr ""

#~ msgid "Draw a polygon."
#~ msgstr ""

#~ msgid ""
#~ "\"vertices\" is a 2D point list. "
#~ "Each 2 values in the list make "
#~ "a point. A polygon will be drawn"
#~ " to connect adjacent points defined "
#~ "by the the list."
#~ msgstr ""

#~ msgid ""
#~ "For examples , if \"vertices\" is "
#~ "[50,50,550,350, 50,150], poly_gon() will draw"
#~ " a triangle with vertices at (50,50)"
#~ " , (550,350) and (50,150)"
#~ msgstr ""

#~ msgid "The polygon is filled and has outline."
#~ msgstr ""

#~ msgid "The rectangle is filled and has outline."
#~ msgstr ""

#~ msgid "print the given texts in the specified rectangle area"
#~ msgstr ""

#~ msgid "Available flags are: （Defined in pyqt5's PyQt5.QtCore pacakge)"
#~ msgstr ""

#~ msgid "Qt.AlignLeft          Aligns with the left edge."
#~ msgstr ""

#~ msgid "Qt::AlignRight        Aligns with the right edge."
#~ msgstr ""

#~ msgid "Qt::AlignHCenter      Centers horizontally in the available space."
#~ msgstr ""

#~ msgid "Qt::AlignJustify      Justifies the text in the available space."
#~ msgstr ""

#~ msgid "Qt::AlignTop          Aligns with the top."
#~ msgstr ""

#~ msgid "Qt::AlignBottom       Aligns with the bottom."
#~ msgstr ""

#~ msgid "Qt::AlignVCenter      Centers vertically in the available space."
#~ msgstr ""

#~ msgid "Qt::AlignCenter       Centers in both dimensions."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextDontClip      If it's impossible to"
#~ " stay within the given bounds, it "
#~ "prints outside."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextSingleLine    Treats all whitespace as"
#~ " spaces and prints just one line."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextExpandTabs    Makes the U+0009 (ASCII"
#~ " tab) character move to the next "
#~ "tab stop."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextShowMnemonic  Displays the string "
#~ "\"&P\" as P For an ampersand, use"
#~ " \"&&\"."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextWordWrap      Breaks lines at "
#~ "appropriate points, e.g. at word "
#~ "boundaries."
#~ msgstr ""

#~ msgid "x coordinate of the output rectangle's upper left corner"
#~ msgstr ""

#~ msgid "y coordinate of the output rectangle's upper left corner"
#~ msgstr ""

#~ msgid "width of the output rectangle"
#~ msgstr ""

#~ msgid "height of the output rectangle"
#~ msgstr ""

#~ msgid "things to be printed (like print())"
#~ msgstr ""

#~ msgid "align flags"
#~ msgstr ""

#~ msgid "seperator used to join strings"
#~ msgstr ""

#~ msgid ""
#~ "Draws a rounded rectangle with upper "
#~ "left corner at (left, top) , lower"
#~ " right corner at (right,bottom). raidus "
#~ "on x-axis of the corner ellipse "
#~ "arc is round_x, radius on y-axis "
#~ "of the corner ellipse arc is "
#~ "round_y."
#~ msgstr ""

#~ msgid "raidus on x-axis of the corner ellipse arc"
#~ msgstr ""

#~ msgid "radius on y-axis of the corner ellipse arc"
#~ msgstr ""

#~ msgid "Prints the given texts beginning at the given position (x,y)."
#~ msgstr ""

#~ msgid "things to be printed"
#~ msgstr ""

#~ msgid "Draw the whole image to the specified device."
#~ msgstr ""

#~ msgid "the device to be drawn on"
#~ msgstr ""

#~ msgid ""
#~ "Draw an ellipse outline centered at "
#~ "(x,y) , radius on x-axis is "
#~ "radius_x, radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "The ellipse is not filled."
#~ msgstr ""

#~ msgid "The chord doesn't have outline."
#~ msgstr ""

#~ msgid ""
#~ "Fill an ellipse centered at (x,y) "
#~ ", radius on x-axis is radius_x, "
#~ "radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "The ellipse dosen't has outline."
#~ msgstr ""

#~ msgid "Fill the region enclosed by the path"
#~ msgstr ""

#~ msgid "the path enclosing the region"
#~ msgstr ""

#~ msgid ""
#~ "Fill an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)          which radius"
#~ " on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "The pie doesn't have outline."
#~ msgstr ""

#~ msgid ""
#~ "Fill a rounded rectangle with upper "
#~ "left corner at (left, top) , lower"
#~ " right corner at (right,bottom). raidus "
#~ "on x-axis of the corner ellipse "
#~ "arc is round_x, radius on y-axis "
#~ "of the corner ellipse arc is "
#~ "round_y."
#~ msgstr ""

#~ msgid "radius on x-axis of the corner ellipse arc"
#~ msgstr ""

#~ msgid "Reflect the coordinates against the line passing (x1,y1) and (x,y)."
#~ msgstr ""

#~ msgid ""
#~ "**Note that all things will get "
#~ "reflected, including text!** If you just"
#~ " want to draw on a normal "
#~ "coordinate system with the y-axis grows"
#~ " bottom up, use flip_y()."
#~ msgstr ""

#~ msgid "x coordinate value of the first point"
#~ msgstr ""

#~ msgid "y coordinate value of the first point"
#~ msgstr ""

#~ msgid "the x coordinate of  the second point"
#~ msgstr ""

#~ msgid "the y coordinate of the second point"
#~ msgstr ""

#~ msgid "It will be used when the image is cleared. (see clear_device())"
#~ msgstr ""

#~ msgid "background color"
#~ msgstr ""

#~ msgid "Get brush of the image"
#~ msgstr ""

#~ msgid "the brush"
#~ msgstr ""

#~ msgid "It will be used when drawing lines or shape outlines."
#~ msgstr ""

#~ msgid "foreground color"
#~ msgstr ""

#~ msgid "Get composition mode of the specified image."
#~ msgstr ""

#~ msgid ""
#~ "When drawing ,the composition mode will"
#~ " decide how the result pixel color"
#~ " will be computed"
#~ msgstr ""

#~ msgid "(using source color and color of the destination)."
#~ msgstr ""

#~ msgid "composition mode"
#~ msgstr ""

#~ msgid "Get the fill color of the specified image."
#~ msgstr ""

#~ msgid "It will be used when drawing and fill shapes."
#~ msgstr ""

#~ msgid "fill color"
#~ msgstr ""

#~ msgid "Get fill style of the specified image."
#~ msgstr ""

#~ msgid "fill style"
#~ msgstr ""

#~ msgid "get font of the specified image"
#~ msgstr ""

#~ msgid "the font"
#~ msgstr ""

#~ msgid "get font size of the specified image :return: font size"
#~ msgstr ""

#~ msgid "Get the height  of the image."
#~ msgstr ""

#~ msgid "image height"
#~ msgstr ""

#~ msgid "Get the internal QImage."
#~ msgstr ""

#~ msgid ""
#~ "**note** EasyGraphics don't require and "
#~ "release qpainter each time. Because "
#~ "there can only be one QPainter"
#~ "         for each QImage at time, so"
#~ " if you want to draw on this"
#~ " image customly, use get_painter() to "
#~ "get         the internal QPainter instance."
#~ msgstr ""

#~ msgid "the QImage instance used internally"
#~ msgstr ""

#~ msgid "Get line style."
#~ msgstr ""

#~ msgid "The line style will be used when drawing lines and shape outlines."
#~ msgstr ""

#~ msgid "line style"
#~ msgstr ""

#~ msgid "Get line width (thickness)."
#~ msgstr ""

#~ msgid "line width"
#~ msgstr ""

#~ msgid "Get background mask bitmap"
#~ msgstr ""

#~ msgid "background mask"
#~ msgstr ""

#~ msgid ""
#~ "get the QPainter instance for drawing"
#~ " the image :return: the painter used"
#~ " internally"
#~ msgstr ""

#~ msgid "Get the pen of the image"
#~ msgstr ""

#~ msgid "pen"
#~ msgstr ""

#~ msgid "Get the width of the image."
#~ msgstr ""

#~ msgid "image width"
#~ msgstr ""

#~ msgid ""
#~ "Some drawing functions will use the "
#~ "current pos to draw.(see "
#~ "line_to(),line_rel(),move_to(),move_rel())"
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),"
#~ "          then set the drawing position "
#~ "is set to (x+dx,y+dy)."
#~ msgstr ""

#~ msgid "Draw a path."
#~ msgstr ""

#~ msgid "path to be drawn"
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical pie outline from "
#~ "start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)          "
#~ "which radius on x-axis is radius_x "
#~ "and radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "The pie is not filled."
#~ msgstr ""

#~ msgid "Draw polygon outline."
#~ msgstr ""

#~ msgid "The polygon is not filled."
#~ msgstr ""

#~ msgid "Reset all transforms (translate/rotate/scale)."
#~ msgstr ""

#~ msgid "Disable the view port setting."
#~ msgstr ""

#~ msgid "Reset/remove the logical window.(see set_window())"
#~ msgstr ""

#~ msgid "Restore previously saved drawing settings."
#~ msgstr ""

#~ msgid "See save_settings()."
#~ msgstr ""

#~ msgid ""
#~ "Note: background_color and current position"
#~ " won't  be saved and restored."
#~ msgstr ""

#~ msgid ""
#~ "Rotates the coordinate system around the"
#~ " point (x,y) with the given angle "
#~ "(in degree) clockwise."
#~ msgstr ""

#~ msgid "the rotate angle (in degree)"
#~ msgstr ""

#~ msgid "the x coordinate of the rotation center"
#~ msgstr ""

#~ msgid "the y coordinate of the rotation center"
#~ msgstr ""

#~ msgid ""
#~ "Draws a rounded rectangle outline with"
#~ " upper left corner at (left, top) "
#~ ", lower right corner at (right,bottom)."
#~ " raidus on x-axis of the corner "
#~ "ellipse arc is round_x, radius on "
#~ "y-axis of the corner ellipse arc "
#~ "is round_y."
#~ msgstr ""

#~ msgid "Save image to file."
#~ msgstr ""

#~ msgid "Set with_background to False to get a transparent background image."
#~ msgstr ""

#~ msgid ""
#~ "Note that JPEG format doesn't support"
#~ " transparent. Use PNG format if you"
#~ " want a transparent background."
#~ msgstr ""

#~ msgid "path of the file"
#~ msgstr ""

#~ msgid "True to save the background together. False not"
#~ msgstr ""

#~ msgid "Save current drawing settings."
#~ msgstr ""

#~ msgid "See restore_settings()."
#~ msgstr ""

#~ msgid "Scales the coordinate system by (sx, sy)."
#~ msgstr ""

#~ msgid "scale factor on x axis."
#~ msgstr ""

#~ msgid "scale factor on y axis."
#~ msgstr ""

#~ msgid ""
#~ "The possible color could be consts "
#~ "defined in Color class, or the "
#~ "color created by rgb() function, or "
#~ "PyQt5's QColor , QGradient object or "
#~ "QtCore.Qt.GlobalColor consts (see the pyqt "
#~ "reference)."
#~ msgstr ""

#~ msgid "Set brush"
#~ msgstr ""

#~ msgid "Set the clip rect."
#~ msgstr ""

#~ msgid "Drawings outside the clip rect will be clipped."
#~ msgstr ""

#~ msgid "left of the clip rectangle"
#~ msgstr ""

#~ msgid "top of the clip rectangle"
#~ msgstr ""

#~ msgid "right of the clip rectangle"
#~ msgstr ""

#~ msgid "bottom of the clip rectangle"
#~ msgstr ""

#~ msgid "Set clipping."
#~ msgstr ""

#~ msgid "Use set_clip_rect() to set the clip rectangle."
#~ msgstr ""

#~ msgid "True will turn on clipping, False will turn off clipping"
#~ msgstr ""

#~ msgid ""
#~ "Composition modes are used to specify"
#~ " how the pixels in the source "
#~ "(image/pen/brush), are merged with the "
#~ "pixel in the destination image."
#~ msgstr ""

#~ msgid "Set the fill (drawing) color of the specified image."
#~ msgstr ""

#~ msgid "Set fill style of the specified image."
#~ msgstr ""

#~ msgid ""
#~ "It will be used when drawing and"
#~ " fill shapes. Valid values are the"
#~ " consts defined in FillStyle"
#~ msgstr ""

#~ msgid "Reflect with x-aixs as the axis (upside down). Texts will not flip."
#~ msgstr ""

#~ msgid ""
#~ "**Don't translate the origin to other"
#~ " points**(but you can translate and "
#~ "then translate back) before drawing any"
#~ " text. Or the text position's "
#~ "calculation will get wrong! So if "
#~ "you want to set the origin to "
#~ "the image/image's center, call set_flip_y()"
#~ " after the set_origin() or translate()!"
#~ msgstr ""

#~ msgid ""
#~ "**Note**: Use this functions instead of"
#~ " the reflect()/flip()/mirror(),if you only "
#~ "want to draw on an ordinary "
#~ "coordinate system with y-axis grows "
#~ "bottom-up."
#~ msgstr ""

#~ msgid "True to turn on the flip, False to turn off."
#~ msgstr ""

#~ msgid "set font of the specified image"
#~ msgstr ""

#~ msgid "set font size of the specified image :param size: font size"
#~ msgstr ""

#~ msgid "Set line style."
#~ msgstr ""

#~ msgid ""
#~ "The line style will be used when"
#~ " drawing lines and shape outlines. "
#~ "Possible value is one of the "
#~ "consts defined in LineStyle."
#~ msgstr ""

#~ msgid "Set line width (thinkness) of the specified image."
#~ msgstr ""

#~ msgid "Set pen"
#~ msgstr ""

#~ msgid "the pen to use."
#~ msgstr ""

#~ msgid ""
#~ "The drawing outside the view port "
#~ "is not clipped. If you want to "
#~ "clip the drawing ,use set_clip_rect()"
#~ msgstr ""

#~ msgid ""
#~ "**if view port and \"logical window\""
#~ " don't have the same width and "
#~ "height, drawing will get zoomed.** So"
#~ " set_window() is often used with the"
#~ " set_view_port"
#~ msgstr ""

#~ msgid "Set the logical drawing window."
#~ msgstr ""

#~ msgid ""
#~ "All your drawing is first drawing "
#~ "on the logical window, then mapping "
#~ "to view port (see set_view_port()).        "
#~ "The logical window's 4 corner points "
#~ "to streched to match the view "
#~ "port."
#~ msgstr ""

#~ msgid ""
#~ "If your view port is 200x200，and "
#~ "you use set_window(-50,-50,100,100) to get "
#~ "a 100x100 logical window with         "
#~ "the origin at (-50,50) , then the"
#~ " logical window's origin (0,0) is "
#~ "mapping to view port's (-50,-50), and"
#~ "         right-bottom corner (100,100) is"
#~ " mapping to view port's right bottom"
#~ " corner (200,200). All logical points "
#~ "is         mapping accordingly."
#~ msgstr ""

#~ msgid ""
#~ "If you just want to transform the"
#~ " drawing, use "
#~ "set_origin()/translate()/rotate()/scale()."
#~ msgstr ""

#~ msgid ""
#~ "The drawing outside the logical window"
#~ " is not clipped. If you want to"
#~ " clip it, use set_clip_rect()."
#~ msgstr ""

#~ msgid "x pos of the logical window's origin"
#~ msgstr ""

#~ msgid "y pos of the logical window's origin"
#~ msgstr ""

#~ msgid "width of the logical window"
#~ msgstr ""

#~ msgid "height of the logical window"
#~ msgstr ""

#~ msgid "Shear (skew) the coordinates around the point (x,y) by sh,sv."
#~ msgstr ""

#~ msgid "shear ratio on the x-axis"
#~ msgstr ""

#~ msgid "shear ratio on the y-axis"
#~ msgstr ""

#~ msgid "the x coordinate of the skew center"
#~ msgstr ""

#~ msgid "the y coordinate of the skew center"
#~ msgstr ""

#~ msgid "return height of the text (font height)"
#~ msgstr ""

#~ msgid "return width of the text"
#~ msgstr ""

#~ msgid ""
#~ "Translates the coordinate system by the"
#~ " given offset; i.e. the given offset"
#~ " is added to points."
#~ msgstr ""

#~ msgid "offset on the x coordinate"
#~ msgstr ""

#~ msgid "offset on the y coordinate"
#~ msgstr ""

#~ msgid "it will be used when the image is cleared. (see clear_device())"
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical arc from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)      which radius "
#~ "on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid ""
#~ "**note**: Degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is     at "
#~ "12 o'click , degree 180 is at "
#~ "9 o'clock , degree 270 is at "
#~ "6 o'clock, etc."
#~ msgstr ""

#~ msgid ""
#~ "For examples , if \"end_points\" is "
#~ "[50,50,550,350, 50,150,550,450, 50,250,550,550], "
#~ "draw_poly_line() will draw 5 lines: "
#~ "(50,50) to (550,350), (550,350) to "
#~ "(50,150), (50,150) to (550,450), (550,540) "
#~ "to (50,250) and(50,250) to (550,550)"
#~ msgstr ""

#~ msgid ""
#~ "For examples , if points is "
#~ "[50,50,550,350, 50,150], poly_gon() will draw"
#~ " a triangle with vertices at (50,50)"
#~ " , (550,350) and (50,150)"
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),     "
#~ "then set the drawing position is "
#~ "set to (x+dx,y+dy)."
#~ msgstr ""

#~ msgid ""
#~ "Draw an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)      which radius "
#~ "on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid ""
#~ "**note**: degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is     at "
#~ "12 o'click , degree 180 is at "
#~ "9 o'clock , degree 270 is at "
#~ "6 o'clock, etc."
#~ msgstr ""

#~ msgid ""
#~ "**note**: Degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is at 12"
#~ " o'click , degree 180 is at 9"
#~ " o'clock , degree 270 is at 6"
#~ " o'clock, etc."
#~ msgstr ""

#~ msgid ""
#~ "**note**: degree 0 is at 3 o'clock"
#~ " position, and is increasing clockwisely."
#~ " That is, degree 90 is at 12"
#~ " o'click , degree 180 is at 9"
#~ " o'clock , degree 270 is at 6"
#~ " o'clock, etc."
#~ msgstr ""

#~ msgid ""
#~ "\"points\" is a 2D point list. "
#~ "Each 2 values in the list make "
#~ "a point. A polygon will be drawn"
#~ " to connect adjacent points defined "
#~ "by the the list."
#~ msgstr ""

#~ msgid ""
#~ "For examples , if points is "
#~ "[50,50,550,350, 50,150], fill_polygon() will "
#~ "fill a triangle with vertices at "
#~ "(50,50) , (550,350) and (50,150)."
#~ msgstr ""

#~ msgid "set font size of the dialogs :param size: font size"
#~ msgstr ""

#~ msgid ""
#~ "Note: Degree 0,90,180 and 270 are "
#~ "always the positive direction of X-axis,"
#~ " the positive direction of Y-axis,  "
#~ "the negative direction of X-axis, the"
#~ " negative direction of Y-axis, "
#~ "respectively."
#~ msgstr ""

#~ msgid "how much angle is drawed"
#~ msgstr ""

#~ msgid ""
#~ "True to turn off animation (the "
#~ "move finishes immediately). Off to turn"
#~ " on."
#~ msgstr ""

#~ msgid "Test if it is recording the turtle's drawing path (for fill). :return:"
#~ msgstr ""

#~ msgid "Create a snap shot of the create drawing."
#~ msgstr ""

#~ msgid ""
#~ "Move the turtle in a arc path. "
#~ "The center is radius units left of"
#~ " the turtle."
#~ msgstr ""

#~ msgid ""
#~ "\"Radius_top\" is the radius of the "
#~ "ellipse, on the direction parrellel to"
#~ " the turtele's orientation, it must "
#~ "be postive; \"Radius_top\" is the radius"
#~ " of the ellipse on the direction "
#~ "perpendicular to the turtle's orientation, "
#~ "it can be postive or negtive."
#~ msgstr ""

#~ msgid "radius of the ellipse"
#~ msgstr ""

#~ msgid "eccentricity of the ellipse"
#~ msgstr ""

#~ msgid ""
#~ "This package provides two qt widget "
#~ "classed, for embeding easygraphics image "
#~ "or turtle graphics in qt applications:"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_table <easygraphics.dialog.show_table>`\\ "
#~ "\\(datas\\, fields\\, field\\_names\\, ...\\)"
#~ msgstr ""

