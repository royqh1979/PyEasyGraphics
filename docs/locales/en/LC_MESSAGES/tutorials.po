# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Roy Qu
# This file is distributed under the same license as the EasyGraphics
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyGraphics \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-27 13:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: E:/Workspaces/PyEasyGraphics/docs/tutorials.rst:2
msgid "Tutorials"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials.rst:5
msgid "Graphics"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials.rst:38
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:2
msgid "Turtle Graphics"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials.rst:53
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:2
msgid "Dialogs"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials.rst:60
msgid "Processing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials.rst:69
msgid "Miscs"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:2
msgid "The First window"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:4
msgid "In this program, we will create and show a graphics window:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:6
msgid "Define the easygraphics main function"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:8
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:10
msgid "In the main function, we:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:10
msgid "Init the graphics window"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:11
msgid "wait for mouse click or keyboard hitting"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:12
msgid "close the graphics system (and graphics window)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:14
msgid "Run the main function"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:16
msgid "**note 1** : You must use easy_run() to run the main function."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:18
msgid ""
"**note 2** : init_graph() must be called before any easygraphics drawing "
"functions."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:20
msgid ""
"**note 3** : Don't forget to close_graph() to clean up the system after "
"all drawing work is done."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/001_first_window.rst:22
msgid ""
"**note 4** : You can use the graphics window\\'s close button to close "
"the graphics system. But this may cause exception. (When there are "
"unfinished drawing operations.ï¼‰"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/002_first_drawing.rst:2
msgid "The First Drawing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/002_first_drawing.rst:4
msgid "Let\\'s draw a line from (0,0) to (640,480)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/002_first_drawing.rst:6
msgid "In computer graphics, we normally use a screen coordinate system as below:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/002_first_drawing.rst:10
msgid ""
"In this system, the origin (0,0) is at screen\\'s upper left corner, and "
"y-axis is growing top-down."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/002_first_drawing.rst:12
msgid "So the result is a line from upper left corner to lower right corner."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:2
msgid "Color System"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:5
msgid "Color System Summary"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:6
msgid ""
"Easy Graphics uses `Qt's Color System "
"<http://doc.qt.io/qt-5/qcolor.html#details>`_"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:8
msgid ""
"A color is normally specified in terms of RGB (red, green, and blue) "
"components ( using color_rgb()), but it is also possible to specify it in"
" terms of HSV (hue, saturation, and value) (using color_hsv())and CMYK "
"(cyan, magenta, yellow and black) components (user color_cymk())."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:15
msgid "|qcolor-rgb|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:16
msgid "|qcolor-hsv|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:17
msgid "|qcolor-cmyk|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:18
msgid "RGB"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:19
msgid "HSV"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:20
msgid "CMYK"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:26
msgid ""
"Instead of RGB, HSV or CMYK values, A color can be set by passing an RGB "
"string (such as \"#112233\"), or an ARGB string (such as \"#ff112233\") "
"or a color name (such as \"blue\"). The color names are taken from the "
"`SVG 1.0 color names "
"<https://www.w3.org/TR/SVG10/types.html#ColorKeywords>`_."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:30
msgid ""
"The color components can be retrieved individually, e.g with red(), hue()"
" and cyan() member functions. The values of the color components can also"
" be retrieved in one go using the getRgb(), getHsv() and getCmyk() member"
" functions."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:35
msgid "Predefined Colors"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:37
msgid "There are 24 predefined colors described by the Color constants."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:43
msgid "Summary"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:44
msgid "So to set the pen's color to red , we can:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:46
msgid "Use predefined Color const"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:52
msgid "Use RGB values and color_rgb() function"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:58
msgid "Use a color name"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:64
msgid "Use a css web color string"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:70
msgid "Use a rgb integer"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:77
msgid "Transparency (Alpha Value)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:78
msgid ""
"Like most modern graphic systems, Easygraphics ( and its underlying Qt "
"System) use a alpha component to represent the transparency of a pixel on"
" the image. When the alpha value is 255, the pixel is fully opaque; when "
"the alpha value is 0, the pixel is fully tranparent."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:82
msgid ""
"All the color functions (color_rgb()/color_hsv()/color_cmyk()) has an "
"optional parameter \"alpha\" to make a color with transparency. The "
"default value of this parameter is 255, which means the color is fully "
"opaque."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:85
msgid ""
"You can use to_alpha() function to make a tranparency color by string or "
"rgb integers."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/003_colors.rst:87
msgid ""
"The following code set the foreground color to a red with 150 as alpha "
"value ( about half transparent)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:2
msgid "Lines and Points"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:5
msgid "Drawing Points"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:6
msgid ""
"You can use draw_point() to draw a point. The size of point is determined"
" by line width (pen size); If you want to draw a pixel, use put_pixel() "
"instead."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:10
msgid "Drawing Lines"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:11
msgid "You can use line() to draw a line."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:14
msgid "Draw with the Current Position"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:16
msgid ""
"In easygraphics, each image (including the graphics window) stores \"a "
"current position\". Use this position, we can draw lines relatively."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:19
msgid "The related functions are:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`get_drawing_x <easygraphics.get_drawing_x>`\\ \\(\\[image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid "Get the x coordinate value of the current drawing position (x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`get_drawing_y <easygraphics.get_drawing_y>`\\ \\(\\[image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid "Get the y coordinate value of the current drawing position (x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`get_drawing_pos <easygraphics.get_drawing_pos>`\\ \\(\\[image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid "Get the current drawing position (x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`move_to <easygraphics.move_to>`\\ \\(x\\, y\\[\\, image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid "Set the drawing position to (x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`move_rel <easygraphics.move_rel>`\\ \\(dx\\, dy\\[\\, image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid "Move the drawing position by (dx,dy)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`line_to <easygraphics.line_to>`\\ \\(x\\, y\\[\\, image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ""
"Draw a line from the current drawing position to (x,y), then set the "
"drawing position is set to (x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ":obj:`line_rel <easygraphics.line_rel>`\\ \\(dx\\, dy\\[\\, image\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:32:<autosummary>:1
msgid ""
"Draw a line from the current drawing position (x,y) to (x+dx,y+dy), then "
"set the drawing position is set to (x+dx,y+dy)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:33
msgid "The following program draws a dash line by using the current position."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:52
msgid "Approximate a function curve"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:54
msgid "Sometimes we need to draw line segments successively."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:56
msgid ""
"For example, to plot the function f(x)=sin(x)\\'s curve on [-3,3] ,we can"
" use many successive line segements to approximate the curve:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:59
msgid ""
"divide [-3,3] into n equal intervals, to get n+1 values evenly "
"distributed on [-3,3]: x0,x1,x2,x3,...,xn, and x0=-3, xn=3"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:61
msgid "cacluate function values f(x0),f(x1),f(x2),f(x3), ..., f(xn)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:62
msgid ""
"draw n line segements:  (x0,f(x0)) to (x1,f(x1)), (x1,f(x1)) to "
"(x2,f(x2)) ..., (xn-1,f(xn-1)) to (xn,f(xn))"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:63
msgid "the resulting line segments is the curve approximation we need."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:65
msgid ""
"Apparently, the more greater n is, the more precisely the appoximation "
"is. To minimize the usage of memory, we should calculate and draw the "
"line segments one by one."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/004_line.rst:68
msgid "The following program plot a sin(x) curve on [-3,3]."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:2
msgid "Drawing a Shape using Vertices"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:4
msgid "We can use vertices to draw complex shapes."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:6
msgid "The following code draws a star."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:8
msgid "**Note**:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:10
msgid "We use a for loop to define 5 vertices of the star."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:12
msgid ""
"We set end_shape()'s parameter to True to draw a closed polyline. If you "
"want a polyline that not closed, use end_shape()'s default False "
"parameter."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:14
msgid ""
"If you don't want fill, you should not close the shape,  or you can set "
"the fill color to Color.TRANSPARENT"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:38
msgid "Let's see what happens if we don't close the shape:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:64
msgid "Spline Curve (Catmull-Rom Curve)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:66
msgid "We can use vertices to draw a spline curve (Catmull-Rom curve)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:102
msgid "See what happens if we close the shape."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:139
msgid "Bezier Curve"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_1_vertices.rst:140
msgid "The following code use vertices to draw a cubic bezier curve."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:2
msgid "Drawing Shapes"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:5
msgid "Three Types of Drawing Functions"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:7
msgid "In EasyGraphics, there are three types of functions to draw shapes:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:9
msgid ""
"Functions that only draw shape outlines. These functions are named like "
"\\'xxx()\\' (\\\"xxx\\\" is the shape\\'s name). \\ The example below "
"draw a circle with a blue outline."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:26
msgid ""
"Functions that both draw and fill a shape. These functions are named like"
" \\'draw_xxx()\\'(\\\"xxx\\\" is the shape\\'s name). The example below "
"draw a red circle with a blue outline."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:43
msgid ""
"Functions that only fill a shape. These functions are named like "
"\\'fill_xxx()\\'( \\\"xxx\\\" is the shape\\'s name). The example below "
"draw a red circle without outline."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:63
msgid "|circle|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:64
msgid "|draw_circle|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:65
msgid "|fill_circle|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:66
msgid "circle()"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:67
msgid "draw_circle()"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:68
msgid "fill_circle()"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:77
msgid "Angle"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:78
msgid "In easygraphics, all angles use degree as the unit."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:80
msgid ""
"When drawing arc,pie and chords, positive values for the angles mean "
"counter-clockwise while negative values mean the clockwise direction. "
"Zero degrees is at the 3 o'clock position."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:82
msgid "The following program draws a pie from 45 degree to 135 degree."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:101
msgid "Polygon"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:102
msgid ""
"Use polygon()/draw_polygon()/fill_polygon(), we can draw and fill "
"polygons."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:104
msgid "To draw a polygon, we should specify the vertices."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:106
msgid ""
"polygon()/draw_polygon()/fill_polygon() expect a list as the verticis\\' "
"postions. In the list, each vertex is represented as 2 values (x and y). "
"So n vertices is represented by a list with 2n values."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:110
msgid ""
"The following example draws a triangle with vertices at (50, 50), (350, "
"250), (50, 150):"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:129
msgid "Polylines"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:130
msgid "Using poly_line() or draw_poly_line(), we can draw polylines."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:134
msgid ""
"A `polyline <https://www.webopedia.com/TERM/P/polyline.html>`_ is a "
"continuous line composed of one or more line segments. So to draw a "
"polyline, we should specify the endpoints connecting each line segment."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:137
msgid ""
"poly_line() and draw_poly_line() expect a list as the endpoint\\'s "
"postions. In the list, each endpoint is represented as 2 values (x and "
"y). So n endpoints is represented by a list with 2n values."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:141
msgid ""
"The following example draws a polyline connecting (50,50), (350,75), "
"(50,150), (350,175), (50,250), (350,275)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:158
msgid "BÃ©zier curve"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:159
msgid ""
"`A BÃ©zier curve <https://en.wikipedia.org/wiki/B%C3%A9zier_curve>`_ is a "
"parametric curve that uses the Bernstein polynomials as a basis."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:161
msgid ""
"A BÃ©zier curve is defined by a set of control points P0 through Pn, where"
" n is called its order (n = 1 for linear, 2 for quadratic, 3 for cubic "
"etc.). The first and last control points are always the end points of the"
" curve; however, the intermediate control points (if any) generally do "
"not lie on the curve."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:165
msgid "Cubic BÃ©zier curves are the mostly used BÃ©zier curves."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:169
msgid ""
"Four points P0, P1, P2 and P3 in the plane or in higher-dimensional space"
" define a cubic BÃ©zier curve. The curve starts at P0 going toward P1 and "
"arrives at P3 coming from the direction of P2. Usually, it will not pass "
"through P1 or P2; these points are only there to provide directional "
"information. The distance between P1 and P2 determines \"how far\" and "
"\"how fast\" the curve moves towards P1 before turning towards P2."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:175
msgid "The explicit form of the curve is:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:179
msgid ""
"We can use bezier() or draw_bezier() to draw cubic BÃ©zier curves. They "
"expect a list as the control points\\' postions. In the list, each "
"control point is represented as 2 values (x and y). Because a cubic "
"BÃ©zier curve needs 4 control points, so there should be 8 values in the "
"list."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:183
msgid ""
"The following program draw a cubic bezier curve with control points at "
"(300,50),(200,50),(200,200) and (100,200)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:198
msgid ""
"We can use quadratic() or draw_quadratic() to draw quadratic BÃ©zier "
"curves. They expect a list as the control points\\' postions. In the "
"list, each control point is represented as 2 values (x and y). Because a "
"quadratic BÃ©zier curve needs 3 control points, so there should be 6 "
"values in the list."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:202
msgid ""
"The following program draw a quadratic bezier curve with control points "
"at (300,50),(200,50) and (100,200)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:218
msgid "Flood Fill"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:219
msgid ""
"Non-regular shapes can be filled by flood fill. The shape to be filled "
"must be enclosed by an outline. The follow program uses flood fill to "
"fill a petal."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:237
msgid "Below is the result:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:242
msgid "Fill Rule"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:243
msgid "Fill rule controls how non-convex shapes are filled."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:247
msgid "You can use set_fill_rule() to change the fill rule."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:249
msgid "The default fill rule is odd even fill."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:279
msgid "Advanced Drawing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/005_shapes.rst:281
msgid ""
"EasyGraphics supports drawing all the basic shape: point, line, circle, "
"ellipse, rectangle, polygon, rectangle with rounded corner, etc. If you "
"need more advanced drawing, you can use Image object's get_painter() "
"method to get the `QPainter "
"<http://pyqt.sourceforge.net/Docs/PyQt4/qpainter.html>`_ instance and "
"draw."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:2
msgid "Line Styles"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:4
msgid ""
"Using line styles, you can control how the lines and outlines are drawn. "
"The most useful line styles are:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:7
msgid "line width"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:8
msgid "line shape"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:11
msgid "Line Width"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:13
msgid "You can use set_line_width()/get_line_width() to get or set line width."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:15
msgid "The following program draws a rectangle whose borders width is 10."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:32
msgid "Predefined Line Shapes"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:33
msgid ""
"Using line shapes, you can draw dash line or dot line. Use "
"set_line_style()/get_line_style() to set line shape."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:39
msgid "|solid_line|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:40
msgid "|dash_line|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:41
msgid "|dot_line|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:42
msgid "LineStyle.SOLID_LINE"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:43
msgid "LineStyle.DASH_LINE"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:44
msgid "LineStyle.DOT_LINE"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:45
msgid "|dash_dot_line|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:46
msgid "|dash_dot_dot_line|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:47
msgid "|no_pen|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:48
msgid "LineStyle.DASH_DOT_LINE"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:49
msgid "LineStyle.DASH_DOT_DOT_LINE"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:50
msgid "LineStyle.NO_PEN"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:59
msgid "The following program draws a rectangle with dash outlines."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:76
msgid "Custom Line Shapes"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:77
msgid ""
"If predefined line shapes is not satisfying, you can set custome line "
"shape. To do this, you should:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:80
msgid ""
"use get_target() or create_image() to get the Image object you want to "
"draw."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:81
msgid ""
"use the Image object\\'s get_pen() to get the pen. It\\'s a PyQt\\'s "
"`QPen <http://pyqt.sourceforge.net/Docs/PyQt4/qpen.html>`_ object."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:83
msgid ""
"Use the pen\\'s `setDashPattern() "
"<http://pyqt.sourceforge.net/Docs/PyQt4/qpen.html#setDashPattern>`_ to "
"set custom line shape."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:103
msgid "More Line Styles"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/006_line_styles.rst:104
msgid ""
"After getting the pen object, you can set other pen attributes to get "
"more line styles. See `QPen's documentation "
"<http://pyqt.sourceforge.net/Docs/PyQt4/qpen.html>`_."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:2
msgid "Drawing Text"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:3
msgid "Use draw_text() and draw_rect_text() functions, we can draw text."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:5
msgid ""
"These functions works like print(), you can provide many objects to draw "
"in one function call:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:19
msgid "Running the program above will get the follow result:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:23
msgid ""
"If you want to use seperators instead of space, just provide the \"sep\" "
"parameter:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:37
msgid "The result of the above program is:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:42
msgid "Drawing Positions"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:43
msgid ""
"In draw_text(), the first 2 paramenter (x,y) specify the start drawing "
"position of the text. This start position is left-bottom corner of the "
"text's out border."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:46
msgid "So the following code will draw text out of the graphics window:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:61
msgid "Drawing Text in the Specified Rectangle"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:62
msgid "Using draw_rect_text(), we can draw a text in a bounded rectangle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:64
msgid ""
"Note that the first 2 parameters (left,top) is the bounding rectangle's "
"left-top corner, and the 3rd and 4th parameters (width, height) is the "
"bounding rectangle's width and height."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:67
msgid "You can use flags to control text alignment in the rectangle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:69
msgid ""
"If the bound rectangle is not big enough to enclose the whole text, the "
"text will be clipped."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:71
msgid ""
"If flag \"TextFlags.TEXT_WORD_WRAP\" is set, the text will auto wrap if "
"it is too long to hold in one line."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/007_texts.rst:87
msgid ""
"Following is the result of the above program. Note that we use "
"draw_rect() to draw a border around the bounding rect to better show "
"effect of the flags."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:2
msgid "View Port and the Logical Window"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:3
msgid ""
"Normally we just paint on the whole image or window. But sometimes it "
"will be more convenient to paint relatively in a portion of the image. We"
" can use view port to achieve this."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:6
msgid ""
"In some cases we want to zoom the painting, or set the origin to some "
"place other than the view port\\'s top-left cornert. We can use the "
"logical window to achieve this."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:10
msgid "View Port"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:11
msgid ""
"View port controls which portion of the image (the graphics window) we "
"are drawing at."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:13
msgid ""
"The following program draws 3 circles on the graphics window. Pay "
"attention to their positions."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:31
msgid ""
"The following program set view port to the rectangle from (100,50) to "
"(300,250), then draw 3 circles with the code as the above programming. "
"Compare the result with the above program. Note that we draw a border "
"around the view port to better see effect of the clipping."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:56
msgid ""
"In the above example, all drawings outside the view port is not painted "
"(is clipped). We can turn off this feature by set the \"clip\" parameter "
"to False:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:81
msgid "The Logical Window"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:82
msgid ""
"In easygraphics ( and the qt underlying) , there are 2 coordinates, **the"
" logical coordinates** and **the physical coordinates**."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:85
msgid ""
"**The physical coordinates** is the coordinate on the drawing device ( "
"the graphics window or an Image object). (0,0) is always at the "
"device\\'s top-left corner, and x-axis grows from left to right, y-axis "
"grows from top to bottom."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:89
msgid ""
"**The logical coordinates** is the coordinate we are using when "
"specifying drawing parameters. That is, when we call circle(50,50,100), "
"the circle's center (50,50) is a logical coordinate."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:92
msgid ""
"Easygraphics will translate the logical coordinates to the physical "
"coordinates when drawing. By default, the logical coordinates and the "
"physical coordinates coincide. The view port and window will affect how "
"the logical coordinates are translated."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:96
msgid ""
"`Qt's document <http://doc.qt.io/qt-5/coordsys.html#window-viewport-"
"conversion>`_ explains how the coordinates are translated."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:99
msgid ""
"The following example move the logical origin to the center, and zoom the"
" drawing 100 times on x and y axis:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:102
msgid ""
"the default view port is 600 width, 400 height. and the window is 6 "
"width, 4 height, so on x-axis we gets 600/6=100 times zoom, and on y-axis"
" we gets 400/4=100 times zoom."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:104
msgid ""
"the window is 6 width, 4 height, and we put the left-top corner at "
"(-3,-2), so we get (0,0) at the center."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/008_view_port.rst:123
msgid ""
"**Note:**  Obviously the logical window is difficult to understand and "
"use. We can use :doc:`transform <009_transforms>` to achieve the same "
"result."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:2
msgid "Transforms"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:3
msgid ""
"Easygraphics (and the underlying Qt system) support 5 basic coordinate "
"transform operations:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:5
msgid ""
"`Translation <https://en.wikipedia.org/wiki/Translation_(geometry)>`_: "
"moves every point of a figure or a space by the same distance in a given "
"direction."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:7
msgid ""
"`Rotation <https://en.wikipedia.org/wiki/Translation_(geometry)>`_: the "
"motion of a rigid body around a fixed point"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:8
msgid ""
"`Scaling <https://en.wikipedia.org/wiki/Scaling_(geometry)>`_ :enlarges "
"(increases) or shrinks (diminishes) objects by a separate scale factor "
"for each axis direction."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:10
msgid ""
"`Shear Mapping(Skew) <https://en.wikipedia.org/wiki/Shear_mapping>`_ : a "
"linear map that displaces each point in fixed direction, by an amount "
"proportional to its signed distance from a line that is parallel to that "
"direction."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:12
msgid ""
"`Relection (Flipping) "
"<https://en.wikipedia.org/wiki/Reflection_(mathematics)>`_: a "
"transformation in geometry in which an object is reflected in a line to "
"form a mirror image."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:15
msgid ""
"The following code draws a simple bus. We'll use it as the basis for  "
"this chapter\\'s examples."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:44
msgid "The following program draws a un-transformed bus:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:63
msgid "Translation"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:64
msgid ""
"Translation is the most commonly used transformation.  It moves each "
"point by offset_x on x-axis, and offset_y on y-axis. We use it to move "
"the origin\\'s position ( and the whole drawing)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:67
msgid ""
"The following program use translate() to move the origin to the center of"
" the graphics window, then draw the bus."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:86
msgid "**Note:** set_origin() is an alias of translate()"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:89
msgid "Rotation"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:90
msgid "Use rotate() to rotate the coordinate around the point (x,y) clockwise."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:92
msgid ""
"Note: the angle directions in rotate() and in shape functions (i.e. "
"draw_pie()) are opposite!"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:94
msgid ""
"If you need a counter-clockwise rotation, just give a negative rotation "
"degree."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:96
msgid ""
"The following program draws a bus rotated 45 degree counter-clockwise "
"around it\\'s center (105,65)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:117
msgid "Scaling"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:118
msgid "We can use scale() to scale the drawing in x and y axis separately."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:120
msgid "The following program draws a x-axis shrinked and y-axis enlarged bus."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:141
msgid "Shear Mapping (Skew)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:142
msgid ""
"We use shear() or its alias skew to shear a drawing around the center. "
"shear() needs 2 parameters \"sv\" and \"sh\". After shearing, each point "
"(x,y) is transformed to (x+sh*y, y+sv*x). We can see its effect by the "
"following examples."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:146
msgid "Shear on X-axis"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:147
msgid ""
"In the follow example, we shear the bus along the x-axis. Note that the "
"default y-axis is from top to bottom."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:169
msgid "Shear on Y-axis"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:170
msgid "In the follow example, we shear the bus along the y-axis."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:192
msgid "Shear on both axis"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:193
msgid ""
"In the follow example, we shear the bus along the x and y-axis at the "
"same time."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:215
msgid "Reflection (Mirror, Flipping)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:216
msgid ""
"We can use reflect() ( or its alias mirror() and flip() ) to do a "
"reflection. It reflect the drawing again the line passing its parameters "
"(x1,y1) and  (x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:220
msgid "Reflection against the y-axis"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:221
msgid ""
"The following program flip the bus horizontally ( reflection against the "
"bus\\'s vertical center line x=105 ) :"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:240
msgid "Reflection against the x-axis"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:241
msgid ""
"The following program flip the bus vertically ( reflection against the "
"bus\\'s horizontal center line y=65 ) :"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:262
msgid "Reflection against other lines"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:263
msgid ""
"The following program flip the bus against the line passing (0, 300) and "
"(500,0). To clearly see the result, we first draw a non-transformed bus, "
"a mirror line, then draw the flipped bus."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:292
msgid "Compound Transforms"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:293
msgid "Transforms can be compounded."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:295
msgid ""
"In the following example, we first translate the origin to the image "
"center, then rotate the bus around its center, then shear it around its "
"center, then scale it by a factor of 1.2 ."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:330
msgid "Drawing with Y-Axis Grows Bottom-Up"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:331
msgid ""
"You may have noticed that when you reflect the image, the texts drawing "
"on the image will also get reflected. When what you want is to draw on an"
" ordinary coordinate system whose Y-axis grows bottom-up, this will not "
"be what you what."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:335
msgid "Easygraphics provides a set_flip_y() function to used in this situation."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:337
msgid ""
"Also notice that if you turn on the set_flip_y(), all the angles "
"parameters used in the drawing functions should be mirrored too. That is,"
" if the docs said a positive angle means turn clock-wise, after the "
"set_flip_y() is on, a positive angle will mean turn counter-clockwise."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:341
msgid ""
"Compare the following two programs. The first one use set_flip_y() to "
"make y-axis grows bottom-up; and the second one use reflect(1,0) to do "
"that job. See the results."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:344
msgid "Use set_flip_y() to make y-axis grows bottom-up:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/009_transforms.rst:376
msgid "Use reflect(1,0) to make y-axis grows bottom-up:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:2
msgid "Compositions"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:3
msgid ""
"When we are drawing , what we really do is to change the destination "
"pixels color. Instead of just using (copy) the source color, the color be"
" decided by both the source and the destination's (old) color. This is "
"where the composition modes come in."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:7
msgid ""
"Easygraphics (and the underlying Qt system) support three types of "
"compositions:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:9
msgid ""
"`Bit Blit <https://en.wikipedia.org/wiki/Bit_blit>`_ ( Raster Operation "
"(ROP) / Bitwise Operation ): the source color and the destination color "
"are combined using a boolean function. Both the source color and the "
"destination color must be opaque."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:12
msgid ""
"`Alpha compositing <https://en.wikipedia.org/wiki/Alpha_compositing>`_ : "
"is the process of combining the source with the destination to create the"
" appearance of partial or full transparency."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:14
msgid ""
"`Blend <https://en.wikipedia.org/wiki/Blend_modes>`_ : is used in digital"
" image editing and computer graphics to determine how two layers are "
"blended into each other."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:17
msgid ""
"These three types is not strictly orthogonal, and some compositions have "
"different names in each type."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:20
msgid "Bit Blit (Raster Operations)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:21
msgid ""
"Bit Blit is the classic composition operation used in old graphic "
"systems. Because it requires both the source color and the destination "
"color to be opaque, it's of limited use in modern graphics systems."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:24
msgid ""
"A classic usage of the raster operation is using bitwise XOR to draw and "
"clear a shape, so as to create an animation."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:27
msgid ""
"The following example use bitwise XOR to draw and clear the ellipse. Note"
" that other colors will not do the job."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:53
msgid "Alpha Compositing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:54
msgid "Alpha Compositing is the mostly used composition type."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:56
msgid "The following table shows the result of the alpha compositings."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:58
msgid "Source and Source Over is the mostly used compistings."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:63
msgid "Source and Destination are opaque"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:64
msgid "|source_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:65
msgid "|source_over_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:66
msgid "|source_in_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:68
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:100
msgid "Source"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:69
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:101
msgid "Source Over"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:70
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:102
msgid "source in"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:72
msgid "|source_out_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:73
msgid "|source_atop_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:74
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:90
msgid "|xor_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:76
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:108
msgid "source out"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:77
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:109
msgid "source atop"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:78
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:94
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:110
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:126
msgid "xor"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:80
msgid "|destination_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:81
msgid "|destination_over_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:82
msgid "|destination_in_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:84
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:116
msgid "Destination"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:85
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:117
msgid "Destination Over"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:86
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:118
msgid "Destination in"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:88
msgid "|destination_out_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:89
msgid "|destination_atop_o|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:92
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:124
msgid "Destination out"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:93
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:125
msgid "Destination atop"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:95
msgid "Source and Destination are partially transparent"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:96
msgid "|source_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:97
msgid "|source_over_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:98
msgid "|source_in_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:104
msgid "|source_out_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:105
msgid "|source_atop_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:106
#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:122
msgid "|xor_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:112
msgid "|destination_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:113
msgid "|destination_over_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:114
msgid "|destination_in_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:120
msgid "|destination_out_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:121
msgid "|destination_atop_t|"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:152
msgid "Blend"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/010_composition_mode.rst:153
msgid ""
"Blend is mainly used for image or photo processing. See `wikipedia "
"<https://en.wikipedia.org/wiki/Blend_modes>`_ for more details about it."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:2
msgid "Image Processing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:4
msgid ""
"Sometimes we need to paint a complicated drawing repeatedly. It will be "
"very cumbersome and time consuming if we start the drawing from scratch "
"each time. A better solution is to first draw it on a seperate image, and"
" reuse the image."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:9
msgid "Create and Draw on a Image"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:10
msgid "Use create_image()  to create a new image instance."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:12
msgid "There are two ways to draw on a image:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:14
msgid ""
"the OOP way: Use the image's method. The image created by create_image() "
"is an Image object. we can use it's method directly."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:22
msgid ""
"the traditional way: Use the drawing functions mentioned in the previous "
"chapters, and provide the image as an additional parameter."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:31
msgid "The Graphics Window and The Drawing Target"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:32
msgid "In Easygraphics, the graphics window is just a special image."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:34
msgid ""
"To easy the coding, Easygraphics has a target image property. Most of the"
" drawing functions has an optional paramter \"image\" or \"dst_image\", "
"if it's not provided, the target image will be where the drawing happens."
" By default the target image is setting to the graphics window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:38
msgid ""
"So you call drawing functions without specifying which image is to draw, "
"the graphics window will get drawn."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:41
msgid ""
"You can use set_target() to change the drawing target, and use "
"get_target() to get the drawing target."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:43
msgid ""
"the following code use set_target() to change drawing target to a image, "
"and draw on it:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:45
msgid "**Note:** Remember to use close_image() to close the unused images."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:54
msgid "Saving Image"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:55
msgid "We can use save_image() to save a image to the disk."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:57
msgid ""
"The following program draw a bus and save it to \"bus_screen.png\" in the"
" current folder."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:59
msgid "Note that because:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:61
msgid "By default save_image() will save the drawing target image;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:62
msgid "By default the target image is the graphics window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:64
msgid "So we are saving the graphics window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:81
msgid "Copy Image"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:82
msgid "We can use draw_image() to copy part of one image to another image."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:84
msgid "In the following example, we:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:86
msgid "create a image and save it to variable \"img\""
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:87
msgid "set drawing target to \"img\""
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:88
msgid "draw a bus to \"img\" (the drawing target)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:89
msgid "set drawing target back to the graphics window"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:90
msgid "copy the content on \"img\" to the graphics window's different positions."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:115
msgid "The result:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:120
msgid "Image Transparency and Composition Mode"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:121
msgid ""
"put_image() copy a rectangle area to the destination image. If you want "
"to copy things that are not rectanglely outlined, you can draw it on a "
"image with fully transparent background, then copy"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:124
msgid ""
"The following example is identical to the above example, expect that it "
"set the source image's background to transparent before drawing the bus."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:151
msgid "The result is :"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:156
msgid "Copy Image without the Background"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:157
msgid ""
"If you can't draw with a transparent background, you can copy the image "
"without the background, by set the parameter \"with_background\" to "
"False."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:160
msgid ""
"In the following example, we don't use a transparent backround, and we do"
" the copy without background."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:189
msgid "Copy Image with transforms"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:190
msgid ""
"If you want to copy a image with transforms such as rotation, you should "
"set the transforms before the copy."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:192
msgid ""
"The following program copy images with rotation. Note the use of "
"save_settings() and restore_settings(), we use it to save and restore "
"image's transforms."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:195
msgid ""
"**Note:** It's a good practice to save the old transfrom before doing any"
" transforms before copy, and restore the old settings after the copy."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:231
msgid "Load Image"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:232
msgid "We can load image from files."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:234
msgid ""
"**Note:** JPEG format doesn't support transparency. So use the PNG format"
" if you want to save and load image with transparent backgrounds."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:238
msgid "The following example load and display a image."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:256
msgid "Headless Mode"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:257
msgid ""
"Sometimes we just want to draw and save the image, and don't need to "
"display it on the screen. Easygraphics provides a headless mode to do the"
" jobs. In this mode, no graphics window is displayed, and functions for "
"animations such as pause() won't work."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/011_image.rst:261
msgid ""
"The following program shows how to use init_graph() to create a headless "
"mode."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:2
msgid "Animation"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:3
msgid ""
"By rapidly change the painting (frames) on the graphics window, we can "
"make an animation."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:7
msgid "Time Control"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:8
msgid ""
"Because the computer can draw very fast, we must let it to wait some time"
" between two frames."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:11
msgid "**Note:** Functions used in this section won't work in the headless mode."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:13
msgid ""
"In easygraphics, we can use delay() to pause the program from the "
"specified milliseconds."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:16
msgid "Control the FPS"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:17
msgid ""
"Because the actual drawing time can be different each time drawing, a "
"better way to control the speed is by using the delay_fps() function."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:20
msgid ""
"FPS is the abbreviation of \"frames per second\".delay_fps() will "
"calculate each frame's drawing time, and wait to make each frame displays"
" evenly."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:24
msgid "Render Mode"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:25
msgid "There are two render mode in EasyGraphics:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:27
msgid ""
"**RenderMode.AUTO**: All drawings on the graphics window will show "
"immediately. This is the default mode, and is for normal drawing."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:29
msgid ""
"**RenderMode.Manual**: Drawings will not show on the graphics window. "
"Only time control, keyboard or mouse functions like "
"pause()/delay()/delay_fps()/get_mouse_msg() will update the graphics "
"window. This mode can speed up the animation frames drawing."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:33
msgid ""
"It's a good practice to set the render mode to manual when your want to "
"show an animation."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:35
msgid "You can use set_render_mode() to set the render mode."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:37
msgid ""
"**Note:** If you are not drawing on the graphics window, this render mode"
" has no effect."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:40
msgid "Background"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:41
msgid ""
"Ofter we need to make an object move in a background. If the background "
"is complicated, it's not a good idea to recreate the background in each "
"frame."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:44
msgid ""
"A common solution is to draw background in one image , and the moving "
"object in another transparent image. The final result is made by merge "
"the two images."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:47
msgid ""
"The following program draws a moving bus on the road (background).Note "
"the use of the is_run() function."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:93
msgid "Skipping Frames"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:94
msgid ""
"Sometimes a drawing can be complicated and slow, and we can't finish a "
"frame's drawing in the specified frame time. This will create lags in the"
" animation."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:97
msgid ""
"The delay_jfps() can skip some frames ( if a frame is using too mush "
"time, the successive frames will be skipped to keep up with the specified"
" fps)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/012_animation.rst:100
msgid ""
"The following example shows how to use delay_jfps() to control time. Note"
" that we use sleep() to simulate a long-time drawing operation."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:2
msgid "Mouse and Keyboard"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:3
msgid ""
"Often we need to get input from the user in the programs. Easygrphics "
"provides simple ways to get user's input from keyboard and mouse."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:7
msgid "Pause for input"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:8
msgid ""
"The most used user input function in Easygraphics is pause(). This "
"function pause the program, and wait for user to click on the graphics "
"window, or press any key, then continue the program."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:12
msgid "Mouse Clicking"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:13
msgid ""
"We can use get_click() to pause the program and wait for a mouse "
"clicking. This function will return the x,y coordinates of the position "
"clicked, and buttons that are pressed when clicking."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:41
msgid "Cursor Positions"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:42
msgid ""
"Sometimes we need to get the position of the cursor. We can use "
"get_cursor_pos() to get this job done."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:44
msgid "The following program continuously displays mouse cursor's position."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:65
msgid "Mouse Button Press and Release"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:66
msgid ""
"You can use get_mouse_msg() to get mouse button press and release "
"messages."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:69
msgid "Non-Blocking mouse processing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:70
msgid ""
"get_click()/get_mouse_msg() will block the program if there are no mouse "
"press/click in the last 100ms. If you want to check the mouse operation "
"non-blockly, you could use the non-blocking function has_mouse_msg() to "
"see if there are any mouse messages, and then use get_mouse_msg() to get "
"the mouse message."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:74
msgid ""
"The following program continuously check display cursor's postion and "
"mouse button press/release events."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:104
msgid "Mouse Message Demo"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:106
msgid "The following program draws a bezier curve interactively"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:108
msgid ""
"First click on the window to set the first control point of the curve. "
"Then click on the window to set the second control point of the curve. "
"Then drag from any of the above two control points to set the third and "
"the fourth control point."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:186
msgid "Char Input"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:187
msgid ""
"We can use has_kb_hit() to see if there is any ascii char pressed, and "
"use get_char() to get the inputted char. has_kb_hit() is non-blocking, "
"and get_char() is blocking."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:190
msgid "The following program is a simple print game."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:256
msgid "Key Pressed"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/013_mouse_and_keyboard.rst:257
msgid ""
"We can use has_kb_msg() to see if there is any key pressed, and use "
"get_key() to get the pressed key. has_kb_msg() is non-blocking, and "
"get_key() is blocking."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:3
msgid ""
"The turtle graphics is a classic and popular way to introducing "
"programming to kids."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:5
msgid ""
"In the turtle graphics, you control a turtle to move around the graphics "
"window. The traces left by its move form drawings."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:8
msgid "In the following program, we use turtle graphics to draw a star:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:12
msgid ""
"use create_world(800,600) to create a 800x600 drawing canvas (drawing "
"window)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:13
msgid "set the pen color to red and the fill color to red"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:14
msgid "use right(90) command to turn the turtle 90 degrees clockwise."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:15
msgid ""
"use forward(100) command to move the turtle 100 steps forward,then turn "
"the turtle 144 degrees clockwise."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:16
msgid "repeat the above step 5 times"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/101_turtle.rst:17
msgid "use close_world() to close the drawing window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:2
msgid "Basic Commands"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:3
msgid "In this tutorial, we will introduce basic commands of the turtle graphics."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:6
msgid "Move the turtle"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:7
msgid ""
"forward(x) function move the turtle x steps forward. fd(x) is the short "
"form of forward(x)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:24
msgid ""
"backward(x) function move the turtle x steps backward. back(x) and bk(x) "
"is the short form of backward(x)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:42
msgid "Turning the turtle"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:44
msgid ""
"right_turn(x) turns the turtle x degrees clockwise. right(x) and rt(x) "
"are its short form."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:46
msgid ""
"left_turn(x) turns the turtle x degrees counter-clockwise. left(x) and "
"lt(x) are its short form"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:48
msgid "The following program draws a 30 degree angle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:68
msgid "Speed of the turtle"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:69
msgid ""
"We can use set_speed() to control the turtle's moving speed. Speed is the"
" more  the fast, and 1 is the slowest. If you don't need the animation, "
"use set_immediate(True) to disable it."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:73
msgid "Pen Up and Pen Down"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:74
msgid ""
"If you want to move the turtle without a trace, you can use pen_up and "
"pen_down."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:76
msgid ""
"By default the turtle is in pen down state, which means its move will "
"leave a trace."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:78
msgid "If the turtle is in pen up state, its move will not leave a trace."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:80
msgid ""
"The following program use pen up and down to draw one square inside "
"another."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:114
msgid "Show and Hide the Turtle"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:115
msgid "When the drawing is finished, we can hide() the turtle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/102_turtle_basic_commands.rst:117
msgid "And show() makes the turtle visible again."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:2
msgid "Interactive Mode"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:3
msgid ""
"On Windows and Linux, we can run easygraphics in python's interactive "
"mode."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:6
msgid "Demo fro easygraphics"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:17
msgid "Demo for Turtle Graphics"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:30
msgid "Clear the screen"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:31
msgid ""
"If you are using turtle graphics, clear_screen() clears the turtle "
"graphics window, and reset the turtle to its initial position and state. "
"cs() / clear() is the short form."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/103_interactive_mode.rst:34
msgid "If you are using easygraphics, clear_device() clears the graphics window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:2
msgid "Coordinates of the Turtle World"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:4
msgid "In the turtle world, we use a coordinate system as the following:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:6
msgid "The origin (0,0) is at the center of the graphics window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:7
msgid "The x axis grows from left to right."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:8
msgid "The y axis grows from bottom to top."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:13
msgid "Set the turtle's position"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:15
msgid "setxy(x,y) set the turtle's position to point(x,y) without a trace."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:17
msgid ""
"gotoxy(x,y) move the turtle to point(x,y). So if the pen is down, there "
"will be a trace."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:19
msgid "The turtle's heading direction will not change."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:21
msgid "The following program demonstrated the result of gotoxy() and setxy()."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:48
msgid "Set the Turtle's heading"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:50
msgid "facing(x,y) set the turtle heading to facing point(x,y)."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:69
msgid "set_heading(angle) set the turtle's new orientation to angle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:71
msgid "Values of the angles in the turtle world are as the following:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:93
msgid "Get turtle's current state"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:95
msgid "get_x() return the x coordinate value of the turtle's position."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:97
msgid "get_y() return the y coordinate value of the turtle's position."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/104_turtle_coordinates.rst:99
msgid "get_heading() return the angle value of the turtle's heading."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:2
msgid "Advanced Commands"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:5
msgid "Fill the drawings"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:7
msgid ""
"Drawings between begin_fill() and end_fill() will be filled using the "
"fill color. Unclosed shapes will get closed automatically."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:10
msgid ""
"By default the fill color is light gray. You can use easygraphics "
"set_fill_color() to change it."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:12
msgid ""
"The following program draw and fill a star. Note that we use the "
"FillRule.WINDING_FILL rule to fill the whole star."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:40
msgid "Move in arcs"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:41
msgid "move_arc(radius,angle) moves the turtle in a arc path."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:43
msgid ""
"The center is radius units left of the turtle. That is, if radius > 0, "
"the center is on the left of the turtle; if radius < 0, the center is on "
"the right of the turtle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:46
msgid ""
"Angle is the value of the angle at the circle's center. If angle > 0, the"
" turtle moves forward around the center; if angle < 0, the turtle moves "
"backward around the center. So:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:49
msgid ""
"if angle > 0 and radius > 0, the turtle moves forward and turns counter-"
"clockwise;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:50
msgid "if angle > 0 and raidus < 0, the turtle move forward and turns clockwise;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:51
msgid "if angle <0 and radius > 0, the turtle moves backward and turns clockwise;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:52
msgid ""
"if angle <0 and radius < 0, the turtle moves backward and turns counter-"
"clockwise."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:101
msgid "Move in ellipse arcs"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:102
msgid ""
"move_ellipse(radius_left, radius_top, angle) moves the turtle in an "
"elliptical path."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:104
msgid ""
"\"radius_left\" is the radius of the ellipse on the direction "
"perpendicular to the turtle's orientation, it can be postive or "
"negtive;\"radius_top\" is the radius of the ellipse on the direction "
"parallel to the turtle's orientation, it must be postive."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:108
msgid ""
"The center is radius_left units left of the turtle. That is, if "
"radius_left > 0, the center is on the left of the turtle; if radius_left "
"< 0, the center is on the right of the turtle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:111
msgid ""
"If angle > 0, the turtle moves forward around the center; if angle < 0, "
"the turtle moves backward around the center. So:"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:113
msgid ""
"if angle > 0 and radius_left > 0, the turtle moves forward and turns "
"counter-clockwise;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:114
msgid ""
"if angle > 0 and radius_left < 0, the turtle move forward and turns "
"clockwise;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:115
msgid ""
"if angle <0 and radius_left > 0, the turtle moves backward and turns "
"clockwise;"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:116
msgid ""
"if angle <0 and radius_left < 0, the turtle moves backward and turns "
"counter-clockwise."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:175
msgid "Use easygraphics functions"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:176
msgid "Most of the easygraphics functions can be used in turtle graphics."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/105_turtle_advanced_commands.rst:178
msgid ""
"The following program use easygraphics functions to set the line width "
"and colors, draw a circle, and fill a rectangle."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:3
msgid ""
"Easygraphics provides many predefined dialogs to communicate with user "
"interactively."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:6
msgid "Output Dialogs"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_html <easygraphics.dialog.show_html>`\\ \\(\\[title\\, text\\,"
" width\\, height\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Displays some html text in a window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_image_dialog <easygraphics.dialog.show_image_dialog>`\\ "
"\\(image\\[\\, title\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Display the image in a dialog."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_lists_table <easygraphics.dialog.show_lists_table>`\\ "
"\\(\\*args\\[\\, column\\_names\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Displays list of datas in a table"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_message <easygraphics.dialog.show_message>`\\ \\(\\[message\\,"
" title\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Simple message box."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_objects <easygraphics.dialog.show_objects>`\\ \\(datas\\[\\, "
"fields\\, field\\_names\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Displays list of objects in a table"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_text <easygraphics.dialog.show_text>`\\ \\(\\[title\\, text\\,"
" width\\, height\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Displays some text in a window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_table <easygraphics.dialog.show_table>`\\ \\(datas\\[\\, "
"fields\\, field\\_names\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_code <easygraphics.dialog.show_code>`\\ \\(\\[title\\, code\\,"
" width\\, height\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Displays some text in a window, in a monospace font."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid ""
":obj:`show_file <easygraphics.dialog.show_file>`\\ \\(\\[file\\_name\\, "
"title\\, file\\_type\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:20:<autosummary>:1
msgid "Displays a file in a window."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:22
msgid "Input Dialogs"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_choice <easygraphics.dialog.get_choice>`\\ \\(\\[message\\, "
"title\\, choices\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Simple dialog to ask a user to select an item within a drop-down list"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ":obj:`get_color <easygraphics.dialog.get_color>`\\ \\(\\[color\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Display a color picker and return the selected color"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_continue_or_cancel "
"<easygraphics.dialog.get_continue_or_cancel>`\\ \\(\\[question\\, "
"title\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Continue or cancel question, shown as a warning (i.e."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ":obj:`get_date <easygraphics.dialog.get_date>`\\ \\(\\[title\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Calendar widget"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_directory_name <easygraphics.dialog.get_directory_name>`\\ "
"\\(\\[title\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Gets the name (full path) of an existing directory"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_file_names <easygraphics.dialog.get_file_names>`\\ "
"\\(\\[title\\, filter\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Gets the names (full path) of existing files"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_float <easygraphics.dialog.get_float>`\\ \\(\\[message\\, "
"title\\, default\\_value\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
"Simple dialog to ask a user to select a floating point number within a "
"certain range and a maximum precision."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_int <easygraphics.dialog.get_int>`\\ \\(\\[message\\, title\\, "
"default\\_value\\, ...\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Simple dialog to ask a user to select an integer within a certain range."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_list_of_choices <easygraphics.dialog.get_list_of_choices>`\\ "
"\\(\\[title\\, choices\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Show a list of possible choices to be selected."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_many_strings <easygraphics.dialog.get_many_strings>`\\ "
"\\(\\[title\\, labels\\, masks\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Multiple strings input"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_new_password <easygraphics.dialog.get_new_password>`\\ "
"\\(\\[title\\, labels\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Change password input box."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_password <easygraphics.dialog.get_password>`\\ \\(\\[message\\,"
" title\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Simple password input box."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_save_file_name <easygraphics.dialog.get_save_file_name>`\\ "
"\\(\\[title\\, filter\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Gets the name (full path) of of a file to be saved."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_string <easygraphics.dialog.get_string>`\\ \\(\\[message\\, "
"title\\, default\\_response\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Simple text input box."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_username_password "
"<easygraphics.dialog.get_username_password>`\\ \\(\\[title\\, "
"labels\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "User name and password input box."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid ""
":obj:`get_yes_or_no <easygraphics.dialog.get_yes_or_no>`\\ "
"\\(\\[question\\, title\\]\\)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:44:<autosummary>:1
msgid "Simple yes or no question."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/201_dialogs.rst:45
msgid ""
"In the following program, click the graphics window to open a color "
"dialog, select a color and set it as the background."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:2
msgid "Drawing using Processing"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:4
msgid ""
"`Processing <https://processing.org>`_ is a simple programming "
"environment to help user create interactive animations. "
"easygraphics.processing is a processing-like animation framework."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:7
msgid ""
"In processing, we override (redefine) some key functions to tell the "
"framework how to work."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:9
msgid ""
"In the following program, we redefined two functions in processing to "
"draw a rotating star."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:11
msgid "The function setup() is called by the framework when the program begins."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:13
msgid ""
"We use it to do preparing works, such as defining window size, setting "
"foreground , background color and frame refresh rate(fps), and so on."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:15
msgid "The function draw() is called by the framework to draw frames."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:17
msgid "Each time before a frame is to be displayed, this function is called."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/301_intro_processing.rst:19
msgid "Finally we use run_app(globals()) to start the processing frame work."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/901_music.rst:2
msgid "Music(Audio)"
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/901_music.rst:3
msgid "Easygraphics provides simple ways to play musics."
msgstr ""

#: E:/Workspaces/PyEasyGraphics/docs/tutorials/901_music.rst:5
msgid ""
"The following program shows how to use the functions in "
":doc:`easygraphics.music <../apis/easygraphics.music>` to play music:"
msgstr ""

#~ msgid "Color System Description"
#~ msgstr ""

#~ msgid ""
#~ "A color is normally specified in "
#~ "terms of RGB (red, green, and "
#~ "blue) components ( using color_rgb()), "
#~ "but it is also possible to specify"
#~ " it in terms of HSV (hue, "
#~ "saturation, and value) (using color_hsv())and"
#~ " CMYK (cyan, magenta, yellow and "
#~ "black) components (user color_cymk()). In "
#~ "addition a color can be specified "
#~ "using a color name. The color name"
#~ " can be any of the SVG 1.0 "
#~ "color names."
#~ msgstr ""

#~ msgid ""
#~ "Instead of RGB, HSV or CMYK "
#~ "values, A color can be set by "
#~ "passing an RGB string (such as "
#~ "\"#112233\"), or an ARGB string (such"
#~ " as \"#ff112233\") or a color name"
#~ " (such as \"blue\"), use color(). The"
#~ " color names are taken from the "
#~ "`SVG 1.0 color names "
#~ "<https://www.w3.org/TR/SVG10/types.html#ColorKeywords>`_."
#~ msgstr ""

#~ msgid "Use RGB values and rgb() function"
#~ msgstr ""

#~ msgid ""
#~ "Like most morden graphic systems, "
#~ "Easygraphics ( and its underlying Qt "
#~ "System) use a alpha component to "
#~ "represent the transparency of a pixel"
#~ " on the image. When the alpha "
#~ "value is 255, the pixel is fully"
#~ " opaque; when the alpha value is "
#~ "0, the pixel is fully tranparent."
#~ msgstr ""

#~ msgid ""
#~ "Functions that only draw shape outlines."
#~ " These functions are named like "
#~ "\\'xxx()\\' (\\\"xxx\\\" is the shape\\'s "
#~ "name). \\"
#~ msgstr ""

#~ msgid "The example below draw a circle with a blue outline."
#~ msgstr ""

#~ msgid ""
#~ "Functions that both draw and fill "
#~ "a shape. These functions are named "
#~ "like \\'draw_xxx()\\'(\\\"xxx\\\" is the "
#~ "shape\\'s name)."
#~ msgstr ""

#~ msgid "The example below draw a red circle with a blue outline."
#~ msgstr ""

#~ msgid ""
#~ "Functions that only fill a shape. "
#~ "These functions are named like "
#~ "\\'fill_xxx()\\'( \\\"xxx\\\" is the shape\\'s"
#~ " name)."
#~ msgstr ""

#~ msgid "The example below draw a red circle without outline."
#~ msgstr ""

#~ msgid ""
#~ "Using the RGB color model, the "
#~ "color components can in addition be "
#~ "accessed with rgb()."
#~ msgstr ""

#~ msgid ""
#~ "poly_line() and draw_poly_line expect a "
#~ "list as the endpoint\\'s postions. In"
#~ " the list, each endpoint is "
#~ "represented as 2 values (x and y)."
#~ " So n endpoints is represented by "
#~ "a list with 2n values."
#~ msgstr ""

#~ msgid ""
#~ "The related functions are: * functions"
#~ " to get the current position: "
#~ "get_x()/get_y/get_drawing_pos() * functions to "
#~ "set the current position: move_to()/move_rel()"
#~ " * functions to draw a line "
#~ "using the current position: "
#~ "line_to()/line_rel()"
#~ msgstr ""

#~ msgid "functions to get the current position: get_x()/get_y/get_drawing_pos()"
#~ msgstr ""

#~ msgid "functions to set the current position: move_to()/move_rel()"
#~ msgstr ""

#~ msgid ""
#~ "functions to draw a line using the"
#~ " current position: line_to()/line_rel()"
#~ msgstr ""

#~ msgid "use the Image object\\'s get_pen() to get the pen. It\\'s a PyQt\\'s"
#~ msgstr ""

#~ msgid "`QPen <http://pyqt.sourceforge.net/Docs/PyQt4/qpen.html>`_ object."
#~ msgstr ""

#~ msgid ""
#~ "Use the pen\\'s `setDashPattern() "
#~ "<http://pyqt.sourceforge.net/Docs/PyQt4/qpen.html#setDashPattern>`_"
#~ msgstr ""

#~ msgid "to set custom line shape."
#~ msgstr ""

#~ msgid ":obj:`get_x() <get_x()>`\\"
#~ msgstr ""

#~ msgid ":obj:`get_drawing_pos() <get_drawing_pos()>`\\"
#~ msgstr ""

#~ msgid ":obj:`move_to() <move_to()>`\\"
#~ msgstr ""

#~ msgid ":obj:`move_rel() <move_rel()>`\\"
#~ msgstr ""

#~ msgid ":obj:`line_to() <line_to()>`\\"
#~ msgstr ""

#~ msgid ":obj:`line_rel() <line_rel()>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),     "
#~ "then set the drawing position is "
#~ "set to (x+d,y+dy)."
#~ msgstr ""

#~ msgid ""
#~ "divide [-3,3] into n equal intervals,"
#~ " to get n+1 values evenly distributed"
#~ " on [-3,3]: x0,x1,x2,x3,..., and x0=-3, "
#~ "x1=3"
#~ msgstr ""

#~ msgid ""
#~ "**Note:**  Obviously the window is "
#~ "default to understand and use. We "
#~ "can use :doc:`transform <09_transforms>` to"
#~ " achieve the same result."
#~ msgstr ""

#~ msgid ""
#~ "**Note**: Because rotation and skew are"
#~ " both respective to the origin, so"
#~ " we want rotate or skew around "
#~ "a point (x,y) other than the "
#~ "origin, we can:"
#~ msgstr ""

#~ msgid "Reflection agaisn the y-axis"
#~ msgstr ""

#~ msgid "Reflection agaisn the x-axis"
#~ msgstr ""

#~ msgid "Reflection agaisn other lines"
#~ msgstr ""

#~ msgid ""
#~ "The following program flip the bus "
#~ "again the line passing (0,0) and "
#~ "(500,300). To clearly see the result,"
#~ " we first draw a non-transformed "
#~ "bus, a mirror line, then draw the"
#~ " flipped bus."
#~ msgstr ""

#~ msgid ""
#~ "These 3 types is not strictly "
#~ "orthogonal, and some compositions have "
#~ "different names in each type."
#~ msgstr ""

#~ msgid "We use use save_image() to save a image to the disk."
#~ msgstr ""

#~ msgid "by save_image() will save the default image;"
#~ msgstr ""

#~ msgid "by default the target image is the graphics window."
#~ msgstr ""

#~ msgid "By default save_image() will save the default image;"
#~ msgstr ""

#~ msgid ""
#~ "copy the content on \"img\" to the"
#~ " graphics window's different portions."
#~ msgstr ""

#~ msgid ""
#~ "The following example is identical to"
#~ " the above example, expect that it"
#~ " set the source image's background to"
#~ " transparent before drawing the bus. "
#~ "And note"
#~ msgstr ""

#~ msgid ""
#~ "1. the OOP way: Use the image's"
#~ " method. The image created by "
#~ "create_image() is an Image object. we"
#~ " can use it's method directly."
#~ msgstr ""

#~ msgid ""
#~ "2. the traditional way: Use the "
#~ "drawing functions mentioned in the "
#~ "previous chapters, and provide the image"
#~ " as an additional parameter."
#~ msgstr ""

#~ msgid ""
#~ "Sometimes a drawing can be complicated"
#~ " slow, and we can't finish a "
#~ "frame's drawing in the specified frame"
#~ " time. This will create lags in "
#~ "the animation."
#~ msgstr ""

#~ msgid "Mouse Button Down and Up"
#~ msgstr ""

#~ msgid ""
#~ "Simple _dialog to ask a user to"
#~ " select a floating point number "
#~ "within a certain range and a "
#~ "maximum precision."
#~ msgstr ""

#~ msgid ""
#~ "Simple _dialog to ask a user to"
#~ " select an integer within a certain"
#~ " range."
#~ msgstr ""

#~ msgid ""
#~ "The following program shows how to "
#~ "use the functions in easygraphics.music "
#~ "to play music:"
#~ msgstr ""

#~ msgid ""
#~ "The delay_jfps() can skip some frames"
#~ " ( if a frame is using too "
#~ "mush time, the successive frames will"
#~ " be skipped to keep up with the"
#~ " specified fps)"
#~ msgstr ""

#~ msgid ""
#~ "**RenderMode.AUTO**: All drawings on the "
#~ "graphics window will show immediately. "
#~ "This is for normal drawing."
#~ msgstr ""

#~ msgid ""
#~ "**Note**: Because rotation and skew are"
#~ " both respective to the origin, so"
#~ " we want rotate or skew around "
#~ "a point (x,y) other than the "
#~ "origin, we should:"
#~ msgstr ""

#~ msgid "translate the origin to the (x,y)"
#~ msgstr ""

#~ msgid "do rotate/skew"
#~ msgstr ""

#~ msgid "translate the origin back"
#~ msgstr ""

#~ msgid "do the drawing"
#~ msgstr ""

#~ msgid ""
#~ "Use rotate() to rotate the coordinate"
#~ " around the origin (0,0) clockwise."
#~ msgstr ""

#~ msgid ""
#~ "If you need to rotate around any"
#~ " point (x,y), just do as the "
#~ "above note in the translation section."
#~ msgstr ""

#~ msgid ""
#~ "We use shear() or its alias skew"
#~ " to shear a drawing around the "
#~ "origin. shear() needs 2 parameters "
#~ "\"sv\" and \"sh\". After shearing, each"
#~ " point (x,y) is transformed to "
#~ "(x+sh*y, y+sv*x). We can see its "
#~ "effect by the following examples."
#~ msgstr ""

#~ msgid ""
#~ "We can use reflect() ( or its "
#~ "alias mirror() and flip() ) to do"
#~ " a reflection. It reflect the drawing"
#~ " again the line passing (0,0) and "
#~ "its parameter (x,y)."
#~ msgstr ""

#~ msgid ""
#~ "To reflect againt lines not passing "
#~ "the origin, first translate the origin"
#~ " to that line, reflect, then "
#~ "translate back."
#~ msgstr ""

#~ msgid ""
#~ "The following program flip the bus "
#~ "against the line passing (0,0) and "
#~ "(500,300). To clearly see the result,"
#~ " we first draw a non-transformed "
#~ "bus, a mirror line, then draw the"
#~ " flipped bus."
#~ msgstr ""

#~ msgid ":obj:`get_x <easygraphics.get_x>`\\ \\(image\\)"
#~ msgstr ""

#~ msgid "Get the x coordinate value of the current drawing position (x,y)."
#~ msgstr ""

#~ msgid ":obj:`get_y <easygraphics.get_y>`\\ \\(image\\)"
#~ msgstr ""

#~ msgid "Get the y coordinate value of the current drawing position (x,y)."
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),     "
#~ "then set the drawing position is "
#~ "set to (x+dx,y+dy)."
#~ msgstr ""

#~ msgid ""
#~ "The following example draws a triangle"
#~ " with vertices at (50, 50), (550, "
#~ "350), (50, 150):"
#~ msgstr ""

#~ msgid ""
#~ "The following example draws a polyline"
#~ " connecting (50,50), (550,350), (50,150), "
#~ "(550,450), (50,250), (550,550)"
#~ msgstr ""

#~ msgid ""
#~ "Degree 0,90,180 and 270 are always "
#~ "the positive direction of X-axis, the"
#~ " positive direction of Y-axis,  the "
#~ "negative direction of X-axis, the "
#~ "negative direction of Y-axis, respectively "
#~ "independent of any :doc:`transforms "
#~ "<09_transforms>`."
#~ msgstr ""

#~ msgid "So by default, a positive turning angle means turn clockwise."
#~ msgstr ""

#~ msgid ""
#~ "EasyGraphics supports drawing all the "
#~ "basic shape: point, line, circle, "
#~ "ellipse, rectangle, polygon, rectangle with"
#~ " rounded corner, etc. If you need "
#~ "more advanced drawing, you can use "
#~ ":doc:`Image <../apis/easygraphics.image>` object's "
#~ "get_painter() method to get the "
#~ "`QPainter "
#~ "<http://pyqt.sourceforge.net/Docs/PyQt4/qpainter.html>`_ "
#~ "instance and draw."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_table <easygraphics.dialog.show_table>`\\ "
#~ "\\(datas\\, fields\\, field\\_names\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "**Note:**  Obviously the logical window "
#~ "is difficult to understand and use. "
#~ "We can use :doc:`transform <09_transforms>`"
#~ " to achieve the same result."
#~ msgstr ""

#~ msgid ":obj:`get_x <get_x>`\\"
#~ msgstr ""

#~ msgid ":obj:`get_y <get_y>`\\"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_objects <easygraphics.dialog.show_objects>`\\ "
#~ "\\(objects\\, fields\\, field\\_names\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_table <easygraphics.dialog.show_table>`\\ "
#~ "\\(objects\\, fields\\, field\\_names\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_file <easygraphics.dialog.show_file>`\\ "
#~ "\\(file\\_name\\, title\\, file\\_type\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_file_names <easygraphics.dialog.get_file_names>`\\ "
#~ "\\(title\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_save_file_name "
#~ "<easygraphics.dialog.get_save_file_name>`\\ \\(title\\)"
#~ msgstr ""

#~ msgid "Widgets"
#~ msgstr ""

#~ msgid ""
#~ "In processing, we override (redefine) "
#~ "some key functions to tell the "
#~ "framework how to work. In the "
#~ "following program,"
#~ msgstr ""

#~ msgid "we redefined two functions."
#~ msgstr ""

#~ msgid ""
#~ "In processing, we override (redefine) "
#~ "some key functions to tell the "
#~ "framework how to work. In the "
#~ "following program, we redefined two "
#~ "functions."
#~ msgstr ""

#~ msgid "In the following program, we redefined two functions."
#~ msgstr ""

#~ msgid ""
#~ "The function setup() is called by "
#~ "the framework when the program begins."
#~ " We use it to do preparing "
#~ "works, such as defining window size, "
#~ "setting foreground , background color "
#~ "and frame refresh rate(fps), and so "
#~ "on."
#~ msgstr ""

#~ msgid ""
#~ "The function draw() is called by "
#~ "the framework to draw frames. Each "
#~ "time before a frame is to be "
#~ "displayed, this function is called."
#~ msgstr ""

#~ msgid ""
#~ "In the following program, we redefined"
#~ " two functions to draw a rotating "
#~ "star."
#~ msgstr ""

#~ msgid "Drawing Polygon using Vertices"
#~ msgstr ""

#~ msgid ""
#~ "**Note**: * We use a for loop "
#~ "to define 5 vertices of the star."
#~ " * We set end_shape()'s parameter to"
#~ " True to draw a closed polyline. "
#~ "If you want a polyline that not"
#~ " closed, use end_shape()'s default False"
#~ " parameter. * If you don't want "
#~ "fill, you should not close the "
#~ "shape,  or you can set the fill"
#~ " color to Color.TRANSPARENT"
#~ msgstr ""

#~ msgid "First easy graphics program"
#~ msgstr ""

#~ msgid "In this program, we will:"
#~ msgstr ""

#~ msgid "Init the graphics windows"
#~ msgstr ""

#~ msgid ""
#~ "**note 1** : init_graph() must be "
#~ "called before any easygraphics drawing "
#~ "functions."
#~ msgstr ""

#~ msgid ""
#~ "**note 2** : Don't forget to "
#~ "close_graph() to clean up the system "
#~ "after all drawing work is done."
#~ msgstr ""

#~ msgid "**note 3**"
#~ msgstr ""

#~ msgid ""
#~ "You can use the graphics window's "
#~ "close button to close the graphics "
#~ "system. But"
#~ msgstr ""

#~ msgid "Fist drawing program"
#~ msgstr ""

#~ msgid "Let's draw a line from (0,0) to (640,480)"
#~ msgstr ""

#~ msgid ""
#~ "In this system, the origin (0,0) "
#~ "is at screen's upper left corner, "
#~ "and y-axis is growing top-down."
#~ msgstr ""

#~ msgid "from easygraphics import *"
#~ msgstr ""

#~ msgid "def main():"
#~ msgstr ""

#~ msgid "init_graph(800, 600) pause() close_graph()"
#~ msgstr ""

#~ msgid "easy_run(main)"
#~ msgstr ""

#~ msgid ""
#~ "The following program draw a quadratic"
#~ " bezier curve with control points at"
#~ " (300,50),(200,50),(200,200) and (100,200)."
#~ msgstr ""

#~ msgid "In the following program, we use turtle graphics to draw a star."
#~ msgstr ""

#~ msgid ""
#~ "use forward(100) command to move the "
#~ "turtle 100 steps forward,the turn the"
#~ " turtle 144 degrees clockwise."
#~ msgstr ""

#~ msgid "use close_world() to close the drawing window()"
#~ msgstr ""

#~ msgid ""
#~ "Forward(x) function move the turtle x"
#~ " steps forward. fd(x) is the short"
#~ " form of forward(x)."
#~ msgstr ""

#~ msgid "from easygraphics.turtle import *"
#~ msgstr ""

#~ msgid "create_world(400,400) bk(100) pause() close_world()"
#~ msgstr ""

#~ msgid "Move and draw arcs"
#~ msgstr ""

#~ msgid "Move and draw ellipse arcs"
#~ msgstr ""

#~ msgid "**note 4**"
#~ msgstr ""

#~ msgid ""
#~ "You can use the graphics window\\'s "
#~ "close button to close the graphics "
#~ "system. But"
#~ msgstr ""

#~ msgid ":obj:`get_drawing_x <easygraphics.get_drawing_x>`\\ \\(image\\)"
#~ msgstr ""

#~ msgid ":obj:`get_drawing_y <easygraphics.get_drawing_y>`\\ \\(image\\)"
#~ msgstr ""

#~ msgid ":obj:`get_drawing_pos <easygraphics.get_drawing_pos>`\\ \\(image\\)"
#~ msgstr ""

#~ msgid ":obj:`move_to <easygraphics.move_to>`\\ \\(x\\, y\\, image\\)"
#~ msgstr ""

#~ msgid ":obj:`move_rel <easygraphics.move_rel>`\\ \\(dx\\, dy\\, image\\)"
#~ msgstr ""

#~ msgid ":obj:`line_to <easygraphics.line_to>`\\ \\(x\\, y\\, image\\)"
#~ msgstr ""

#~ msgid ":obj:`line_rel <easygraphics.line_rel>`\\ \\(dx\\, dy\\, image\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_html <easygraphics.dialog.show_html>`\\ "
#~ "\\(title\\, text\\, width\\, height\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_image_dialog "
#~ "<easygraphics.dialog.show_image_dialog>`\\ \\(image\\, "
#~ "title\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_lists_table <easygraphics.dialog.show_lists_table>`\\"
#~ " \\(\\*args\\, column\\_names\\, title\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_message <easygraphics.dialog.show_message>`\\ "
#~ "\\(message\\, title\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_objects <easygraphics.dialog.show_objects>`\\ "
#~ "\\(datas\\, fields\\, field\\_names\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_text <easygraphics.dialog.show_text>`\\ "
#~ "\\(title\\, text\\, width\\, height\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_code <easygraphics.dialog.show_code>`\\ "
#~ "\\(title\\, code\\, width\\, height\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`show_file <easygraphics.dialog.show_file>`\\ "
#~ "\\(file\\_name\\, title\\, file\\_type\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_choice <easygraphics.dialog.get_choice>`\\ "
#~ "\\(message\\, title\\, choices\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_continue_or_cancel "
#~ "<easygraphics.dialog.get_continue_or_cancel>`\\ \\(question\\,"
#~ " title\\, ...\\)"
#~ msgstr ""

#~ msgid ":obj:`get_date <easygraphics.dialog.get_date>`\\ \\(title\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_directory_name "
#~ "<easygraphics.dialog.get_directory_name>`\\ \\(title\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_file_names <easygraphics.dialog.get_file_names>`\\ "
#~ "\\(title\\, filter\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_float <easygraphics.dialog.get_float>`\\ "
#~ "\\(message\\, title\\, default\\_value\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_int <easygraphics.dialog.get_int>`\\ "
#~ "\\(message\\, title\\, default\\_value\\, min\\_\\,"
#~ " ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_list_of_choices "
#~ "<easygraphics.dialog.get_list_of_choices>`\\ \\(title\\, "
#~ "choices\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_many_strings <easygraphics.dialog.get_many_strings>`\\"
#~ " \\(title\\, labels\\, masks\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_new_password <easygraphics.dialog.get_new_password>`\\"
#~ " \\(title\\, labels\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_password <easygraphics.dialog.get_password>`\\ "
#~ "\\(message\\, title\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_save_file_name "
#~ "<easygraphics.dialog.get_save_file_name>`\\ \\(title\\, "
#~ "filter\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_string <easygraphics.dialog.get_string>`\\ "
#~ "\\(message\\, title\\, default\\_response\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_username_password "
#~ "<easygraphics.dialog.get_username_password>`\\ \\(title\\, "
#~ "labels\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_yes_or_no <easygraphics.dialog.get_yes_or_no>`\\ "
#~ "\\(question\\, title\\)"
#~ msgstr ""

#~ msgid "Int the turtle world, we use a coordinate system as the following:"
#~ msgstr ""

#~ msgid ""
#~ "**note 4** : You can use the "
#~ "graphics window\\'s close button to "
#~ "close the graphics system. But"
#~ msgstr ""

#~ msgid ""
#~ "this may cause exception. (When there"
#~ " are unfinished drawing operations.ï¼‰"
#~ msgstr ""

