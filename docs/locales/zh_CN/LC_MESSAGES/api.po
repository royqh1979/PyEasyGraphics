# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Roy Qu
# This file is distributed under the same license as the EasyGraphics
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyGraphics \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-30 22:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api.rst:2
msgid "API"
msgstr ""

#: ../../api.rst:5
msgid "Subpackages"
msgstr "子包(Subpackages)"

#: ../../api.rst:14
msgid "Submodules"
msgstr "子模块(Submodules)"

#: ../../api.rst:21
msgid "Package Summary"
msgstr "函数和常量概览"

#: ../../api.rst:24
msgid "System init and close"
msgstr "初始化和关闭图形系统"

#: ../../api.rst:31:<autosummary>:1
msgid ":obj:`close_graph <easygraphics.close_graph>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:31:<autosummary>:1 easygraphics.close_graph:1 of
msgid "Close the graphics windows."
msgstr "关闭绘图窗口。"

#: ../../api.rst:31:<autosummary>:1
msgid ""
":obj:`init_graph <easygraphics.init_graph>`\\ \\(width\\, height\\, "
"headless\\)"
msgstr ""

#: ../../api.rst:31:<autosummary>:1 easygraphics.init_graph:1 of
msgid "Init the easygraphics system and show the graphics window."
msgstr "初始化easygraphics系统，显示绘图窗口。"

#: ../../api.rst:33
msgid "Drawing Settings"
msgstr "绘图设置"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`get_background_color <easygraphics.get_background_color>`\\ "
"\\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_background_color:1 of
msgid "Get the background color of the image."
msgstr "获取图片的背景色。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_color <easygraphics.get_color>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_color:1 of
msgid "Get the foreground (drawing) color of the specified image."
msgstr "获取指定的图片的前景色（画笔颜色）。"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`get_composition_mode <easygraphics.get_composition_mode>`\\ "
"\\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_composition_mode:1
#: easygraphics.get_write_mode:1 of
msgid "Get composition mode of the specified image"
msgstr "获取指定图片的叠加模式(Composition mode)。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_cursor_pos <easygraphics.get_cursor_pos>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_cursor_pos:1 of
msgid "Get position of the mouse cursor"
msgstr "获取鼠标光标的位置。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_drawing_pos <easygraphics.get_drawing_pos>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_drawing_pos:1 of
msgid "Get the current drawing position (x,y)."
msgstr "获取指定图片的“当前绘图位置”。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_fill_color <easygraphics.get_fill_color>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_fill_color:1 of
msgid "Get the fill color of the specified image."
msgstr "获取指定图片的填充色。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_fill_style <easygraphics.get_fill_style>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_fill_style:1 of
msgid "Get fill style of the specified image."
msgstr "获取指定图片的填充样式。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_font <easygraphics.get_font>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_font:1 of
msgid "Get font of the specified image."
msgstr "获取指定图片的字体。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_font_size <easygraphics.get_font_size>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_font_size:1 of
msgid "Get font size of the specified image."
msgstr "获取指定图片的字体大小。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_height <easygraphics.get_height>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_height:1 of
msgid "Get height of the specified image."
msgstr "获取指定图片的高度。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_line_style <easygraphics.get_line_style>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_line_style:1 of
msgid "Get line style of the specified image."
msgstr "获取指定图片的（画笔）线型。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_line_width <easygraphics.get_line_width>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_line_width:1 of
#, fuzzy
msgid "Get line width (thinkness) of the specified image."
msgstr "获取指定图片的（画笔）线宽。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_width <easygraphics.get_width>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_width:1 of
#, fuzzy
msgid "Get width of the specified image."
msgstr "获取指定图片的宽度。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_write_mode <easygraphics.get_write_mode>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_x <easygraphics.get_x>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_x:1 of
msgid "Get the x coordinate value of the current drawing position (x,y)."
msgstr "获取指定图片\"当前绘图位置\"的横坐标x。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`get_y <easygraphics.get_y>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.get_y:1 of
msgid "Get the y coordinate value of the current drawing position (x,y)."
msgstr "获取指定图片\"当前绘图位置\"的纵坐标y。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`reset_view_port <easygraphics.reset_view_port>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.reset_view_port:1 of
msgid "Reset the view port setting."
msgstr "恢复缺省的视口设置。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`reset_window <easygraphics.reset_window>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.reset_window:1 of
msgid "Reset/remove the logical window."
msgstr "恢复缺省的逻辑窗口设置。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`restore_settings <easygraphics.restore_settings>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.restore_settings:1 of
msgid "Restore previously saved drawing settings."
msgstr "恢复之前保存的绘图设置。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`save_settings <easygraphics.save_settings>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.save_settings:1 of
msgid "Save current drawing settings."
msgstr "保存当前的绘图设置。"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`set_background_color <easygraphics.set_background_color>`\\ "
"\\(color\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_background_color:1 of
msgid "Set and change the background color."
msgstr "设置和修改背景色。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_caption <easygraphics.set_caption>`\\ \\(title\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_caption:1 of
msgid "Set the graph window's caption"
msgstr "设置绘图窗口的标题"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`set_clip_rect <easygraphics.set_clip_rect>`\\ \\(left\\, top\\, "
"right\\, bottom\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_clip_rect:1 of
msgid "Set the clip rect."
msgstr "设置矩形剪裁区域。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_clipping <easygraphics.set_clipping>`\\ \\(clipping\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_clipping:1 of
msgid "Set clipping."
msgstr "设置是否启用剪裁。"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_color <easygraphics.set_color>`\\ \\(color\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_color:1 of
msgid "Set the foreground (drawing) color of the specified image."
msgstr "设置指定图片的前景色。"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`set_composition_mode <easygraphics.set_composition_mode>`\\ "
"\\(mode\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_composition_mode:1
#: easygraphics.set_write_mode:1 of
#, fuzzy
msgid "Get composition mode of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_fill_color <easygraphics.set_fill_color>`\\ \\(color\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_fill_color:1 of
#, fuzzy
msgid "Set the fill (drawing) color of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_fill_style <easygraphics.set_fill_style>`\\ \\(style\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_fill_style:1 of
#, fuzzy
msgid "Set fill style of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_font <easygraphics.set_font>`\\ \\(font\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_font:1 of
#, fuzzy
msgid "Set font of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_font_size <easygraphics.set_font_size>`\\ \\(size\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_font_size:1 of
#, fuzzy
msgid "Set font size of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`set_line_style <easygraphics.set_line_style>`\\ \\(line\\_style\\, "
"image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_line_style:1 of
#, fuzzy
msgid "Set line style of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_line_width <easygraphics.set_line_width>`\\ \\(width\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_line_width:1 of
#, fuzzy
msgid "Set line width (thickness) of the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`set_view_port <easygraphics.set_view_port>`\\ \\(left\\, top\\, "
"right\\, bottom\\, ...\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_view_port:1 of
#, fuzzy
msgid "Set the view port of the the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:75:<autosummary>:1
msgid ""
":obj:`set_window <easygraphics.set_window>`\\ \\(origin\\_x\\, "
"origin\\_y\\, width\\, ...\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.set_window:1 of
msgid "Set the logical drawing window."
msgstr ""

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`set_write_mode <easygraphics.set_write_mode>`\\ \\(mode\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`text_height <easygraphics.text_height>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.text_height:1 of
msgid "Return height of the text (font height)."
msgstr ""

#: ../../api.rst:75:<autosummary>:1
msgid ":obj:`text_width <easygraphics.text_width>`\\ \\(text\\, image\\)"
msgstr ""

#: ../../api.rst:75:<autosummary>:1 easygraphics.text_width:1 of
msgid "Return width of the text."
msgstr ""

#: ../../api.rst:77
msgid "Basic Drawing"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`arc <easygraphics.arc>`\\ \\(x\\, y\\, start\\_angle\\, "
"end\\_angle\\, radius\\_x\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid "Draw an elliptical arc from start_angle to end_angle."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`bezier <easygraphics.bezier>`\\ \\(control\\_points\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.bezier:1
#: easygraphics.draw_bezier:1 of
msgid "Draw a cubic bezier curve."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`chord <easygraphics.chord>`\\ \\(x\\, y\\, start\\_angle\\, "
"end\\_angle\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid "Draw an elliptical chord outline from start_angle to end_angle."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`circle <easygraphics.circle>`\\ \\(x\\, y\\, r\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.circle:1 of
msgid "Draw a circle outline centered at (x,y) with radius r."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`clear_device <easygraphics.clear_device>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.clear_device:1 of
msgid "Clear the image to show the background."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`clear_view_port <easygraphics.clear_view_port>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.clear_view_port:1 of
msgid "clear view port to show the background."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_arc <easygraphics.draw_arc>`\\ \\(x\\, y\\, start\\_angle\\, "
"end\\_angle\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_bezier <easygraphics.draw_bezier>`\\ \\(control\\_points\\, "
"image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_chord <easygraphics.draw_chord>`\\ \\(x\\, y\\, "
"start\\_angle\\, end\\_angle\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`draw_circle <easygraphics.draw_circle>`\\ \\(x\\, y\\, r\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_circle:1 of
msgid "Draw a circle centered at (x,y) with radius r."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_ellipse <easygraphics.draw_ellipse>`\\ \\(x\\, y\\, "
"radius\\_x\\, radius\\_y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_ellipse:1 of
msgid ""
"Draw an ellipse centered at (x,y) , radius on x-axis is radius_x, radius "
"on y-axis is radius_y."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_line <easygraphics.draw_line>`\\ \\(x1\\, y1\\, x2\\, y2\\, "
"image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_line:1
#: easygraphics.line:1 of
#, fuzzy
msgid "Draw a line from (x1,y1) to (x2,y2) on the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`draw_lines <easygraphics.draw_lines>`\\ \\(points\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_lines:1
#: easygraphics.lines:1 of
msgid "Draw lines"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_pie <easygraphics.draw_pie>`\\ \\(x\\, y\\, start\\_angle\\, "
"end\\_angle\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid "Draw an elliptical pie from start_angle to end_angle."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`draw_point <easygraphics.draw_point>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_point:1 of
#, fuzzy
msgid "Draw a point at (x,y) on the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_poly_line <easygraphics.draw_poly_line>`\\ \\(end\\_points\\, "
"image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_poly_line:1
#: easygraphics.poly_line:1 of
msgid "Draw poly lines."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`draw_polygon <easygraphics.draw_polygon>`\\ \\(vertices\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_polygon:1 of
msgid "Draw a polygon."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_rect <easygraphics.draw_rect>`\\ \\(left\\, top\\, right\\, "
"bottom\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_rect:1
#: easygraphics.fill_rect:1 of
msgid ""
"Draws a rectangle with upper left corner at (left, top) and lower right "
"corner at (right,bottom)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_rect_text <easygraphics.draw_rect_text>`\\ \\(x\\, y\\, "
"width\\, height\\, \\*args\\[\\, ...\\]\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_rect_text:1 of
msgid "Print the given texts in the specified rectangle area."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_rounded_rect <easygraphics.draw_rounded_rect>`\\ \\(left\\, "
"top\\, right\\, bottom\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
"Draws a rounded rectangle with upper left corner at (left, top) , lower "
"right corner at (right,bottom)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`draw_text <easygraphics.draw_text>`\\ \\(x\\, y\\, \\*args\\[\\, "
"sep\\]\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.draw_text:1 of
msgid "Prints the given texts beginning at the given position (x,y)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`ellipse <easygraphics.ellipse>`\\ \\(x\\, y\\, radius\\_x\\, "
"radius\\_y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.ellipse:1 of
msgid ""
"Draw an ellipse outline centered at (x,y) , radius on x-axis is radius_x,"
" radius on y-axis is radius_y."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`fill_chord <easygraphics.fill_chord>`\\ \\(x\\, y\\, "
"start\\_angle\\, end\\_angle\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`fill_circle <easygraphics.fill_circle>`\\ \\(x\\, y\\, r\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.fill_circle:1 of
msgid "Fill a circle centered at (x,y) with radius r."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`fill_ellipse <easygraphics.fill_ellipse>`\\ \\(x\\, y\\, "
"radius\\_x\\, radius\\_y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.fill_ellipse:1 of
msgid ""
"Fill an ellipse centered at (x,y) , radius on x-axis is radius_x, radius "
"on y-axis is radius_y."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`fill_pie <easygraphics.fill_pie>`\\ \\(x\\, y\\, start\\_angle\\, "
"end\\_angle\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid "Fill an elliptical pie from start_angle to end_angle."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`fill_polygon <easygraphics.fill_polygon>`\\ \\(vertices\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.fill_polygon:1 of
msgid "fill polygon"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`fill_rect <easygraphics.fill_rect>`\\ \\(left\\, top\\, right\\, "
"bottom\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`fill_rounded_rect <easygraphics.fill_rounded_rect>`\\ \\(left\\, "
"top\\, right\\, bottom\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
"Fill a rounded rectangle with upper left corner at (left, top) , lower "
"right corner at (right,bottom)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`flood_fill <easygraphics.flood_fill>`\\ \\(x\\, y\\, "
"border\\_color\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.flood_fill:1 of
msgid ""
"Flood fill the image starting from(x,y) and ending at borders with "
"border_color."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`get_pixel <easygraphics.get_pixel>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.get_pixel:1 of
#, fuzzy
msgid "Get a pixel's color on the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`line <easygraphics.line>`\\ \\(x1\\, y1\\, x2\\, y2\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`line_rel <easygraphics.line_rel>`\\ \\(dx\\, dy\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.line_rel:1 of
msgid ""
"Draw a line from the current drawing position (x,y) to (x+dx,y+dy),     "
"then set the drawing position is set to (x+dx,y+dy)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`line_to <easygraphics.line_to>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.line_to:1 of
msgid ""
"Draw a line from the current drawing position to (x,y), then set the "
"drawing position is set to (x,y)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`lines <easygraphics.lines>`\\ \\(points\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`move_rel <easygraphics.move_rel>`\\ \\(dx\\, dy\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.move_rel:1 of
msgid "Move the drawing position by (dx,dy)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`move_to <easygraphics.move_to>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.move_to:1 of
msgid "Set the drawing position to (x,y)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`pie <easygraphics.pie>`\\ \\(x\\, y\\, start\\_angle\\, "
"end\\_angle\\, radius\\_x\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid "Draw an elliptical pie outline from start_angle to end_angle."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`poly_line <easygraphics.poly_line>`\\ \\(end\\_points\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`polygon <easygraphics.polygon>`\\ \\(vertices\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.polygon:1 of
msgid "Draw polygon outline."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ":obj:`put_pixel <easygraphics.put_pixel>`\\ \\(x\\, y\\, color\\, image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.put_pixel:1 of
#, fuzzy
msgid "Set a pixel's color on the specified image."
msgstr "为指定的image设置**线形**"

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`rect <easygraphics.rect>`\\ \\(left\\, top\\, right\\, bottom\\, "
"image\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1 easygraphics.rect:1 of
msgid ""
"Draws a rectangle outline with upper left corner at (left, top) and lower"
" right corner at (right,bottom)."
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
":obj:`rounded_rect <easygraphics.rounded_rect>`\\ \\(left\\, top\\, "
"right\\, bottom\\, ...\\)"
msgstr ""

#: ../../api.rst:127:<autosummary>:1
msgid ""
"Draws a rounded rectangle outline with upper left corner at (left, top) ,"
" lower right corner at (right,bottom)."
msgstr ""

#: ../../api.rst:129
msgid "Transform"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`flip <easygraphics.flip>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1 easygraphics.flip:1 easygraphics.mirror:1
#: easygraphics.reflect:1 of
msgid "Reflect the coordinates against the line passing (0,0) and (x,y)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`mirror <easygraphics.mirror>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`reflect <easygraphics.reflect>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`reset_transform <easygraphics.reset_transform>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1 easygraphics.reset_transform:1 of
msgid "Reset all transforms (translate/rotate/scale)."
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`rotate <easygraphics.rotate>`\\ \\(degree\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1 easygraphics.rotate:1 of
msgid "Rotates the coordinate system the given angle (in degree) clockwise."
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`scale <easygraphics.scale>`\\ \\(sx\\, sy\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1 easygraphics.scale:1 of
msgid "Scales the coordinate system by (sx, sy)."
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`set_origin <easygraphics.set_origin>`\\ \\(x\\, y\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1 easygraphics.set_origin:1 of
msgid "Set the drawing systems' origin(0,0) to (x,y)."
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`shear <easygraphics.shear>`\\ \\(sh\\, sv\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1 easygraphics.shear:1 easygraphics.skew:1
#: of
msgid "Shear (skew) the coordinates around the origin by sh,sv"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ":obj:`skew <easygraphics.skew>`\\ \\(sh\\, sv\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid ""
":obj:`translate <easygraphics.translate>`\\ \\(offset\\_x\\, "
"offset\\_y\\, image\\)"
msgstr ""

#: ../../api.rst:145:<autosummary>:1
msgid "Translates the coordinate system by the given offset; i.e."
msgstr ""

#: ../../api.rst:147
msgid "Animation"
msgstr ""

#: ../../api.rst:159:<autosummary>:1
msgid ":obj:`delay <easygraphics.delay>`\\ \\(milliseconds\\)"
msgstr ""

#: ../../api.rst:159:<autosummary>:1 easygraphics.delay:1 of
msgid "Delay the programm for specified milliseconds"
msgstr ""

#: ../../api.rst:159:<autosummary>:1
msgid ":obj:`delay_fps <easygraphics.delay_fps>`\\ \\(fps\\)"
msgstr ""

#: ../../api.rst:159:<autosummary>:1 easygraphics.delay_fps:1 of
msgid "Delay the program to control fps (Frame pers seconds)."
msgstr ""

#: ../../api.rst:159:<autosummary>:1
msgid ""
":obj:`delay_jfps <easygraphics.delay_jfps>`\\ \\(fps\\[\\, "
"max\\_skip\\_count\\]\\)"
msgstr ""

#: ../../api.rst:159:<autosummary>:1 easygraphics.delay_jfps:1 of
msgid "Delay to control fps with frame skiping."
msgstr ""

#: ../../api.rst:159:<autosummary>:1
msgid ":obj:`get_render_mode <easygraphics.get_render_mode>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:159:<autosummary>:1 easygraphics.get_render_mode:1
#: easygraphics.set_render_mode:1 of
msgid "Set render mode of the graphics window."
msgstr ""

#: ../../api.rst:159:<autosummary>:1
msgid ":obj:`is_run <easygraphics.is_run>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:159:<autosummary>:1 easygraphics.is_run:1 of
msgid "Test if the graphics system is running."
msgstr ""

#: ../../api.rst:159:<autosummary>:1
msgid ":obj:`set_render_mode <easygraphics.set_render_mode>`\\ \\(mode\\)"
msgstr ""

#: ../../api.rst:161
msgid "Image Processing"
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ""
":obj:`capture_screen <easygraphics.capture_screen>`\\ \\(left\\, top\\, "
"right\\, bottom\\, ...\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.capture_screen:1 of
msgid "Caputre specified region on the graphics windows to target image."
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ":obj:`close_image <easygraphics.close_image>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.close_image:1 of
msgid "Close the specied image :param image: the image to be closed"
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ":obj:`create_image <easygraphics.create_image>`\\ \\(width\\, height\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.create_image:1 of
msgid "Create a new image."
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ""
":obj:`draw_image <easygraphics.draw_image>`\\ \\(x\\, y\\, src\\_image\\,"
" src\\_x\\, src\\_y\\, ...\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.draw_image:1
#: easygraphics.put_image:1 of
msgid ""
"Copy part of the source image (src_image) to the destination image (self)"
" at (x,y)."
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ":obj:`get_target <easygraphics.get_target>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.get_target:1 of
msgid "Get the target image for drawing on."
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ":obj:`load_image <easygraphics.load_image>`\\ \\(filename\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.load_image:1 of
msgid "Load a image from the file"
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ""
":obj:`put_image <easygraphics.put_image>`\\ \\(x\\, y\\, src\\_image\\, "
"src\\_x\\, src\\_y\\, ...\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ""
":obj:`save_image <easygraphics.save_image>`\\ \\(filename\\[\\, "
"with\\_background\\]\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.save_image:1 of
msgid "Save image to file."
msgstr ""

#: ../../api.rst:175:<autosummary>:1
msgid ":obj:`set_target <easygraphics.set_target>`\\ \\(image\\)"
msgstr ""

#: ../../api.rst:175:<autosummary>:1 easygraphics.set_target:1 of
msgid "Set the target image for drawing on."
msgstr ""

#: ../../api.rst:177
msgid "Keyboard and Mouse"
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ""
":obj:`contains_left_button <easygraphics.contains_left_button>`\\ "
"\\(buttons\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.contains_left_button:1 of
msgid "Test if the buttons contains the left mouse button."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ""
":obj:`contains_mid_button <easygraphics.contains_mid_button>`\\ "
"\\(buttons\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.contains_mid_button:1 of
msgid "Test if the buttons contains the middle mouse button."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ""
":obj:`contains_right_button <easygraphics.contains_right_button>`\\ "
"\\(buttons\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.contains_right_button:1 of
msgid "Test if the buttons contains the right mouse button."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`get_char <easygraphics.get_char>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.get_char:1 of
msgid "Get the ascii char inputted by keyboard."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`get_click <easygraphics.get_click>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.get_click:1 of
msgid "Get the mouse click message."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`get_key <easygraphics.get_key>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.get_key:1 of
msgid "Get the key inputted by keyboard."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`get_mouse_msg <easygraphics.get_mouse_msg>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.get_mouse_msg:1 of
msgid "Get the mouse message."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`has_kb_hit <easygraphics.has_kb_hit>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid "See if any ascii char key is hitted in the last 100 ms."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`has_kb_msg <easygraphics.has_kb_msg>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid "See if any key is hitted in the last 100 ms."
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`has_mouse_msg <easygraphics.has_mouse_msg>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.has_mouse_msg:1 of
msgid ""
"see if there's any mouse message(event) in the last 100 ms use it with "
"get_mouse_msg()"
msgstr ""

#: ../../api.rst:193:<autosummary>:1
msgid ":obj:`pause <easygraphics.pause>`\\ \\(\\)"
msgstr ""

#: ../../api.rst:193:<autosummary>:1 easygraphics.pause:1 of
msgid "Pause the grogram and wait for mouse clicking or keyboard hitting."
msgstr ""

#: ../../api.rst:195
msgid "Color & utilities"
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ":obj:`cart2pol <easygraphics.cart2pol>`\\ \\(x\\, y\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1 easygraphics.cart2pol:1 of
msgid "Transform a point from cartesian coordinates to polar coordinates."
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ""
":obj:`color_cmyk <easygraphics.color_cmyk>`\\ \\(c\\, m\\, y\\, k\\, "
"alpha\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1 easygraphics.color_cmyk:1 of
msgid "Create a color with CMYK color values c,m,y,k."
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ":obj:`color_hsv <easygraphics.color_hsv>`\\ \\(h\\, s\\, v\\, alpha\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1 easygraphics.color_hsv:1 of
msgid "Create a color with HSV color values h,s,v."
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ""
":obj:`color_rgb <easygraphics.color_rgb>`\\ \\(red\\, green\\, blue\\, "
"alpha\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1 easygraphics.color_rgb:1
#: easygraphics.rgb:1 of
msgid "Create a color with RGB color values r,g,b."
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ":obj:`pol2cart <easygraphics.pol2cart>`\\ \\(rho\\, theta\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1 easygraphics.pol2cart:1 of
msgid "Transform a point from polar coordinates to cartesian coordinates."
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ":obj:`rgb <easygraphics.rgb>`\\ \\(red\\, green\\, blue\\, alpha\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1
msgid ":obj:`to_alpha <easygraphics.to_alpha>`\\ \\(new\\_color\\, alpha\\)"
msgstr ""

#: ../../api.rst:208:<autosummary>:1 easygraphics.to_alpha:1 of
msgid "Get new color based on the given color and alpha"
msgstr ""

#: ../../api.rst:210
msgid "Constants"
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`Color <easygraphics.Color>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1 easygraphics.Color:1 of
msgid "These are the predefined Color constants."
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`CompositionMode <easygraphics.CompositionMode>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1 easygraphics.CompositionMode:1 of
msgid "Defines the modes supported for digital image compositing."
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`FillStyle <easygraphics.FillStyle>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1 easygraphics.FillStyle:1 of
msgid "These are the fille style used by draw and fill functions."
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`LineStyle <easygraphics.LineStyle>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid "These are the line styles that can be drawn."
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`MouseMessageType <easygraphics.MouseMessageType>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1 easygraphics.MouseMessageType:1 of
msgid "These are the mouse message types."
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`RenderMode <easygraphics.RenderMode>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1 easygraphics.RenderMode:1 of
msgid "These are the graphics window drawing mode."
msgstr ""

#: ../../api.rst:222:<autosummary>:1
msgid ":obj:`TextFlags <easygraphics.TextFlags>`\\"
msgstr ""

#: ../../api.rst:222:<autosummary>:1 easygraphics.TextFlags:1 of
msgid "These are the text drawing flags."
msgstr ""

#: ../../api.rst:224
msgid "API Details"
msgstr ""

#: easygraphics.Color:1 easygraphics.CompositionMode:1 easygraphics.FillStyle:1
#: easygraphics.LineStyle:1 easygraphics.MouseMessageType:1
#: easygraphics.RenderMode:1 easygraphics.TextFlags:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: easygraphics.Color.BLACK:1 of
msgid "Black color"
msgstr ""

#: easygraphics.Color.BLUE:1 of
msgid "Blue"
msgstr ""

#: easygraphics.Color.BROWN:1 of
msgid "brown"
msgstr ""

#: easygraphics.Color.CYAN:1 of
msgid "cyan"
msgstr ""

#: easygraphics.Color.DARK_BLUE:1 of
msgid "dark blue"
msgstr ""

#: easygraphics.Color.DARK_CYAN:1 of
msgid "dark cyan"
msgstr ""

#: easygraphics.Color.DARK_GRAY:1 of
msgid "Dark Gray color"
msgstr ""

#: easygraphics.Color.DARK_GREEN:1 of
msgid "dark green"
msgstr ""

#: easygraphics.Color.DARK_MAGENTA:1 of
msgid "dark magenta"
msgstr ""

#: easygraphics.Color.DARK_RED:1 of
msgid "dark red"
msgstr ""

#: easygraphics.Color.DARK_YELLOW:1 of
msgid "dark yellow"
msgstr ""

#: easygraphics.Color.GREEN:1 of
msgid "Green"
msgstr ""

#: easygraphics.Color.LIGHT_BLUE:1 of
msgid "Light blue"
msgstr ""

#: easygraphics.Color.LIGHT_CYAN:1 of
msgid "light cyan"
msgstr ""

#: easygraphics.Color.LIGHT_GRAY:1 of
msgid "Light Gray"
msgstr ""

#: easygraphics.Color.LIGHT_GREEN:1 of
msgid "Light green"
msgstr ""

#: easygraphics.Color.LIGHT_MAGENTA:1 of
msgid "light magenta"
msgstr ""

#: easygraphics.Color.LIGHT_RED:1 of
msgid "light red"
msgstr ""

#: easygraphics.Color.LIGHT_YELLOW:1 of
msgid "light yellow"
msgstr ""

#: easygraphics.Color.MAGENTA:1 of
msgid "magenta"
msgstr ""

#: easygraphics.Color.RED:1 of
msgid "red"
msgstr ""

#: easygraphics.Color.TRANSPARENT:1 of
msgid "Transparent"
msgstr ""

#: easygraphics.Color.WHITE:1 of
msgid "White"
msgstr ""

#: easygraphics.Color.YELLOW:1 of
msgid "yellow"
msgstr ""

#: easygraphics.FillStyle.NULL_FILL:1 of
msgid "Not fill at all. For example, draw_circle() will not fill."
msgstr ""

#: easygraphics.FillStyle.SOLID_FILL:1 of
msgid "Fill with solid color. see set_fill_color()."
msgstr ""

#: easygraphics.LineStyle:1 of
msgid "These are the line styles that can be drawn. The styles are:"
msgstr ""

#: easygraphics.LineStyle:5 of
msgid "|qpen-solid|"
msgstr ""

#: easygraphics.LineStyle:6 of
msgid "|qpen-dash|"
msgstr ""

#: easygraphics.LineStyle:7 of
msgid "|qpen-dot|"
msgstr ""

#: easygraphics.LineStyle:8 of
#, fuzzy
msgid "LineStyle.SOLID_LINE"
msgstr "线型"

#: easygraphics.LineStyle:9 of
#, fuzzy
msgid "LineStyle.DASH_LINE"
msgstr "线型"

#: easygraphics.LineStyle:10 of
#, fuzzy
msgid "LineStyle.DOT_LINE"
msgstr "线型"

#: easygraphics.LineStyle:11 of
msgid "|qpen-dashdot|"
msgstr ""

#: easygraphics.LineStyle:12 of
msgid "|qpen-dashdotdot|"
msgstr ""

#: easygraphics.LineStyle:14 of
msgid "LineStyle.DASH_DOT_LINE"
msgstr ""

#: easygraphics.LineStyle:15 of
msgid "LineStyle.DASH_DOT_DOT_LINE"
msgstr ""

#: easygraphics.LineStyle:16 of
#, fuzzy
msgid "LineStyle.NO_PEN"
msgstr "线型"

#: easygraphics.LineStyle.DASH_DOT_DOT_LINE:1 of
msgid "One dash, two dots, one dash, two dots."
msgstr ""

#: easygraphics.LineStyle.DASH_DOT_LINE:1 of
msgid "Alternate dots and dashes."
msgstr ""

#: easygraphics.LineStyle.DASH_LINE:1 of
msgid "Dashes separated by a few pixels."
msgstr ""

#: easygraphics.LineStyle.DOT_LINE:1 of
msgid "Dots separated by a few pixels."
msgstr ""

#: easygraphics.LineStyle.NO_PEN:1 of
msgid ""
"no line at all. For example, draw_circle fills but does not draw any "
"boundary line."
msgstr ""

#: easygraphics.LineStyle.SOLID_LINE:1 of
msgid "A plain line"
msgstr ""

#: easygraphics.RenderMode.RENDER_AUTO:1 of
msgid "The graphics window is updated after each drawn."
msgstr ""

#: easygraphics.RenderMode.RENDER_MANUAL:1 of
msgid "The graphics window only updated after functions that wait or delay."
msgstr ""

#: easygraphics.CompositionMode:3 of
msgid ""
"Composition modes are used to specify how the pixels in one image, the "
"source, are merged     with the pixel in another image, the destination."
msgstr ""

#: easygraphics.CompositionMode:5 of
msgid ""
"Please note that the bitwise operation modes are not supported for pens "
"and brushes with alpha components."
msgstr ""

#: easygraphics.CompositionMode.CLEAR:1 of
msgid ""
"(Alpha Composition) The pixels in the destination are cleared (set to "
"fully transparent) independent of the source."
msgstr ""

#: easygraphics.CompositionMode.CLEAR_DEST:1 of
msgid ""
"(Raster Op) The pixels in the destination are cleared (set to 0) "
"independent of the source."
msgstr ""

#: easygraphics.CompositionMode.COLOR_BURN:1 of
msgid ""
"(Blend mode) The destination color is darkened to reflect the source "
"color. A white source color leaves the destination color unchanged."
msgstr ""

#: easygraphics.CompositionMode.COLOR_DODGE:1 of
msgid ""
"(Blend mode) The destination color is brightened to reflect the source "
"color. A black source color leaves the destination color unchanged."
msgstr ""

#: easygraphics.CompositionMode.DARKEN:1 of
msgid "(Blend mode) The darker of the source and destination colors is selected."
msgstr ""

#: easygraphics.CompositionMode.DESTINATION:1 of
msgid ""
"(Alpha Composition) The output is the destination pixel. This means that "
"the blending has no effect."
msgstr ""

#: easygraphics.CompositionMode.DESTINATION_AT_TOP:1 of
msgid ""
"(Alpha Composition) The destination pixel is blended on top of the "
"source, with the alpha of the destination pixel is reduced by the alpha "
"of the destination pixel."
msgstr ""

#: easygraphics.CompositionMode.DESTINATION_IN:1 of
msgid ""
"(Alpha Composition) The output is the destination, where the alpha is "
"reduced by that of the source."
msgstr ""

#: easygraphics.CompositionMode.DESTINATION_OUT:1 of
msgid ""
"(Alpha Composition) The output is the destination, where the alpha is "
"reduced by the inverse of the source."
msgstr ""

#: easygraphics.CompositionMode.DESTINATION_OVER:1 of
msgid ""
"(Alpha Composition) The alpha of the destination is used to blend it on "
"top of the source pixels."
msgstr ""

#: easygraphics.CompositionMode.DIFFERENCE:1 of
msgid ""
"(Blend mode) Subtracts the darker of the colors from the lighter. "
"Painting with white inverts the destination color, whereas painting with "
"black leaves the destination color unchanged."
msgstr ""

#: easygraphics.CompositionMode.EXCLUSION:1 of
msgid ""
"(Blend mode) Similar to DIFFERENCE, but with a lower contrast. Painting "
"with white inverts the destination color, whereas painting with black "
"leaves the destination color unchanged."
msgstr ""

#: easygraphics.CompositionMode.HARD_LIGHT:1 of
msgid ""
"(Blend mode) Multiplies or screens the colors depending on the source "
"color. A light source color will lighten the destination color, whereas a"
" dark source color will darken the destination color."
msgstr ""

#: easygraphics.CompositionMode.LIGHTEN:1 of
msgid "(Blend mode) he lighter of the source and destination colors is selected."
msgstr ""

#: easygraphics.CompositionMode.MULTIPLY:1 of
msgid ""
"(Blend mode) The output is the source color multiplied by the "
"destination. Multiplying a color with white leaves the color unchanged, "
"while multiplying a color with black produces black."
msgstr ""

#: easygraphics.CompositionMode.NOT_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the destination pixels are "
"inverted (NOT dst)."
msgstr ""

#: easygraphics.CompositionMode.NOT_SRC:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the source pixels are inverted"
" (NOT src)."
msgstr ""

#: easygraphics.CompositionMode.NOT_SRC_AND_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the source is inverted and "
"then AND'ed with the destination ((NOT src) AND dst)."
msgstr ""

#: easygraphics.CompositionMode.NOT_SRC_AND_NOT_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise NOR operation on the source and destination "
"pixels ((NOT src) AND (NOT dst))."
msgstr ""

#: easygraphics.CompositionMode.NOT_SRC_OR_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the source is inverted and "
"then OR'ed with the destination ((NOT src) OR dst)."
msgstr ""

#: easygraphics.CompositionMode.NOT_SRC_OR_NOT_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise NAND operation on the source and destination "
"pixels ((NOT src) OR (NOT dst))."
msgstr ""

#: easygraphics.CompositionMode.NOT_SRC_XOR_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the source pixels are inverted"
" and then XOR'ed with the destination ((NOT src) XOR dst)."
msgstr ""

#: easygraphics.CompositionMode.OVERLAY:1 of
msgid ""
"(Blend mode) Multiplies or screens the colors depending on the "
"destination color. The destination color is mixed with the source color "
"to reflect the lightness or darkness of the destination."
msgstr ""

#: easygraphics.CompositionMode.Plus:1 of
msgid ""
"(Blend mode) Both the alpha and color of the source and destination "
"pixels are added together."
msgstr ""

#: easygraphics.CompositionMode.SCREEN:1 of
msgid ""
"(Blend mode) The source and destination colors are inverted and then "
"multiplied. Screening a color with white produces white, whereas "
"screening a color with black leaves the color unchanged."
msgstr ""

#: easygraphics.CompositionMode.SET_DEST:1 of
msgid ""
"(Raster Op) The pixels in the destination are set (set to 1) independent "
"of the source."
msgstr ""

#: easygraphics.CompositionMode.SOFT_LIGHT:1 of
msgid ""
"(Blend mode) Darkens or lightens the colors depending on the source "
"color. Similar to HARD_LIGHT."
msgstr ""

#: easygraphics.CompositionMode.SOURCE:1 of
msgid "(Alpha Composition) The output is the source pixel."
msgstr ""

#: easygraphics.CompositionMode.SOURCE_AT_TOP:1 of
msgid ""
"(Alpha Composition) The source pixel is blended on top of the "
"destination, with the alpha of the source pixel reduced by the alpha of "
"the destination pixel."
msgstr ""

#: easygraphics.CompositionMode.SOURCE_IN:1 of
msgid ""
"(Alpha Composition) The output is the source, where the alpha is reduced "
"by that of the destination."
msgstr ""

#: easygraphics.CompositionMode.SOURCE_OUT:1 of
msgid ""
"(Alpha Composition) The output is the source, where the alpha is reduced "
"by the inverse of destination."
msgstr ""

#: easygraphics.CompositionMode.SOURCE_OVER:1 of
msgid ""
"(Alpha Composition) This is the default mode. The alpha of the source is "
"used to blend the pixel on top of the destination."
msgstr ""

#: easygraphics.CompositionMode.SRC_AND_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise AND operation on the source and destination "
"pixels (src AND dst)."
msgstr ""

#: easygraphics.CompositionMode.SRC_AND_NOT_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the source is AND'ed with the "
"inverted destination pixels (src AND (NOT dst))."
msgstr ""

#: easygraphics.CompositionMode.SRC_OR_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise OR operation on the source and destination "
"pixels (src OR dst)."
msgstr ""

#: easygraphics.CompositionMode.SRC_OR_NOT_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise operation where the source is OR'ed with the "
"inverted destination pixels (src OR (NOT dst))."
msgstr ""

#: easygraphics.CompositionMode.SRC_XOR_DEST:1 of
msgid ""
"(Raster Op) Does a bitwise XOR operation on the source and destination "
"pixels (src XOR dst)."
msgstr ""

#: easygraphics.CompositionMode.XOR:1 of
msgid ""
"(Alpha Composition) The source, whose alpha is reduced with the inverse "
"of the destination alpha, is merged with the destination, whose alpha is "
"reduced by the inverse of the source alpha. CompositionMode_Xor is not "
"the same as the bitwise Xor."
msgstr ""

#: easygraphics.TextFlags.ALIGN_BOTTOM:1 of
msgid "Aligns with the bottom."
msgstr ""

#: easygraphics.TextFlags.ALIGN_CENTER:1 of
msgid "Centers in both dimensions."
msgstr ""

#: easygraphics.TextFlags.ALIGN_HCENTER:1 of
msgid "Centers horizontally in the available space."
msgstr ""

#: easygraphics.TextFlags.ALIGN_JUSTIFY:1 of
msgid "Justifies the text in the available space."
msgstr ""

#: easygraphics.TextFlags.ALIGN_LEFT:1 of
msgid "Aligns with the left edge."
msgstr ""

#: easygraphics.TextFlags.ALIGN_RIGHT:1 of
msgid "Aligns with the right edge."
msgstr ""

#: easygraphics.TextFlags.ALIGN_TOP:1 of
msgid "Aligns with the top."
msgstr ""

#: easygraphics.TextFlags.ALIGN_VCENTER:1 of
msgid "Centers vertically in the available space."
msgstr ""

#: easygraphics.TextFlags.TEXT_DONT_CLIP:1 of
msgid "If it's impossible to stay within the given bounds, it prints outside."
msgstr ""

#: easygraphics.TextFlags.TEXT_EXPAND_TABS:1 of
msgid "Makes the U+0009 (ASCII tab) character move to the next tab stop."
msgstr ""

#: easygraphics.TextFlags.TEXT_SINGLE_LINE:1 of
msgid "Treats all whitespace as spaces and prints just one line."
msgstr ""

#: easygraphics.TextFlags.TEXT_WORD_WRAP:1 of
msgid "Breaks lines at appropriate points, e.g. at word boundaries."
msgstr ""

#: easygraphics.set_line_style:3 of
msgid ""
"The line style will be used when drawing lines and shape outlines. "
"Possible value is one of the consts defined in LineStyle."
msgstr "**线型**用于画线和形状轮廓。在LineStyle中定义了可用的线型常量，如LineStyle.SOLID_LINE等"

#: easygraphics.arc easygraphics.bezier easygraphics.capture_screen
#: easygraphics.cart2pol easygraphics.chord easygraphics.circle
#: easygraphics.clear_device easygraphics.clear_view_port
#: easygraphics.color_cmyk easygraphics.color_hsv easygraphics.color_rgb
#: easygraphics.contains_left_button easygraphics.contains_mid_button
#: easygraphics.contains_right_button easygraphics.create_image
#: easygraphics.delay easygraphics.delay_fps easygraphics.delay_jfps
#: easygraphics.draw_arc easygraphics.draw_bezier easygraphics.draw_chord
#: easygraphics.draw_circle easygraphics.draw_ellipse easygraphics.draw_image
#: easygraphics.draw_line easygraphics.draw_lines easygraphics.draw_pie
#: easygraphics.draw_point easygraphics.draw_poly_line
#: easygraphics.draw_polygon easygraphics.draw_rect easygraphics.draw_rect_text
#: easygraphics.draw_rounded_rect easygraphics.draw_text easygraphics.ellipse
#: easygraphics.fill_chord easygraphics.fill_circle easygraphics.fill_ellipse
#: easygraphics.fill_pie easygraphics.fill_polygon easygraphics.fill_rect
#: easygraphics.fill_rounded_rect easygraphics.flip easygraphics.flood_fill
#: easygraphics.get_background_color easygraphics.get_color
#: easygraphics.get_composition_mode easygraphics.get_drawing_pos
#: easygraphics.get_fill_color easygraphics.get_fill_style
#: easygraphics.get_font easygraphics.get_font_size easygraphics.get_height
#: easygraphics.get_line_style easygraphics.get_line_width
#: easygraphics.get_pixel easygraphics.get_width easygraphics.get_write_mode
#: easygraphics.get_x easygraphics.get_y easygraphics.init_graph
#: easygraphics.line easygraphics.line_rel easygraphics.line_to
#: easygraphics.lines easygraphics.load_image easygraphics.mirror
#: easygraphics.move_rel easygraphics.move_to easygraphics.pie
#: easygraphics.pol2cart easygraphics.poly_line easygraphics.polygon
#: easygraphics.put_image easygraphics.put_pixel easygraphics.rect
#: easygraphics.reflect easygraphics.reset_transform
#: easygraphics.reset_view_port easygraphics.reset_window
#: easygraphics.restore_settings easygraphics.rgb easygraphics.rotate
#: easygraphics.rounded_rect easygraphics.save_image easygraphics.save_settings
#: easygraphics.scale easygraphics.set_background_color
#: easygraphics.set_caption easygraphics.set_clip_rect
#: easygraphics.set_clipping easygraphics.set_color
#: easygraphics.set_composition_mode easygraphics.set_fill_color
#: easygraphics.set_fill_style easygraphics.set_font easygraphics.set_font_size
#: easygraphics.set_line_style easygraphics.set_line_width
#: easygraphics.set_origin easygraphics.set_render_mode easygraphics.set_target
#: easygraphics.set_view_port easygraphics.set_window
#: easygraphics.set_write_mode easygraphics.shear easygraphics.skew
#: easygraphics.text_height easygraphics.text_width easygraphics.to_alpha
#: easygraphics.translate of
msgid "Parameters"
msgstr "参数"

#: easygraphics.set_line_style:6 of
msgid "line style"
msgstr "线型"

#: easygraphics.set_line_style:7 of
msgid ""
"the target image whose line style is to be set. None means it is the "
"default target image (see set_target() and get_target())"
msgstr ""

#: easygraphics.get_line_style:3 of
msgid "The line style will be used when drawing lines or shape outlines."
msgstr ""

#: easygraphics.get_line_style:5 of
msgid ""
"the target image whose line style is to be gotten. None means it is the "
"target image (see set_target() and get_target())"
msgstr ""

#: easygraphics.cart2pol easygraphics.color_cmyk easygraphics.color_hsv
#: easygraphics.color_rgb easygraphics.contains_left_button
#: easygraphics.contains_mid_button easygraphics.contains_right_button
#: easygraphics.create_image easygraphics.get_background_color
#: easygraphics.get_char easygraphics.get_click easygraphics.get_color
#: easygraphics.get_composition_mode easygraphics.get_cursor_pos
#: easygraphics.get_drawing_pos easygraphics.get_fill_color
#: easygraphics.get_fill_style easygraphics.get_font easygraphics.get_font_size
#: easygraphics.get_height easygraphics.get_key easygraphics.get_line_style
#: easygraphics.get_line_width easygraphics.get_mouse_msg
#: easygraphics.get_pixel easygraphics.get_render_mode easygraphics.get_target
#: easygraphics.get_width easygraphics.get_write_mode easygraphics.get_x
#: easygraphics.get_y easygraphics.has_kb_hit easygraphics.has_kb_msg
#: easygraphics.has_mouse_msg easygraphics.is_run easygraphics.load_image
#: easygraphics.pol2cart easygraphics.rgb easygraphics.set_fill_style
#: easygraphics.to_alpha of
msgid "Returns"
msgstr ""

#: easygraphics.get_line_style:7 of
msgid "line style used by the specified image"
msgstr ""

#: easygraphics.get_line_width:3 easygraphics.set_line_width:3 of
msgid "It will be used when drawing lines or shape outlines"
msgstr ""

#: easygraphics.set_line_width:5 of
msgid "line width (line thickness)"
msgstr ""

#: easygraphics.set_line_width:6 of
msgid ""
"the target image whose line width is to be set. None means it is the "
"target image (see set_target() and get_target())"
msgstr ""

#: easygraphics.get_line_width:5 of
msgid ""
"the target image whose line width is to be gotten. None means it is the "
"target image (see set_target() and get_target())"
msgstr ""

#: easygraphics.get_line_width:7 of
msgid "line width (line thickness) of the specified image"
msgstr ""

#: easygraphics.get_color:3 of
msgid "it will be used when drawing lines or shape outlines"
msgstr ""

#: easygraphics.get_color:5 of
msgid ""
"the target image whose foreground color is to be gotten. None means it is"
" the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_color:7 of
msgid "foreground color of the specified image"
msgstr ""

#: easygraphics.set_color:3 of
msgid "it will be used when drawing lines or shape outlines."
msgstr ""

#: easygraphics.set_background_color:3 easygraphics.set_color:5
#: easygraphics.set_fill_color:5 of
msgid ""
"the possible color could be consts defined in Color class, or the color "
"created by rgb() function, or PyQt5's QColor , QGradient object or "
"Qt.GlobalColor consts (see the pyqt reference)."
msgstr ""

#: easygraphics.set_color:9 of
msgid "the foreground color"
msgstr ""

#: easygraphics.set_color:10 of
msgid ""
"the target image whose foreground color is to be set. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_fill_color:3 easygraphics.get_fill_style:3 of
msgid "it will be used when drawing and fill shapes."
msgstr ""

#: easygraphics.get_fill_color:5 of
msgid ""
"the target image whose fill color is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_fill_color:7 of
msgid "fill color of the specified image"
msgstr ""

#: easygraphics.set_fill_color:3 of
msgid "It will be used when drawing and fill shapes."
msgstr ""

#: easygraphics.set_fill_color:9 of
msgid "the fill color"
msgstr ""

#: easygraphics.set_fill_color:10 of
msgid ""
"the target image whose fill color is to be set. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_fill_style:5 of
msgid ""
"the target image whose fill style is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_fill_style:7 of
msgid "fill style of the specified image"
msgstr ""

#: easygraphics.set_fill_style:3 of
msgid ""
"it will be used when drawing and fill shapes. Valid values are the consts"
" defined in FillStyle"
msgstr ""

#: easygraphics.set_fill_style:6 of
msgid "fill style"
msgstr ""

#: easygraphics.set_fill_style:7 of
msgid ""
"the target image whose fill style is to be set. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_background_color:3 of
msgid "it will be used when the image is cleared. (see clear_device())"
msgstr ""

#: easygraphics.get_background_color:5 of
msgid ""
"the target image whose background color is to be gotten. None means it is"
" the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_background_color:7 of
msgid "background color of the specified image"
msgstr ""

#: easygraphics.set_background_color:7 of
msgid "the background color"
msgstr ""

#: easygraphics.set_background_color:8 of
msgid ""
"the target image whose background color is to be set. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.set_font:3 of
msgid "the font will be used"
msgstr ""

#: easygraphics.set_font:4 of
msgid ""
"the target image whose font is to be set. None means it is the target "
"image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_font:3 of
msgid ""
"the target image whose font is to be gotten. None means it is the target "
"image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_font:5 of
msgid "the font used by the specified image"
msgstr ""

#: easygraphics.get_font_size:5 easygraphics.set_font_size:3 of
msgid "font size of the specified image"
msgstr ""

#: easygraphics.get_font_size:3 easygraphics.set_font_size:4 of
msgid ""
"the target image whose write mode is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.set_composition_mode:3 easygraphics.set_write_mode:3 of
msgid ""
"Composition modes are used to specify how the pixels in the source "
"(image/pen/brush), are merged with the pixel in the destination image."
msgstr ""

#: easygraphics.get_composition_mode:8 easygraphics.get_write_mode:8
#: easygraphics.set_composition_mode:6 easygraphics.set_write_mode:6 of
msgid "composition mode"
msgstr ""

#: easygraphics.set_composition_mode:7 easygraphics.set_write_mode:7 of
msgid ""
"the target image whose composition mode is to be set. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_composition_mode:4 easygraphics.get_write_mode:4 of
msgid ""
"When drawing ,the composition mode will decide how the result pixel color"
" will be computed"
msgstr ""

#: easygraphics.get_composition_mode:4 easygraphics.get_write_mode:4 of
msgid "(using source color and color of the destination)"
msgstr ""

#: easygraphics.get_composition_mode:6 easygraphics.get_write_mode:6 of
msgid ""
"the target image whose composition mode is to be gotten. None means it is"
" the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_drawing_pos:3 easygraphics.get_x:3 easygraphics.get_y:3 of
msgid ""
"Some drawing functions will use the current pos to draw.(see "
"line_to(),line_rel(),move_to(),move_rel())."
msgstr ""

#: easygraphics.get_drawing_pos:5 easygraphics.get_x:5 easygraphics.get_y:5 of
msgid ""
"the target image whose drawing pos is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_x:7 of
msgid "the x coordinate value of the current drawing position"
msgstr ""

#: easygraphics.get_y:7 of
msgid "the y coordinate value of the current drawing position"
msgstr ""

#: easygraphics.set_view_port:3 of
msgid "View port is the drawing zone on the image."
msgstr ""

#: easygraphics.set_view_port:15 of
msgid "left of the view port rectangle"
msgstr ""

#: easygraphics.set_view_port:16 of
msgid "top of the view port rectangle"
msgstr ""

#: easygraphics.set_view_port:17 of
msgid "right of the view port rectangle"
msgstr ""

#: easygraphics.set_view_port:18 of
msgid "bottom of the view port rectangle"
msgstr ""

#: easygraphics.set_view_port:19 of
msgid "if True, drawings outside the port rectangle will be clipped"
msgstr ""

#: easygraphics.set_view_port:20 of
msgid ""
"the target image whose view port is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.reset_view_port:3 of
msgid ""
"the target image whose view port is to be reset. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.set_origin:3 of
msgid ""
"The effect of this function is , when drawing, x and y is added to points"
" coordinates. That is, if you want to draw a point at (x0,y0), it's "
"really drawn at (x0+x,x0+y)"
msgstr ""

#: easygraphics.set_origin:6 of
msgid "the default origin is on left-top of the specified image"
msgstr ""

#: easygraphics.set_origin:8 of
msgid "x coordinate value the new origin"
msgstr ""

#: easygraphics.set_origin:9 of
msgid "y coordinate value the new origin"
msgstr ""

#: easygraphics.set_origin:10 of
msgid ""
"the target image whose origin is to be removed. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.set_render_mode:3 of
msgid "This mode will control how the graphics window is updated."
msgstr ""

#: easygraphics.set_render_mode:5 of
msgid "possible values:"
msgstr ""

#: easygraphics.set_render_mode:7 of
msgid ""
"RenderMode.RENDER_AUTO   (default) update the window immediately after "
"every drawing"
msgstr ""

#: easygraphics.set_render_mode:8 of
msgid ""
"RenderMode.MANUAL   only update the window after "
"pause()/delay()/delay_fps()/delay_jfps() is called."
msgstr ""

#: easygraphics.set_render_mode:10 of
msgid "RenderMode.MANUAL is used for animations"
msgstr ""

#: easygraphics.get_render_mode:6 easygraphics.set_render_mode:12 of
msgid "render mode"
msgstr ""

#: easygraphics.get_render_mode:3 of
msgid ""
"This mode will control how the graphics window is updated. See "
"**set_render_mode()**"
msgstr ""

#: easygraphics.get_drawing_pos:7 of
msgid "the current drawing position (x,y)"
msgstr ""

#: easygraphics.set_clip_rect:3 of
msgid "Drawings outside the clip rect will be clipped."
msgstr ""

#: easygraphics.set_clip_rect:5 of
msgid "left of the clip rectangle"
msgstr ""

#: easygraphics.set_clip_rect:6 of
msgid "top of the clip rectangle"
msgstr ""

#: easygraphics.set_clip_rect:7 of
msgid "right of the clip rectangle"
msgstr ""

#: easygraphics.set_clip_rect:8 of
msgid "bottom of the clip rectangle"
msgstr ""

#: easygraphics.set_clip_rect:9 of
msgid ""
"the target image whose clip rect is to be gotten. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.set_clipping:3 of
msgid "Use set_clip_rect() to set the clip rectangle."
msgstr ""

#: easygraphics.set_clipping:5 of
msgid "True will turn on clipping, False will turn off clipping"
msgstr ""

#: easygraphics.set_clipping:6 of
msgid ""
"the target image whose clip rect is to be disabled. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.set_window:3 of
msgid ""
"All your drawing is first drawing on the logical window, then mapping to "
"view port (see set_view_port()).    The logical window's 4 corner points "
"to streched to match the view port."
msgstr ""

#: easygraphics.set_window:5 of
msgid ""
"If your view port is 200x200，and you use set_window(-50,-50,100,100) to "
"get a 100x100 logical window with     the origin at (-50,50) , then the "
"logical window's origin (0,0) is mapping to view port's (-50,-50), and"
"     right-bottom corner (100,100) is mapping to view port's right bottom"
" corner (200,200). All logical points is     mapping accordingly."
msgstr ""

#: easygraphics.set_window:7 of
msgid ""
"If you just want to transform the drawing, use "
"set_origin()/translate()/rotate()/scale()."
msgstr ""

#: easygraphics.set_window:9 of
msgid ""
"The drawing outside the logical window is not clipped. If you want to "
"clip it, use set_clip_rect()."
msgstr ""

#: easygraphics.set_window:11 of
msgid "x pos of the logical window's origin"
msgstr ""

#: easygraphics.set_window:12 of
msgid "y pos of the logical window's origin"
msgstr ""

#: easygraphics.set_window:13 of
msgid "width of the logical window"
msgstr ""

#: easygraphics.set_window:14 of
msgid "height of the logical window"
msgstr ""

#: easygraphics.set_window:15 of
msgid ""
"the target image whose logical window is to be set. None means it is the "
"target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.reset_window:3 of
msgid "See set_window()."
msgstr ""

#: easygraphics.reset_window:5 of
msgid ""
"the target image whose logical window is to be reset. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.translate:1 of
msgid ""
"Translates the coordinate system by the given offset; i.e. the given "
"offset is added to points."
msgstr ""

#: easygraphics.translate:3 of
msgid "offset on the x coordinate"
msgstr ""

#: easygraphics.translate:4 of
msgid "offset on the y coordinate"
msgstr ""

#: easygraphics.translate:5 of
msgid ""
"the target image to be translated. None means it is the target image (see"
" set_target() and get_target())."
msgstr ""

#: easygraphics.rotate:3 of
msgid "the rotate angle (in degree)"
msgstr ""

#: easygraphics.rotate:4 of
msgid ""
"the target image to be rotated. None means it is the target image (see "
"set_target() and get_target())."
msgstr ""

#: easygraphics.scale:3 of
msgid "scale factor on x axis."
msgstr ""

#: easygraphics.scale:4 of
msgid "scale factor on y axis."
msgstr ""

#: easygraphics.scale:5 of
msgid ""
"the target image to be scaled. None means it is the target image (see "
"set_target() and get_target())."
msgstr ""

#: easygraphics.shear:3 easygraphics.skew:3 of
msgid "shear ratio on the x-axis"
msgstr ""

#: easygraphics.shear:4 easygraphics.skew:4 of
msgid "shear ratio on the y-axis"
msgstr ""

#: easygraphics.flip:5 easygraphics.mirror:5 easygraphics.reflect:5
#: easygraphics.shear:5 easygraphics.skew:5 of
msgid ""
"the target image to be sheared. None means it is the target image (see "
"set_target() and get_target())."
msgstr ""

#: easygraphics.reset_transform:3 of
msgid ""
"the target image to be reset. None means it is the target image (see "
"set_target() and get_target())."
msgstr ""

#: easygraphics.save_settings:3 of
msgid "See restore_settings()."
msgstr ""

#: easygraphics.restore_settings:5 easygraphics.save_settings:5 of
msgid "Note: background_color and current position won't  be saved and restored."
msgstr ""

#: easygraphics.save_settings:8 of
msgid ""
"the target image whose drawing settings is to be saved. None means it is "
"the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.restore_settings:3 of
msgid "See save_settings()."
msgstr ""

#: easygraphics.restore_settings:7 of
msgid ""
"the target image whose drawing settings is to be restored. None means it "
"is the target image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_height:3 easygraphics.get_width:3 of
msgid ""
"the target image whose width is to be gotten. None means it is the target"
" image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_width:5 of
#, fuzzy
msgid "width of the specified image"
msgstr "为指定的image设置**线形**"

#: easygraphics.get_height:5 of
#, fuzzy
msgid "height of the specified image"
msgstr "为指定的image设置**线形**"

#: easygraphics.draw_point:3 of
msgid "x coordinate value of the drawing point"
msgstr ""

#: easygraphics.draw_point:4 of
msgid "y coordinate value of the drawing point"
msgstr ""

#: easygraphics.arc:11 easygraphics.bezier:16 easygraphics.chord:13
#: easygraphics.circle:8 easygraphics.clear_device:3
#: easygraphics.clear_view_port:3 easygraphics.draw_arc:11
#: easygraphics.draw_bezier:16 easygraphics.draw_chord:13
#: easygraphics.draw_circle:8 easygraphics.draw_ellipse:9
#: easygraphics.draw_image:25 easygraphics.draw_line:9
#: easygraphics.draw_lines:17 easygraphics.draw_pie:13
#: easygraphics.draw_point:5 easygraphics.draw_poly_line:18
#: easygraphics.draw_polygon:21 easygraphics.draw_rect:9
#: easygraphics.draw_rect_text:12 easygraphics.draw_rounded_rect:12
#: easygraphics.draw_text:7 easygraphics.ellipse:9 easygraphics.fill_chord:13
#: easygraphics.fill_circle:8 easygraphics.fill_ellipse:9
#: easygraphics.fill_pie:13 easygraphics.fill_polygon:20
#: easygraphics.fill_rect:9 easygraphics.fill_rounded_rect:12
#: easygraphics.flood_fill:8 easygraphics.get_pixel:5 easygraphics.line:9
#: easygraphics.line_rel:5 easygraphics.line_to:5 easygraphics.lines:17
#: easygraphics.move_rel:9 easygraphics.move_to:7 easygraphics.pie:13
#: easygraphics.poly_line:18 easygraphics.polygon:20 easygraphics.put_image:25
#: easygraphics.put_pixel:6 easygraphics.rect:9 easygraphics.rounded_rect:12
#: easygraphics.text_height:3 easygraphics.text_width:4 of
msgid ""
"the target image which will be painted on. None means it is the target "
"image (see set_target() and get_target())."
msgstr ""

#: easygraphics.get_pixel:3 easygraphics.put_pixel:3 of
msgid "x coordinate value of the pixel"
msgstr ""

#: easygraphics.get_pixel:4 easygraphics.put_pixel:4 of
msgid "y coordinate value of the pixel"
msgstr ""

#: easygraphics.color_cmyk:8 easygraphics.color_hsv:7 easygraphics.color_rgb:7
#: easygraphics.put_pixel:5 easygraphics.rgb:7 of
msgid "the color"
msgstr ""

#: easygraphics.get_pixel:7 of
msgid "color of the pixel"
msgstr ""

#: easygraphics.draw_line:3 easygraphics.line:3 of
msgid "It's the same with line()."
msgstr ""

#: easygraphics.draw_line:5 easygraphics.draw_text:3 easygraphics.flood_fill:5
#: easygraphics.line:5 of
msgid "x coordinate value of the start point"
msgstr ""

#: easygraphics.draw_line:6 easygraphics.draw_line:8 easygraphics.draw_text:4
#: easygraphics.flood_fill:6 easygraphics.line:6 easygraphics.line:8 of
msgid "y coordinate value of the start point"
msgstr ""

#: easygraphics.draw_line:7 easygraphics.line:7 of
msgid "x coordinate value of the end point"
msgstr ""

#: easygraphics.move_to:3 of
msgid "The drawing position is used by line_to(), line_rel() and move_rel()."
msgstr ""

#: easygraphics.line_to:3 easygraphics.move_to:5 of
msgid "x coordinate value of the new drawing position"
msgstr ""

#: easygraphics.line_to:4 easygraphics.move_to:6 of
msgid "y coordinate value of the new drawing position"
msgstr ""

#: easygraphics.move_rel:3 of
msgid "If the old position is (x,y), then the new position will be (x+dx,y+dy)."
msgstr ""

#: easygraphics.move_rel:5 of
msgid "The drawing position is used by line_to(), line_rel()."
msgstr ""

#: easygraphics.line_rel:3 easygraphics.move_rel:7 of
msgid "x coordinate offset of the new drawing position"
msgstr ""

#: easygraphics.line_rel:4 easygraphics.move_rel:8 of
msgid "y coordinate offset of the new drawing position"
msgstr ""

#: easygraphics.circle:3 of
msgid "The circle is not filled."
msgstr ""

#: easygraphics.circle:5 easygraphics.draw_circle:5 easygraphics.fill_circle:5
#: of
msgid "x coordinate value of the circle's center"
msgstr ""

#: easygraphics.circle:6 easygraphics.draw_circle:6 easygraphics.fill_circle:6
#: of
msgid "y coordinate value of the circle's center"
msgstr ""

#: easygraphics.circle:7 easygraphics.draw_circle:7 easygraphics.fill_circle:7
#: of
msgid "radius of the circle"
msgstr ""

#: easygraphics.draw_circle:3 of
msgid "The circle is filled and has outline."
msgstr ""

#: easygraphics.fill_circle:3 of
msgid "The circle doesn't has outline."
msgstr ""

#: easygraphics.ellipse:3 of
msgid "The ellipse is not filled."
msgstr ""

#: easygraphics.arc:5 easygraphics.chord:7 easygraphics.draw_arc:5
#: easygraphics.draw_chord:7 easygraphics.draw_ellipse:5
#: easygraphics.draw_pie:7 easygraphics.ellipse:5 easygraphics.fill_chord:7
#: easygraphics.fill_ellipse:5 easygraphics.fill_pie:7 easygraphics.pie:7 of
msgid "x coordinate value of the ellipse's center"
msgstr ""

#: easygraphics.arc:6 easygraphics.chord:8 easygraphics.draw_arc:6
#: easygraphics.draw_chord:8 easygraphics.draw_ellipse:6
#: easygraphics.draw_pie:8 easygraphics.ellipse:6 easygraphics.fill_chord:8
#: easygraphics.fill_ellipse:6 easygraphics.fill_pie:8 easygraphics.pie:8 of
msgid "y coordinate value of the ellipse's center"
msgstr ""

#: easygraphics.arc:9 easygraphics.chord:11 easygraphics.draw_arc:9
#: easygraphics.draw_chord:11 easygraphics.draw_ellipse:7
#: easygraphics.draw_pie:11 easygraphics.ellipse:7 easygraphics.fill_chord:11
#: easygraphics.fill_ellipse:7 easygraphics.fill_pie:11 easygraphics.pie:11 of
msgid "radius on x-axis of the ellipse"
msgstr ""

#: easygraphics.arc:10 easygraphics.chord:12 easygraphics.draw_arc:10
#: easygraphics.draw_chord:12 easygraphics.draw_ellipse:8
#: easygraphics.draw_pie:12 easygraphics.ellipse:8 easygraphics.fill_chord:12
#: easygraphics.fill_ellipse:8 easygraphics.fill_pie:12 easygraphics.pie:12 of
msgid "radius on y-axis of the ellipse"
msgstr ""

#: easygraphics.draw_ellipse:3 of
msgid "The ellipse is filled and has outline."
msgstr ""

#: easygraphics.fill_ellipse:3 of
msgid "The ellipse doesn't has outline."
msgstr ""

#: easygraphics.arc:1 easygraphics.draw_arc:1 of
msgid ""
"Draw an elliptical arc from start_angle to end_angle. The base ellipse is"
" centered at (x,y)      which radius on x-axis is radius_x and radius on "
"y-axis is radius_y."
msgstr ""

#: easygraphics.arc:3 easygraphics.draw_arc:3 of
msgid ""
"**note**: Degree 0 is at 3 o'clock position, and is increasing "
"clockwisely. That is, degree 90 is     at 12 o'click , degree 180 is at 9"
" o'clock , degree 270 is at 6 o'clock, etc."
msgstr ""

#: easygraphics.arc:7 easygraphics.draw_arc:7 of
msgid "start angle of the arc"
msgstr ""

#: easygraphics.arc:8 easygraphics.draw_arc:8 of
msgid "end angle of the arc"
msgstr ""

#: easygraphics.pie:1 of
msgid ""
"Draw an elliptical pie outline from start_angle to end_angle. The base "
"ellipse is centered at (x,y)      which radius on x-axis is radius_x and "
"radius on y-axis is radius_y."
msgstr ""

#: easygraphics.pie:3 of
msgid "The pie is not filled."
msgstr ""

#: easygraphics.chord:5 easygraphics.draw_chord:5 easygraphics.draw_pie:5
#: easygraphics.fill_chord:5 easygraphics.fill_pie:5 easygraphics.pie:5 of
msgid ""
"**note**: degree 0 is at 3 o'clock position, and is increasing "
"clockwisely. That is, degree 90 is     at 12 o'click , degree 180 is at 9"
" o'clock , degree 270 is at 6 o'clock, etc."
msgstr ""

#: easygraphics.draw_pie:9 easygraphics.fill_pie:9 easygraphics.pie:9 of
msgid "start angle of the pie"
msgstr ""

#: easygraphics.draw_pie:10 easygraphics.fill_pie:10 easygraphics.pie:10 of
msgid "end angle of the pie"
msgstr ""

#: easygraphics.draw_pie:1 of
msgid ""
"Draw an elliptical pie from start_angle to end_angle. The base ellipse is"
" centered at (x,y)      which radius on x-axis is radius_x and radius on "
"y-axis is radius_y."
msgstr ""

#: easygraphics.draw_pie:3 of
msgid "The pie is filled and has outline."
msgstr ""

#: easygraphics.fill_pie:1 of
msgid ""
"Fill an elliptical pie from start_angle to end_angle. The base ellipse is"
" centered at (x,y)      which radius on x-axis is radius_x and radius on "
"y-axis is radius_y."
msgstr ""

#: easygraphics.fill_pie:3 of
msgid "The pie doesn't have outline."
msgstr ""

#: easygraphics.chord:1 easygraphics.draw_chord:1 easygraphics.fill_chord:1 of
msgid ""
"Draw an elliptical chord outline from start_angle to end_angle. The base "
"ellipse is centered at (x,y)      which radius on x-axis is radius_x and "
"radius on y-axis is radius_y."
msgstr ""

#: easygraphics.chord:3 of
msgid "The chord is not filled."
msgstr ""

#: easygraphics.chord:9 easygraphics.draw_chord:9 easygraphics.fill_chord:9 of
msgid "start angle of the chord"
msgstr ""

#: easygraphics.chord:10 easygraphics.draw_chord:10 easygraphics.fill_chord:10
#: of
msgid "end angle of the chord"
msgstr ""

#: easygraphics.draw_chord:3 of
msgid "The chord is filled and has outline"
msgstr ""

#: easygraphics.fill_chord:3 of
msgid "The chord doesn't have outline."
msgstr ""

#: easygraphics.bezier:3 easygraphics.draw_bezier:3 of
msgid ""
"\"control_points\" is a list of 4 control points. Each point has 2 "
"coordinate values in the list , so there should be 8 values int the list."
msgstr ""

#: easygraphics.bezier:6 easygraphics.draw_bezier:6 of
msgid ""
"That is , if your 4 control points  are (x0,y0),(x1,y1),(x2,y2),(x3,y3), "
"\"control_points\" should be      [x0,y0,x1,y1,x2,y2,x3,y3] ."
msgstr ""

#: easygraphics.bezier:15 easygraphics.draw_bezier:15 of
msgid "the control points list"
msgstr ""

#: easygraphics.draw_lines:3 easygraphics.lines:3 of
msgid ""
"\"points\" is a 2D point pair list. It should contain even points, and "
"each 2 points make a point pair. And each point have 2 coordinate "
"values(x,y). So if you have n point pairs, the points list should have "
"4*n values."
msgstr ""

#: easygraphics.draw_lines:6 easygraphics.lines:6 of
msgid ""
"For examples , if points is [50,50,550,350, 50,150,550,450, "
"50,250,550,550], draw_lines() will draw 3 lines: (50,50) to (550,350), "
"(50,150) to (550,450), (50,250) to (550,550)"
msgstr ""

#: easygraphics.draw_lines:16 easygraphics.draw_poly_line:17
#: easygraphics.draw_polygon:20 easygraphics.fill_polygon:19
#: easygraphics.lines:16 easygraphics.poly_line:17 easygraphics.polygon:19 of
msgid "point value list"
msgstr ""

#: easygraphics.draw_poly_line:3 easygraphics.poly_line:3 of
msgid ""
"\"end_points\" is a 2D points list. Each 2 values in the list make a "
"point. A poly line will be drawn to connect adjacent end_points defined "
"by the the list."
msgstr ""

#: easygraphics.draw_poly_line:6 easygraphics.poly_line:6 of
msgid ""
"For examples , if \"end_points\" is [50,50,550,350, 50,150,550,450, "
"50,250,550,550], draw_poly_line() will draw 5 lines: (50,50) to "
"(550,350), (550,350) to (50,150), (50,150) to (550,450), (550,540) to "
"(50,250) and(50,250) to (550,550)"
msgstr ""

#: easygraphics.draw_polygon:3 easygraphics.polygon:3 of
msgid ""
"\"vertices\" is a 2D point list. Each 2 values in the list make a point. "
"A polygon will be drawn to connect adjacent points defined by the the "
"list."
msgstr ""

#: easygraphics.draw_polygon:6 easygraphics.polygon:6 of
msgid ""
"For examples , if \"vertices\" is [50,50,550,350, 50,150], poly_gon() "
"will draw a triangle with vertices at (50,50) , (550,350) and (50,150)"
msgstr ""

#: easygraphics.polygon:9 of
msgid "The polygon is not filled."
msgstr ""

#: easygraphics.draw_polygon:9 of
msgid "The polygon is filled and has outline."
msgstr ""

#: easygraphics.fill_polygon:3 of
msgid ""
"\"points\" is a 2D point list. Each 2 values in the list make a point. A "
"polygon will be drawn to connect adjacent points defined by the the list."
msgstr ""

#: easygraphics.fill_polygon:6 of
msgid ""
"For examples , if points is [50,50,550,350, 50,150], poly_gon() will draw"
" a triangle with vertices at (50,50) , (550,350) and (50,150)"
msgstr ""

#: easygraphics.fill_polygon:9 of
msgid "The polygon doesn't have outline."
msgstr ""

#: easygraphics.rect:3 easygraphics.rounded_rect:4 of
msgid "The rectangle is not filled."
msgstr ""

#: easygraphics.draw_rect:5 easygraphics.draw_rounded_rect:6
#: easygraphics.fill_rect:5 easygraphics.fill_rounded_rect:6
#: easygraphics.rect:5 easygraphics.rounded_rect:6 of
msgid "x coordinate value of the upper left corner"
msgstr ""

#: easygraphics.draw_rect:6 easygraphics.draw_rounded_rect:7
#: easygraphics.fill_rect:6 easygraphics.fill_rounded_rect:7
#: easygraphics.rect:6 easygraphics.rounded_rect:7 of
msgid "y coordinate value of the upper left corner"
msgstr ""

#: easygraphics.draw_rect:7 easygraphics.draw_rounded_rect:8
#: easygraphics.fill_rect:7 easygraphics.fill_rounded_rect:8
#: easygraphics.rect:7 easygraphics.rounded_rect:8 of
msgid "x coordinate value of the lower right corner"
msgstr ""

#: easygraphics.draw_rect:8 easygraphics.draw_rounded_rect:9
#: easygraphics.fill_rect:8 easygraphics.fill_rounded_rect:9
#: easygraphics.rect:8 easygraphics.rounded_rect:9 of
msgid "y coordinate value of the lower right corner"
msgstr ""

#: easygraphics.draw_rect:3 easygraphics.draw_rounded_rect:4 of
msgid "The rectangle is filled and has outline."
msgstr ""

#: easygraphics.fill_rect:3 easygraphics.fill_rounded_rect:4 of
msgid "The rectangle doesn't have outline."
msgstr ""

#: easygraphics.rounded_rect:1 of
msgid ""
"Draws a rounded rectangle outline with upper left corner at (left, top) ,"
" lower right corner at (right,bottom). raidus on x-axis of the corner "
"ellipse arc is round_x, radius on y-axis of the corner ellipse arc is "
"round_y."
msgstr ""

#: easygraphics.draw_rounded_rect:10 easygraphics.fill_rounded_rect:10
#: easygraphics.rounded_rect:10 of
msgid "raidus on x-axis of the corner ellipse arc"
msgstr ""

#: easygraphics.draw_rounded_rect:11 easygraphics.fill_rounded_rect:11
#: easygraphics.rounded_rect:11 of
msgid "radius on y-axis of the corner ellipse arc"
msgstr ""

#: easygraphics.draw_rounded_rect:1 of
msgid ""
"Draws a rounded rectangle with upper left corner at (left, top) , lower "
"right corner at (right,bottom). raidus on x-axis of the corner ellipse "
"arc is round_x, radius on y-axis of the corner ellipse arc is round_y."
msgstr ""

#: easygraphics.fill_rounded_rect:1 of
msgid ""
"Fill a rounded rectangle with upper left corner at (left, top) , lower "
"right corner at (right,bottom). raidus on x-axis of the corner ellipse "
"arc is round_x, radius on y-axis of the corner ellipse arc is round_y."
msgstr ""

#: easygraphics.flood_fill:3 of
msgid "The fill region border must be closed,or the whole image will be filled!"
msgstr ""

#: easygraphics.flood_fill:7 of
msgid "color of the fill region border"
msgstr ""

#: easygraphics.draw_image:3 easygraphics.put_image:3 of
msgid ""
"(x, y) specifies the top-left point in the destination image that is to "
"be drawn onto."
msgstr ""

#: easygraphics.draw_image:5 easygraphics.put_image:5 of
msgid ""
"(sx, sy) specifies the top-left point of the part in the source image "
"that is to      be drawn. The default is (0, 0)."
msgstr ""

#: easygraphics.draw_image:7 easygraphics.put_image:7 of
msgid ""
"(sw, sh) specifies the size of the part of the source image that is to be"
" drawn.      The default, (0, 0) (and negative) means all the way to the "
"bottom-right of the image."
msgstr ""

#: easygraphics.draw_image:9 easygraphics.put_image:9 of
msgid ""
"if with_background is False, the source image's background will not be "
"copied."
msgstr ""

#: easygraphics.draw_image:11 easygraphics.put_image:11 of
msgid ""
"The final result will depend on the composition mode and the source "
"image's background. In the default mode (CompositionMode.SOURCE_OVER), "
"the source will fully overwrite the destination)."
msgstr ""

#: easygraphics.draw_image:14 easygraphics.put_image:14 of
msgid ""
"If you want to get a transparent copy, you should use "
"draw_image_transparent()."
msgstr ""

#: easygraphics.draw_image:16 easygraphics.put_image:16 of
msgid "x coordinate value of the upper left point on the destination image"
msgstr ""

#: easygraphics.draw_image:17 easygraphics.put_image:17 of
msgid "y coordinate value of the upper left point on the destination image"
msgstr ""

#: easygraphics.draw_image:18 easygraphics.put_image:18 of
msgid "the source image to be copied"
msgstr ""

#: easygraphics.draw_image:19 easygraphics.put_image:19 of
msgid "x coordinate value of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.draw_image:20 easygraphics.put_image:20 of
msgid "y coordinate value of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.draw_image:21 easygraphics.put_image:21 of
msgid "witdh of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.draw_image:22 easygraphics.put_image:22 of
msgid "height of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.draw_image:23 easygraphics.put_image:23 of
msgid "if the background should be copied."
msgstr ""

#: easygraphics.draw_image:24 easygraphics.put_image:24 of
msgid "if is None, use dst image's composition mode to copy."
msgstr ""

#: easygraphics.capture_screen:3 of
msgid "x coordinate of the capture region's upper left corner"
msgstr ""

#: easygraphics.capture_screen:4 of
msgid "y coordinate of the capture region's upper left corner"
msgstr ""

#: easygraphics.capture_screen:5 of
msgid "x coordinate of the capture region's bottom right corner"
msgstr ""

#: easygraphics.capture_screen:6 of
msgid "y coordinate of the capture region's bottom right corner"
msgstr ""

#: easygraphics.capture_screen:7 of
msgid "image to save the capture"
msgstr ""

#: easygraphics.draw_rect_text:9 easygraphics.draw_text:5 of
msgid "things to be printed (like print())"
msgstr ""

#: easygraphics.draw_rect_text:11 easygraphics.draw_text:6 of
msgid "seperator used to join strings"
msgstr ""

#: easygraphics.draw_rect_text:3 of
msgid "Flags are defined as TextFlag const."
msgstr ""

#: easygraphics.draw_rect_text:5 of
msgid "x coordinate of the output rectangle's upper left corner"
msgstr ""

#: easygraphics.draw_rect_text:6 of
msgid "y coordinate of the output rectangle's upper left corner"
msgstr ""

#: easygraphics.draw_rect_text:7 of
msgid "width of the output rectangle"
msgstr ""

#: easygraphics.draw_rect_text:8 of
msgid "height of the output rectangle"
msgstr ""

#: easygraphics.draw_rect_text:10 of
msgid "align flags"
msgstr ""

#: easygraphics.text_width:3 of
msgid "the text"
msgstr ""

#: easygraphics.get_target:3 easygraphics.set_target:3 of
msgid ""
"the target image which will be painted on. None means paint on the "
"grapchis window."
msgstr ""

#: easygraphics.create_image:3 of
msgid "width of the new image"
msgstr ""

#: easygraphics.create_image:4 of
msgid "height of the new image"
msgstr ""

#: easygraphics.create_image:5 of
msgid "the created image"
msgstr ""

#: easygraphics.save_image:3 of
msgid "Set with_background to False to get a transparent background image."
msgstr ""

#: easygraphics.save_image:5 of
msgid ""
"Note that JPEG format doesn't support transparent. Use PNG format if you "
"want a transparent background."
msgstr ""

#: easygraphics.save_image:7 of
msgid "path of the file"
msgstr ""

#: easygraphics.save_image:8 of
msgid "True to save the background together. False not"
msgstr ""

#: easygraphics.save_image:9 of
msgid ""
"the target image which will be saved. None means it is the target image "
"(see set_target() and get_target())."
msgstr ""

#: easygraphics.load_image:3 of
msgid "the image file"
msgstr ""

#: easygraphics.load_image:4 of
msgid "the loaded image"
msgstr ""

#: easygraphics.delay:3 of
msgid "time to delay"
msgstr ""

#: easygraphics.delay_fps:3 of
msgid "Valid fps value is 1-1000, this value is **not checked** for speed."
msgstr ""

#: easygraphics.delay_fps:5 of
msgid "This function won't skip frames."
msgstr ""

#: easygraphics.delay_fps:7 of
msgid "the descire fps"
msgstr ""

#: easygraphics.delay_jfps:3 of
msgid "If we don't have enough time to delay, we'll skip some frames."
msgstr ""

#: easygraphics.delay_jfps:5 of
msgid "frames per second (max is 1000)"
msgstr ""

#: easygraphics.delay_jfps:6 of
msgid "max num of  frames to skip"
msgstr ""

#: easygraphics.is_run:3 of
msgid "True if the graphics system is running."
msgstr ""

#: easygraphics.has_kb_msg:1 of
msgid "See if any key is hitted in the last 100 ms. Use it with get_key()."
msgstr ""

#: easygraphics.has_kb_hit:4 easygraphics.has_kb_msg:4 of
msgid "True if hitted, False or not"
msgstr ""

#: easygraphics.has_kb_hit:1 of
msgid ""
"See if any ascii char key is hitted in the last 100 ms. Use it with "
"get_char()."
msgstr ""

#: easygraphics.has_mouse_msg:4 of
msgid "True if any mouse message, False or not"
msgstr ""

#: easygraphics.get_key:3 of
msgid ""
"If not any  key is pressed in last 100 ms, the program will stop and wait"
" for the next key hitting."
msgstr ""

#: easygraphics.get_key:5 of
msgid ""
"`keyboard code <http://pyqt.sourceforge.net/Docs/PyQt4/qt.html#Key-"
"enum/>`_ , `keyboard modifier codes "
"<http://pyqt.sourceforge.net/Docs/PyQt4/qt.html#KeyboardModifier-"
"enum)/>`_"
msgstr ""

#: easygraphics.get_char:3 of
msgid ""
"If not any char key is pressed in last 100 ms, the program will stop and "
"wait for the next key hitting."
msgstr ""

#: easygraphics.get_char:5 of
msgid "the character inputted by keyboard"
msgstr ""

#: easygraphics.get_mouse_msg:3 of
msgid ""
"If there is not any  mouse button is pressed or released in last 100 ms, "
"the program will stop and wait for the next key hitting."
msgstr ""

#: easygraphics.get_mouse_msg:5 of
msgid ""
"x of the cursor, y of the cursor , type, mouse buttons down ( "
"QtCore.Qt.LeftButton or QtCore.Qt.RightButton or QtCore.Qt.MidButton or "
"QtCore.Qt.NoButton)"
msgstr ""

#: easygraphics.get_cursor_pos:3 of
msgid "position's coordinate values (x,y)"
msgstr ""

#: easygraphics.get_click:3 of
msgid ""
"If there is not any  mouse button is clicked in last 100 ms, the program "
"will stop and wait for the next key hitting."
msgstr ""

#: easygraphics.get_click:6 of
msgid ""
"x of the cursor, y of the cursor , mouse buttons down ( "
"QtCore.Qt.LeftButton or QtCore.Qt.RightButton or QtCore.Qt.MidButton or "
"QtCore.Qt.NoButton)"
msgstr ""

#: easygraphics.contains_left_button:3 easygraphics.contains_mid_button:3
#: easygraphics.contains_right_button:3 of
msgid "The \"buttons\" should be values returned by get_click() or get_mouse()"
msgstr ""

#: easygraphics.contains_left_button:5 easygraphics.contains_mid_button:5
#: easygraphics.contains_right_button:5 of
msgid "the buttons to be tested"
msgstr ""

#: easygraphics.contains_left_button:6 of
msgid "if the buttons contains the left mouse button"
msgstr ""

#: easygraphics.contains_right_button:6 of
msgid "if the buttons contains the right mouse button"
msgstr ""

#: easygraphics.contains_mid_button:6 of
msgid "if the buttons contains the middle mouse button"
msgstr ""

#: easygraphics.init_graph:3 of
msgid ""
"If \"headless\" is True, easygraphics will run in headless mode, which "
"means there will be no graphics window. Use this mode if you want to draw"
" and save image to files."
msgstr ""

#: easygraphics.init_graph:7 of
msgid "width of the graphics window (in pixels)"
msgstr ""

#: easygraphics.init_graph:8 of
msgid "height of the graphics window (in pixels)"
msgstr ""

#: easygraphics.init_graph:9 of
msgid "True to run in headless mode."
msgstr ""

#: easygraphics.close_graph:3 of
msgid "The program will exit too."
msgstr ""

#: easygraphics.close_graph:5 of
msgid ""
">>>from easygraphics import * >>>init_graph(800,600) >>>pause() "
">>>close_graph()"
msgstr ""

#: easygraphics.set_caption:3 of
msgid "caption title"
msgstr ""

#: easygraphics.color_rgb:3 easygraphics.rgb:3 of
msgid "red value"
msgstr ""

#: easygraphics.color_rgb:4 easygraphics.rgb:4 of
msgid "green value"
msgstr ""

#: easygraphics.color_rgb:5 easygraphics.rgb:5 of
msgid "blue value"
msgstr ""

#: easygraphics.color_cmyk:7 easygraphics.color_hsv:6 easygraphics.color_rgb:6
#: easygraphics.rgb:6 of
msgid "alpha channel value of the color. 255 means fully opaque"
msgstr ""

#: easygraphics.color_cmyk:3 of
msgid "cyan value"
msgstr ""

#: easygraphics.color_cmyk:4 of
msgid "magenta value"
msgstr ""

#: easygraphics.color_cmyk:5 of
msgid "yellow value"
msgstr ""

#: easygraphics.color_cmyk:6 of
msgid "black value"
msgstr ""

#: easygraphics.color_hsv:3 of
msgid "hue value"
msgstr ""

#: easygraphics.color_hsv:4 of
msgid "saturation value"
msgstr ""

#: easygraphics.color_hsv:5 of
msgid "lightness value"
msgstr ""

#: easygraphics.to_alpha:3 of
msgid "the base color"
msgstr ""

#: easygraphics.to_alpha:4 of
msgid "new color's alpha"
msgstr ""

#: easygraphics.to_alpha:5 of
msgid "new color with base color and the given alpha value"
msgstr ""

#: easygraphics.pol2cart:3 of
msgid "rho coordinate value of the point"
msgstr ""

#: easygraphics.pol2cart:4 of
msgid "theta coordinate value of the point (in radians)"
msgstr ""

#: easygraphics.pol2cart:5 of
msgid "x,y coordinate value of the point"
msgstr ""

#: easygraphics.cart2pol:3 of
msgid "x coordinate value of the point"
msgstr ""

#: easygraphics.cart2pol:4 of
msgid "y coordinate value of the point"
msgstr ""

#: easygraphics.cart2pol:5 of
msgid ""
"rho (distance from the pole (origin) to the point), theta (the angle "
"between the polar-axis and the line connecting the pole and the point, in"
" radians)"
msgstr ""

#~ msgid "APIs"
#~ msgstr ""

#~ msgid "Used by autodoc_mock_imports."
#~ msgstr ""

#~ msgid "get line style of the specified image"
#~ msgstr ""

#~ msgid "set line width (thickness) of the specified image"
#~ msgstr ""

#~ msgid "get line width (thinkness) of the specified image"
#~ msgstr ""

#~ msgid "get the foreground (drawing) color of the specified image"
#~ msgstr ""

#~ msgid "set the foreground (drawing) color of the specified image."
#~ msgstr ""

#~ msgid "get the fill color of the specified image"
#~ msgstr ""

#~ msgid "set the fill (drawing) color of the specified image"
#~ msgstr ""

#~ msgid "get fill style of the specified image"
#~ msgstr ""

#~ msgid "set fill style of the specified image"
#~ msgstr ""

#~ msgid "get the background color of the image"
#~ msgstr ""

#~ msgid "set the background  color of the image"
#~ msgstr ""

#~ msgid "set font of the specified image"
#~ msgstr ""

#~ msgid "get font of the specified image"
#~ msgstr ""

#~ msgid "set font size of the specified image"
#~ msgstr ""

#~ msgid "get font size of the specified image"
#~ msgstr ""

#~ msgid "set write mode of the specified image"
#~ msgstr ""

#~ msgid ""
#~ "When drawing ,the wrtie mode will "
#~ "decide how the result pixel color "
#~ "will be computed"
#~ msgstr ""

#~ msgid "source color is the color of the pen/brush."
#~ msgstr ""

#~ msgid "destination color is the color of the pixel will be painted on."
#~ msgstr ""

#~ msgid "the result color will be computed by bitwise operations"
#~ msgstr ""

#~ msgid "possibly modes are consts defined in the WriteMode:"
#~ msgstr ""

#~ msgid "WriteMode.R2_COPYPEN （The default mode) just use the source color"
#~ msgstr ""

#~ msgid "WriteMOde.R2_MASKNOTPEN   （not source color) and (destination color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_MASKPEN   （source color ) and (destination color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_MASKPENNOT   (source color) and (not destination color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_MERGENOTPEN   (not source color) or (destination color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_MERGEPEN   (source color) or (destination color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_MERGEPENNOT   (source color) or (not destination color)"
#~ msgstr ""

#~ msgid ""
#~ "WriteMOde.R2_NOP   just use the destination"
#~ " color (nothing really painted)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_NOT   (not desination color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_NOTCOPYPEN   (not source color)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_NOTMASKPEN   (not source) or (not destination)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_NOTMERGEPEN   (not source) and (not destination)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_NOTXORPEN   (not source) xor (destination)"
#~ msgstr ""

#~ msgid "WriteMOde.R2_XORPEN   (source) xor (destination)"
#~ msgstr ""

#~ msgid "write mode"
#~ msgstr ""

#~ msgid ""
#~ "the target image whose write mode "
#~ "is to be set. None means it "
#~ "is the target image (see set_target()"
#~ " and get_target())."
#~ msgstr ""

#~ msgid "get write mode of the specified image"
#~ msgstr ""

#~ msgid "get the x coordinate value of the current drawing position (x,y)"
#~ msgstr ""

#~ msgid "get the y coordinate value of the current drawing position (x,y)"
#~ msgstr ""

#~ msgid "set the view port of the the specified image"
#~ msgstr ""

#~ msgid "if True, drawings outside the port rectangle will be cliped"
#~ msgstr ""

#~ msgid "set the drawing systems' origin(0,0) to (x,y)"
#~ msgstr ""

#~ msgid "set render mode of the graphics window"
#~ msgstr ""

#~ msgid "this mode will control how the graphics window is updated."
#~ msgstr ""

#~ msgid ""
#~ "this mode will control how the "
#~ "graphics window is updated. see "
#~ "**set_render_mode()**"
#~ msgstr ""

#~ msgid "get the current drawing position (x,y)"
#~ msgstr ""

#~ msgid "set the clip rect"
#~ msgstr ""

#~ msgid "disable clipping"
#~ msgstr ""

#~ msgid "drawings will not be clipped"
#~ msgstr ""

#~ msgid "set the logical drawing window"
#~ msgstr ""

#~ msgid "reset/remove the logical window"
#~ msgstr ""

#~ msgid "see set_window()"
#~ msgstr ""

#~ msgid "Rotates the coordinate system the given angle (in degree)clockwise ."
#~ msgstr ""

#~ msgid "reset all transforms (translate/rotate/scale)"
#~ msgstr ""

#~ msgid "draw a point at (x,y) on the specified image"
#~ msgstr ""

#~ msgid "set a pixel's color on the specified image"
#~ msgstr ""

#~ msgid "get a pixel's color on the specified image"
#~ msgstr ""

#~ msgid "Draw a line from (x1,y1) to (x2,y2) on the specified image"
#~ msgstr ""

#~ msgid "it's the same with line()"
#~ msgstr ""

#~ msgid "set the drawing position to (x,y)"
#~ msgstr ""

#~ msgid "the drawing position is used by line_to(), line_rel() and move_rel()"
#~ msgstr ""

#~ msgid "move the drawing position by (dx,dy)"
#~ msgstr ""

#~ msgid "if the old position is (x,y), then the new position will be (x+dx,y+dy)"
#~ msgstr ""

#~ msgid "the drawing position is used by line_to(), line_rel()"
#~ msgstr ""

#~ msgid ""
#~ "draw a line from the current "
#~ "drawing position to (x,y), then set "
#~ "the drawing position is set to "
#~ "(x,y)"
#~ msgstr ""

#~ msgid ""
#~ "draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),"
#~ "      then set the drawing position "
#~ "is set to (x+d,y+dy)"
#~ msgstr ""

#~ msgid "draw a circle outline centered at (x,y) with radius r"
#~ msgstr ""

#~ msgid "the circle is not filled"
#~ msgstr ""

#~ msgid "draw a circle centered at (x,y) with radius r"
#~ msgstr ""

#~ msgid "the circle is filled and has outline"
#~ msgstr ""

#~ msgid "fill a circle centered at (x,y) with radius r"
#~ msgstr ""

#~ msgid "the circle dosen't has outline"
#~ msgstr ""

#~ msgid ""
#~ "draw an ellipse outline centered at "
#~ "(x,y) , radius on x-axis is "
#~ "radius_x, radius on y-axis is radius_y"
#~ msgstr ""

#~ msgid "the ellipse is not filled"
#~ msgstr ""

#~ msgid ""
#~ "draw an ellipse centered at (x,y) "
#~ ", radius on x-axis is radius_x, "
#~ "radius on y-axis is radius_y"
#~ msgstr ""

#~ msgid "the ellipse is filled and has outline"
#~ msgstr ""

#~ msgid ""
#~ "fill an ellipse centered at (x,y) "
#~ ", radius on x-axis is radius_x, "
#~ "radius on y-axis is radius_y"
#~ msgstr ""

#~ msgid "the ellipse dosen't has outline"
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical arc from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)      which radius "
#~ "on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical pie outline from "
#~ "start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)      which"
#~ " radius on x-axis is radius_x and "
#~ "radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the pie is not filled."
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)      which radius "
#~ "on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the pie is filled and has outline."
#~ msgstr ""

#~ msgid ""
#~ "fill an elliptical pie from start_angle"
#~ " to end_angle. The base ellipse is"
#~ " centered at (x,y)      which radius "
#~ "on x-axis is radius_x and radius "
#~ "on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the pie dosen't have outline."
#~ msgstr ""

#~ msgid ""
#~ "draw an elliptical chord outline from"
#~ " start_angle to end_angle. The base "
#~ "ellipse is centered at (x,y)      which"
#~ " radius on x-axis is radius_x and "
#~ "radius on y-axis is radius_y."
#~ msgstr ""

#~ msgid "the chord is not filled."
#~ msgstr ""

#~ msgid "the chord is filled and has outline"
#~ msgstr ""

#~ msgid "the chord doesn't have outline."
#~ msgstr ""

#~ msgid "draw a bezier curve"
#~ msgstr ""

#~ msgid ""
#~ "poly_points is a 2D point list. "
#~ "Each point has 2 coordinate values "
#~ "in the list.     So if you have"
#~ " 4 points (x0,y0),(x1,y1),(x2,y2),(x3,y3), the"
#~ " list should be      [x0,y0,x1,y1,x2,y2,x3,y3]"
#~ msgstr ""

#~ msgid "point list"
#~ msgstr ""

#~ msgid ""
#~ "draw lines points is a 2D point"
#~ " pair list. It should contain even"
#~ " points, and each 2 points make "
#~ "a point pair. And each point have"
#~ " 2 coordinate values(x,y). So if you"
#~ " have n point pairs, the points "
#~ "list should have 4*n values."
#~ msgstr ""

#~ msgid "draw poly lines"
#~ msgstr ""

#~ msgid ""
#~ "points is a 2D point list. Each"
#~ " 2 values in the list make a"
#~ " point. A poly line will be "
#~ "drawn to connect adjecent points defined"
#~ " by the the list."
#~ msgstr ""

#~ msgid ""
#~ "For examples , if points is "
#~ "[50,50,550,350, 50,150,550,450, 50,250,550,550], "
#~ "draw_poly_line() will draw 5 lines: "
#~ "(50,50) to (550,350), (550,350) to "
#~ "(50,150), (50,150) to (550,450), (550,540) "
#~ "to (50,250) and(50,250) to (550,550)"
#~ msgstr ""

#~ msgid "draw polygon outline"
#~ msgstr ""

#~ msgid ""
#~ "points is a 2D point list. Each"
#~ " 2 values in the list make a"
#~ " point. A polygon will be drawn "
#~ "to connect adjecent points defined by"
#~ " the the list."
#~ msgstr ""

#~ msgid "draw polygon"
#~ msgstr ""

#~ msgid ""
#~ "Draws a rectangle outline with upper "
#~ "left corner at (left, top) and "
#~ "lower right corner at (right,bottom)"
#~ msgstr ""

#~ msgid "the rectangle is not filled"
#~ msgstr ""

#~ msgid ""
#~ "Draws a rectangle with upper left "
#~ "corner at (left, top) and lower "
#~ "right corner at (right,bottom)"
#~ msgstr ""

#~ msgid "the rectangle is filled and has outline"
#~ msgstr ""

#~ msgid "the rectangle doesn't have outline"
#~ msgstr ""

#~ msgid ""
#~ "flood fill the image starting from(x,y)"
#~ " and ending at borders with "
#~ "border_color"
#~ msgstr ""

#~ msgid ""
#~ "copy part of the source image "
#~ "(src_image) to the destination image "
#~ "(self) at (x,y)"
#~ msgstr ""

#~ msgid "Clear the image with the background color"
#~ msgstr ""

#~ msgid "clear view port with the background color"
#~ msgstr ""

#~ msgid "Prints the given texts beginning at the given position (x,y)"
#~ msgstr ""

#~ msgid "print the given texts in the specified rectangle area"
#~ msgstr ""

#~ msgid "Available flags are: （Defined in pyqt5's PyQt5.QtCore pacakge)"
#~ msgstr ""

#~ msgid "Qt.AlignLeft          Aligns with the left edge."
#~ msgstr ""

#~ msgid "Qt::AlignRight        Aligns with the right edge."
#~ msgstr ""

#~ msgid "Qt::AlignHCenter      Centers horizontally in the available space."
#~ msgstr ""

#~ msgid "Qt::AlignJustify      Justifies the text in the available space."
#~ msgstr ""

#~ msgid "Qt::AlignTop          Aligns with the top."
#~ msgstr ""

#~ msgid "Qt::AlignBottom       Aligns with the bottom."
#~ msgstr ""

#~ msgid "Qt::AlignVCenter      Centers vertically in the available space."
#~ msgstr ""

#~ msgid "Qt::AlignCenter       Centers in both dimensions."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextDontClip      If it's impossible to"
#~ " stay within the given bounds, it "
#~ "prints outside."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextSingleLine    Treats all whitespace as"
#~ " spaces and prints just one line."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextExpandTabs    Makes the U+0009 (ASCII"
#~ " tab) character move to the next "
#~ "tab stop."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextShowMnemonic  Displays the string "
#~ "\"&P\" as P For an ampersand, use"
#~ " \"&&\"."
#~ msgstr ""

#~ msgid ""
#~ "Qt::TextWordWrap      Breaks lines at "
#~ "appropriate points, e.g. at word "
#~ "boundaries."
#~ msgstr ""

#~ msgid "return width of the text"
#~ msgstr ""

#~ msgid "return height of the text (font height)"
#~ msgstr ""

#~ msgid "set the target image for drawing on"
#~ msgstr ""

#~ msgid "get the target image for drawing on"
#~ msgstr ""

#~ msgid "create a new image"
#~ msgstr ""

#~ msgid "pause the grogram and wait for mouse clicking or keyboard hiting"
#~ msgstr ""

#~ msgid ""
#~ "Delay the programm for specified "
#~ "milliseconds :param milliseconds: time to "
#~ "delay"
#~ msgstr ""

#~ msgid "Delay the program to control fps (Frame pers seconds)"
#~ msgstr ""

#~ msgid "valid fps value is 1-1000, this value is **not checked** for speed"
#~ msgstr ""

#~ msgid "this function won't skip frames"
#~ msgstr ""

#~ msgid "delay to control fps with frame skiping"
#~ msgstr ""

#~ msgid ""
#~ "if we don't have enough time to"
#~ " delay, we'll skip some frames :param"
#~ " fps: frames per second (max is "
#~ "1000) :param max_skip_count: max num of"
#~ "  frames to skip"
#~ msgstr ""

#~ msgid "Test if the graphics system is running.( :return:"
#~ msgstr ""

#~ msgid "see if any key is hitted in the last 100 ms use it with get_key()"
#~ msgstr ""

#~ msgid ""
#~ "see if any ascii char key is "
#~ "hitted in the last 100 ms use "
#~ "it with get_char()"
#~ msgstr ""

#~ msgid ""
#~ "see if there's any mouse message(event)"
#~ " in the last 100 ms use it "
#~ "with get_mouse()"
#~ msgstr ""

#~ msgid ""
#~ "get the key inputted by keyboard "
#~ "if not any  key is pressed in "
#~ "last 100 ms, the program will stop"
#~ " and wait for the next key "
#~ "hitting"
#~ msgstr ""

#~ msgid ""
#~ "keyboard code (see "
#~ "http://pyqt.sourceforge.net/Docs/PyQt4/qt.html#Key-enum) ,"
#~ " keyboard modifier codes (see "
#~ "http://pyqt.sourceforge.net/Docs/PyQt4/qt.html#KeyboardModifier-"
#~ "enum)"
#~ msgstr ""

#~ msgid ""
#~ "get the ascii char inputted by "
#~ "keybord if not any char key is "
#~ "pressed in last 100 ms, the "
#~ "program will stop and wait for the"
#~ " next key hitting"
#~ msgstr ""

#~ msgid "the character inputted by keybord"
#~ msgstr ""

#~ msgid ""
#~ "get the key inputted by keybord if"
#~ " not any  key is pressed in "
#~ "last 100 ms, the program will stop"
#~ " and wait for the next key "
#~ "hitting"
#~ msgstr ""

#~ msgid ""
#~ "x of the cursor, y of the "
#~ "cursor , mouse buttons down ( "
#~ "Qt.LeftButton or Qt.RightButton or "
#~ "Qt.MidButton or Qt.NoButton)"
#~ msgstr ""

#~ msgid "init the easygraphics system and show the graphics window"
#~ msgstr ""

#~ msgid ""
#~ ">>>from easygraphics import * "
#~ ">>>init_graph(800,600) #prepare and show a "
#~ "800*600 window"
#~ msgstr ""

#~ msgid "close the graphics windows"
#~ msgstr ""

#~ msgid ""
#~ "the program will exit too >>>from "
#~ "easygraphics import * >>>init_graph(800,600) "
#~ ">>>pause() >>>close_graph()"
#~ msgstr ""

#~ msgid "set the graph window's caption"
#~ msgstr ""

#~ msgid "create a color with r,g,b"
#~ msgstr ""

#~ msgid "alpha value of the color. 255 means fully opaque"
#~ msgstr ""

#~ msgid ""
#~ "some drawing functions will use the "
#~ "current pos to draw.(see "
#~ "line_to(),line_rel(),move_to(),move_rel())"
#~ msgstr ""

#~ msgid ""
#~ "Draw a line from the current "
#~ "drawing position (x,y) to (x+dx,y+dy),     "
#~ "then set the drawing position is "
#~ "set to (x+d,y+dy)."
#~ msgstr ""

#~ msgid "The source image's background will not be copied."
#~ msgstr ""

#~ msgid "EasyGraphics package"
#~ msgstr ""

#~ msgid "Package APIs"
#~ msgstr ""

