# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Roy Qu
# This file is distributed under the same license as the EasyGraphics
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyGraphics \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-20 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../apis/easygraphics.dialog.rst:2
msgid "easygraphics.dialog package"
msgstr ""

#: ../../apis/easygraphics.graphwin.rst:2
msgid "easygraphics.graphwin module"
msgstr ""

#: easygraphics.graphwin.GraphWin:1 of
msgid "Bases: :class:`sphinx.ext.autodoc.importer._MockObject`"
msgstr ""

#: easygraphics.graphwin.GraphWin:1 of
msgid "Main Window for painting graphics"
msgstr ""

#: easygraphics.graphwin.GraphWin:4 of
msgid "we use an Image object (self._canvas) to save the painted contents"
msgstr ""

#: easygraphics.graphwin.GraphWin:6 of
msgid ""
"how to process repaint event: if we are in immediate mode (RENDER_AUTO, "
"self._immediate=True) ,"
msgstr ""

#: easygraphics.graphwin.GraphWin:8 of
msgid "we directly paint the saved contents to the window"
msgstr ""

#: easygraphics.graphwin.GraphWin:13 of
msgid "if we are in manual refresh mode (RENDER_MANUAL, self._immediate=False),"
msgstr ""

#: easygraphics.graphwin.GraphWin:10 of
msgid ""
"we use another image object( self._device_image) as an intermediary the "
"contents on this object is painted to the window and this object is "
"synced with self._screen manually"
msgstr ""

#: easygraphics.graphwin.GraphWin.delay:1 of
msgid "delay for milliseconds :param milliseconds: time to delay"
msgstr ""

#: easygraphics.graphwin.GraphWin.delay_fps:1 of
msgid "delay to control fps without frame skiping"
msgstr ""

#: easygraphics.graphwin.GraphWin.delay_fps:3 of
msgid "never skip frames"
msgstr ""

#: easygraphics.graphwin.GraphWin.delay_jfps:1 of
msgid "delay to control fps with frame skiping"
msgstr ""

#: easygraphics.graphwin.GraphWin.delay_jfps:3 of
msgid ""
"if we don't have enough time to delay, we'll skip some frames :param fps:"
" frames per second (max is 1000) :param max_skip_count: max num of  "
"frames to skip"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_char:1 of
msgid ""
"get the ascii char inputted by keybord if not any char key is pressed in "
"last 100 ms, the program will stop and wait for the next key hitting"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_char
#: easygraphics.graphwin.GraphWin.get_key
#: easygraphics.graphwin.GraphWin.get_mouse
#: easygraphics.graphwin.GraphWin.is_immediate
#: easygraphics.graphwin.GraphWin.kb_hit easygraphics.graphwin.GraphWin.kb_msg
#: easygraphics.graphwin.GraphWin.mouse_msg
#: easygraphics.image.Image.get_background_color
#: easygraphics.image.Image.get_color easygraphics.image.Image.get_fill_color
#: easygraphics.image.Image.get_fill_style easygraphics.image.Image.get_font
#: easygraphics.image.Image.get_line_style
#: easygraphics.image.Image.get_line_width easygraphics.image.Image.get_pixel
#: easygraphics.image.Image.get_write_mode easygraphics.image.Image.get_x
#: easygraphics.image.Image.get_y of
msgid "Returns"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_char:4 of
msgid "the character inputted by keybord"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_key:1 of
msgid ""
"get the key inputted by keyboard if not any  key is pressed in last 100 "
"ms, the program will stop and wait for the next key hitting"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_key:4 of
msgid ""
"keyboard code (see "
"http://pyQtCore.Qt.sourceforge.net/Docs/PyQt4/QtCore.Qt.html#Key-enum) , "
"keyboard modifier codes"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_key:5 of
msgid ""
"(see http://pyQtCore.Qt.sourceforge.net/Docs/PyQt4/QtCore.Qt.html"
"#KeyboardModifier-enum)"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_mouse:1 of
msgid ""
"get the key inputted by keybord if not any  key is pressed in last 100 "
"ms, the program will stop and wait for the next key hitting"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_mouse:4 of
msgid "x of the cursor, y of the cursor , mouse buttons down"
msgstr ""

#: easygraphics.graphwin.GraphWin.get_mouse:5 of
msgid ""
"( QtCore.Qt.LeftButton or QtCore.Qt.RightButton or QtCore.Qt.MidButton or"
" QtCore.Qt.NoButton)"
msgstr ""

#: easygraphics.graphwin.GraphWin.invalid:1 of
msgid "try to invalidate window"
msgstr ""

#: easygraphics.graphwin.GraphWin.invalid:3 of
msgid ""
"if is in immediate mode (MODE_AUTO), the window is updated and repaint; "
"otherwise, the window is not updated"
msgstr ""

#: easygraphics.graphwin.GraphWin.is_immediate:1 of
msgid ""
"get if the graphics window will be updated immediately after things are "
"drawn"
msgstr ""

#: easygraphics.graphwin.GraphWin.kb_hit:1 of
msgid ""
"see if any ascii char key is hitted in the last 100 ms use it with "
"get_char()"
msgstr ""

#: easygraphics.graphwin.GraphWin.kb_hit:4
#: easygraphics.graphwin.GraphWin.kb_msg:4 of
msgid "True if hitted, False or not"
msgstr ""

#: easygraphics.graphwin.GraphWin.kb_msg:1 of
msgid "see if any key is hitted in the last 100 ms use it with get_key()"
msgstr ""

#: easygraphics.graphwin.GraphWin.mouse_msg:1 of
msgid ""
"see if there's any mouse message(event) in the last 100 ms use it with "
"get_mouse()"
msgstr ""

#: easygraphics.graphwin.GraphWin.mouse_msg:4 of
msgid "True if any mouse message, False or not"
msgstr ""

#: easygraphics.graphwin.GraphWin.pause:1 of
msgid "pause and wait for mouse click or keyboard hit"
msgstr ""

#: easygraphics.graphwin.GraphWin.real_update:1 of
msgid "really update and repaint the window"
msgstr ""

#: easygraphics.graphwin.GraphWin.real_update:3 of
msgid "the intermediary image (self._device_image) is synced with the canvas"
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate:1 of
msgid ""
"set if the graphics window will be updated immediately after things are "
"drawn"
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate:3 of
msgid "possible values:"
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate:5 of
msgid ""
"**True** (default, auto mode) update the window immediately after every "
"drawing"
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate:6 of
msgid ""
"**False** (manual mode) only update the window after "
"pause()/delay()/delay_fps()/delay_jfps() is called."
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate:8 of
msgid "manual mode is used for animations"
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate easygraphics.image.Image.arc
#: easygraphics.image.Image.bezier easygraphics.image.Image.chord
#: easygraphics.image.Image.draw_arc easygraphics.image.Image.draw_bezier
#: easygraphics.image.Image.draw_chord easygraphics.image.Image.draw_ellipse
#: easygraphics.image.Image.draw_image easygraphics.image.Image.draw_line
#: easygraphics.image.Image.draw_lines easygraphics.image.Image.draw_pie
#: easygraphics.image.Image.draw_point easygraphics.image.Image.draw_poly_line
#: easygraphics.image.Image.draw_polygon easygraphics.image.Image.draw_rect
#: easygraphics.image.Image.draw_rect_text
#: easygraphics.image.Image.draw_rounded_rect
#: easygraphics.image.Image.draw_text easygraphics.image.Image.ellipse
#: easygraphics.image.Image.fill_chord easygraphics.image.Image.fill_ellipse
#: easygraphics.image.Image.fill_pie easygraphics.image.Image.fill_polygon
#: easygraphics.image.Image.fill_rect
#: easygraphics.image.Image.fill_rounded_rect
#: easygraphics.image.Image.flood_fill easygraphics.image.Image.get_pixel
#: easygraphics.image.Image.line easygraphics.image.Image.line_rel
#: easygraphics.image.Image.line_to easygraphics.image.Image.lines
#: easygraphics.image.Image.move_rel easygraphics.image.Image.move_to
#: easygraphics.image.Image.pie easygraphics.image.Image.poly_line
#: easygraphics.image.Image.polygon easygraphics.image.Image.put_pixel
#: easygraphics.image.Image.rect easygraphics.image.Image.rotate
#: easygraphics.image.Image.rounded_rect easygraphics.image.Image.scale
#: easygraphics.image.Image.set_background_color
#: easygraphics.image.Image.set_clip_rect easygraphics.image.Image.set_color
#: easygraphics.image.Image.set_fill_color
#: easygraphics.image.Image.set_fill_style easygraphics.image.Image.set_font
#: easygraphics.image.Image.set_line_style
#: easygraphics.image.Image.set_line_width
#: easygraphics.image.Image.set_view_port easygraphics.image.Image.set_window
#: easygraphics.image.Image.set_write_mode easygraphics.image.Image.text_width
#: easygraphics.image.Image.translate of
msgid "Parameters"
msgstr ""

#: easygraphics.graphwin.GraphWin.set_immediate:10 of
msgid "if the graphics window will be updated immediately"
msgstr ""

#: ../../apis/easygraphics.image.rst:2
msgid "easygraphics.image module"
msgstr ""

#: easygraphics.image.Image:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: easygraphics.image.Image.arc:1 easygraphics.image.Image.draw_arc:1 of
msgid ""
"draw an elliptical arc from start_angle to end_angle. The base ellipse is"
" centered at (x,y)          which radius on x-axis is radius_x and radius"
" on y-axis is radius_y."
msgstr ""

#: easygraphics.image.Image.arc:3 easygraphics.image.Image.draw_arc:3
#: easygraphics.image.Image.draw_chord:5 easygraphics.image.Image.draw_pie:5
#: easygraphics.image.Image.fill_chord:5 easygraphics.image.Image.fill_pie:5
#: easygraphics.image.Image.pie:5 of
msgid ""
"**note**: degree 0 is at 3 o'clock position, and is increasing "
"clockwisely. That is, degree 90 is         at 12 o'click , degree 180 is "
"at 9 o'clock , degree 270 is at 6 o'clock, etc."
msgstr ""

#: easygraphics.image.Image.arc:5 easygraphics.image.Image.chord:7
#: easygraphics.image.Image.draw_arc:5 easygraphics.image.Image.draw_chord:7
#: easygraphics.image.Image.draw_ellipse:5 easygraphics.image.Image.draw_pie:7
#: easygraphics.image.Image.ellipse:5 easygraphics.image.Image.fill_chord:7
#: easygraphics.image.Image.fill_ellipse:5 easygraphics.image.Image.fill_pie:7
#: easygraphics.image.Image.pie:7 of
msgid "x coordinate value of the ellipse's center"
msgstr ""

#: easygraphics.image.Image.arc:6 easygraphics.image.Image.chord:8
#: easygraphics.image.Image.draw_arc:6 easygraphics.image.Image.draw_chord:8
#: easygraphics.image.Image.draw_ellipse:6 easygraphics.image.Image.draw_pie:8
#: easygraphics.image.Image.ellipse:6 easygraphics.image.Image.fill_chord:8
#: easygraphics.image.Image.fill_ellipse:6 easygraphics.image.Image.fill_pie:8
#: easygraphics.image.Image.pie:8 of
msgid "y coordinate value of the ellipse's center"
msgstr ""

#: easygraphics.image.Image.arc:7 easygraphics.image.Image.draw_arc:7 of
msgid "start angle of the arc"
msgstr ""

#: easygraphics.image.Image.arc:8 easygraphics.image.Image.draw_arc:8 of
msgid "end angle of the arc"
msgstr ""

#: easygraphics.image.Image.arc:9 easygraphics.image.Image.chord:11
#: easygraphics.image.Image.draw_arc:9 easygraphics.image.Image.draw_chord:11
#: easygraphics.image.Image.draw_ellipse:7 easygraphics.image.Image.draw_pie:11
#: easygraphics.image.Image.ellipse:7 easygraphics.image.Image.fill_chord:11
#: easygraphics.image.Image.fill_ellipse:7 easygraphics.image.Image.fill_pie:11
#: easygraphics.image.Image.pie:11 of
msgid "radius on x-axis of the ellipse"
msgstr ""

#: easygraphics.image.Image.arc:10 easygraphics.image.Image.chord:12
#: easygraphics.image.Image.draw_arc:10 easygraphics.image.Image.draw_chord:12
#: easygraphics.image.Image.draw_ellipse:8 easygraphics.image.Image.draw_pie:12
#: easygraphics.image.Image.ellipse:8 easygraphics.image.Image.fill_chord:12
#: easygraphics.image.Image.fill_ellipse:8 easygraphics.image.Image.fill_pie:12
#: easygraphics.image.Image.pie:12 of
msgid "radius on y-axis of the ellipse"
msgstr ""

#: easygraphics.image.Image.bezier:1 easygraphics.image.Image.draw_bezier:1 of
msgid "draw a bezier curve"
msgstr ""

#: easygraphics.image.Image.bezier:3 easygraphics.image.Image.draw_bezier:3 of
msgid ""
"poly_points is a 2D point list. Each point has 2 coordinate values in the"
" list.         So if you have 4 points (x0,y0),(x1,y1),(x2,y2),(x3,y3), "
"the list should be          [x0,y0,x1,y1,x2,y2,x3,y3]"
msgstr ""

#: easygraphics.image.Image.bezier:5 easygraphics.image.Image.draw_bezier:5 of
msgid "point list"
msgstr ""

#: easygraphics.image.Image.chord:1 of
msgid ""
"draw an elliptical chord outline from start_angle to end_angle. The base "
"ellipse is centered at (x,y)           which radius on x-axis is radius_x"
" and radius on y-axis is radius_y."
msgstr ""

#: easygraphics.image.Image.chord:3 of
msgid "the chord is not filled."
msgstr ""

#: easygraphics.image.Image.chord:5 of
msgid ""
"**note**: degree 0 is at 3 o'clock position, and is increasing "
"clockwisely. That is, degree 90 is          at 12 o'click , degree 180 is"
" at 9 o'clock , degree 270 is at 6 o'clock, etc."
msgstr ""

#: easygraphics.image.Image.chord:9 easygraphics.image.Image.draw_chord:9
#: easygraphics.image.Image.fill_chord:9 of
msgid "start angle of the chord"
msgstr ""

#: easygraphics.image.Image.chord:10 easygraphics.image.Image.draw_chord:10
#: easygraphics.image.Image.fill_chord:10 of
msgid "end angle of the chord"
msgstr ""

#: easygraphics.image.Image.clear:1 of
msgid "Clear the image with the background color"
msgstr ""

#: easygraphics.image.Image.clear_view_port:1 of
msgid "clear view port with the background color"
msgstr ""

#: easygraphics.image.Image.disable_clip:1 of
msgid "disable clipping"
msgstr ""

#: easygraphics.image.Image.disable_clip:3 of
msgid "drawings will not be clipped"
msgstr ""

#: easygraphics.image.Image.draw_chord:1 easygraphics.image.Image.fill_chord:1
#: of
msgid ""
"draw an elliptical chord outline from start_angle to end_angle. The base "
"ellipse is centered at (x,y)          which radius on x-axis is radius_x "
"and radius on y-axis is radius_y."
msgstr ""

#: easygraphics.image.Image.draw_chord:3 of
msgid "the chord is filled and has outline"
msgstr ""

#: easygraphics.image.Image.draw_ellipse:1 of
msgid ""
"draw an ellipse centered at (x,y) , radius on x-axis is radius_x, radius "
"on y-axis is radius_y"
msgstr ""

#: easygraphics.image.Image.draw_ellipse:3 of
msgid "the ellipse is filled and has outline."
msgstr ""

#: easygraphics.image.Image.draw_image:1 of
msgid ""
"copy part of the source image (image) to the destination image (self) at "
"(x,y)"
msgstr ""

#: easygraphics.image.Image.draw_image:3 of
msgid ""
"(x, y) specifies the top-left point in the destination image that is to "
"be drawn onto."
msgstr ""

#: easygraphics.image.Image.draw_image:5 of
msgid ""
"(sx, sy) specifies the top-left point of the part in the source image "
"that is to          be drawn. The default is (0, 0)."
msgstr ""

#: easygraphics.image.Image.draw_image:7 of
msgid ""
"(sw, sh) specifies the size of the part of the source image that is to be"
" drawn.          The default, (0, 0) (and negative) means all the way to "
"the bottom-right of the image."
msgstr ""

#: easygraphics.image.Image.draw_image:9 of
msgid "x coordinate value of the upper left point on the destination image"
msgstr ""

#: easygraphics.image.Image.draw_image:10 of
msgid "y coordinate value of the upper left point on the destination image"
msgstr ""

#: easygraphics.image.Image.draw_image:11 of
msgid "the source image to be copied"
msgstr ""

#: easygraphics.image.Image.draw_image:12 of
msgid "x coordinate value of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.image.Image.draw_image:13 of
msgid "y coordinate value of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.image.Image.draw_image:14 of
msgid "witdh of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.image.Image.draw_image:15 of
msgid "height of the top-left point of of the part to be drawn"
msgstr ""

#: easygraphics.image.Image.draw_line:1 easygraphics.image.Image.line:1 of
msgid "Draw a line from (x1,y1) to (x2,y2) on the specified image"
msgstr ""

#: easygraphics.image.Image.draw_line:3 easygraphics.image.Image.draw_text:3
#: easygraphics.image.Image.flood_fill:5 easygraphics.image.Image.line:3 of
msgid "x coordinate value of the start point"
msgstr ""

#: easygraphics.image.Image.draw_line:4 easygraphics.image.Image.draw_line:6
#: easygraphics.image.Image.draw_text:4 easygraphics.image.Image.flood_fill:6
#: easygraphics.image.Image.line:4 easygraphics.image.Image.line:6 of
msgid "y coordinate value of the start point"
msgstr ""

#: easygraphics.image.Image.draw_line:5 easygraphics.image.Image.line:5 of
msgid "x coordinate value of the end point"
msgstr ""

#: easygraphics.image.Image.draw_lines:1 easygraphics.image.Image.lines:1 of
msgid ""
"draw lines points is a 2D point pair list. It should contain even points,"
" and each 2 points make a point pair. And each point have 2 coordinate "
"values(x,y). So if you have n point pairs, the points list should have "
"4*n values."
msgstr ""

#: easygraphics.image.Image.draw_lines:6 easygraphics.image.Image.lines:6 of
msgid ""
"For examples , if points is [50,50,550,350, 50,150,550,450, "
"50,250,550,550], draw_lines() will draw 3 lines: (50,50) to (550,350), "
"(50,150) to (550,450), (50,250) to (550,550)"
msgstr ""

#: easygraphics.image.Image.draw_lines:9
#: easygraphics.image.Image.draw_poly_line:10
#: easygraphics.image.Image.draw_polygon:11
#: easygraphics.image.Image.fill_polygon:11 easygraphics.image.Image.lines:9
#: easygraphics.image.Image.poly_line:10 easygraphics.image.Image.polygon:11 of
msgid "point value list"
msgstr ""

#: easygraphics.image.Image.draw_pie:1 of
msgid ""
"draw an elliptical pie from start_angle to end_angle. The base ellipse is"
" centered at (x,y)          which radius on x-axis is radius_x and radius"
" on y-axis is radius_y."
msgstr ""

#: easygraphics.image.Image.draw_pie:3 of
msgid "the pie is filled and has outline."
msgstr ""

#: easygraphics.image.Image.draw_pie:9 easygraphics.image.Image.fill_pie:9
#: easygraphics.image.Image.pie:9 of
msgid "start angle of the pie"
msgstr ""

#: easygraphics.image.Image.draw_pie:10 easygraphics.image.Image.fill_pie:10
#: easygraphics.image.Image.pie:10 of
msgid "end angle of the pie"
msgstr ""

#: easygraphics.image.Image.draw_point:1 of
msgid "draw a point at (x,y) on the specified image"
msgstr ""

#: easygraphics.image.Image.draw_point:3 of
msgid "x coordinate value of the drawing point"
msgstr ""

#: easygraphics.image.Image.draw_point:4 of
msgid "y coordinate value of the drawing point"
msgstr ""

#: easygraphics.image.Image.draw_poly_line:1
#: easygraphics.image.Image.poly_line:1 of
msgid "draw poly lines"
msgstr ""

#: easygraphics.image.Image.draw_poly_line:3
#: easygraphics.image.Image.poly_line:3 of
msgid ""
"points is a 2D point list. Each 2 values in the list make a point. A poly"
" line will be drawn to connect adjecent points defined by the the list."
msgstr ""

#: easygraphics.image.Image.draw_poly_line:6
#: easygraphics.image.Image.poly_line:6 of
msgid ""
"For examples , if points is [50,50,550,350, 50,150,550,450, "
"50,250,550,550], draw_poly_line() will draw 5 lines: (50,50) to "
"(550,350), (550,350) to (50,150), (50,150) to (550,450), (550,540) to "
"(50,250) and(50,250) to (550,550)"
msgstr ""

#: easygraphics.image.Image.draw_polygon:1 of
msgid "draw polygon"
msgstr ""

#: easygraphics.image.Image.draw_polygon:3
#: easygraphics.image.Image.fill_polygon:3 easygraphics.image.Image.polygon:3
#: of
msgid ""
"points is a 2D point list. Each 2 values in the list make a point. A "
"polygon will be drawn to connect adjecent points defined by the the list."
msgstr ""

#: easygraphics.image.Image.draw_polygon:6
#: easygraphics.image.Image.fill_polygon:6 easygraphics.image.Image.polygon:6
#: of
msgid ""
"For examples , if points is [50,50,550,350, 50,150], poly_gon() will draw"
" a triangle with vertices at (50,50) , (550,350) and (50,150)"
msgstr ""

#: easygraphics.image.Image.draw_polygon:9 of
msgid "The polygon is filled and has outline."
msgstr ""

#: easygraphics.image.Image.draw_rect:1 easygraphics.image.Image.fill_rect:1 of
msgid ""
"Draws a rectangle with upper left corner at (left, top) and lower right "
"corner at (right,bottom)"
msgstr ""

#: easygraphics.image.Image.draw_rect:3
#: easygraphics.image.Image.draw_rounded_rect:4 of
msgid "the rectangle is filled and has outline"
msgstr ""

#: easygraphics.image.Image.draw_rect:5
#: easygraphics.image.Image.draw_rounded_rect:6
#: easygraphics.image.Image.fill_rect:5
#: easygraphics.image.Image.fill_rounded_rect:6 easygraphics.image.Image.rect:5
#: easygraphics.image.Image.rounded_rect:6 of
msgid "x coordinate value of the upper left corner"
msgstr ""

#: easygraphics.image.Image.draw_rect:6
#: easygraphics.image.Image.draw_rounded_rect:7
#: easygraphics.image.Image.fill_rect:6
#: easygraphics.image.Image.fill_rounded_rect:7 easygraphics.image.Image.rect:6
#: easygraphics.image.Image.rounded_rect:7 of
msgid "y coordinate value of the upper left corner"
msgstr ""

#: easygraphics.image.Image.draw_rect:7
#: easygraphics.image.Image.draw_rounded_rect:8
#: easygraphics.image.Image.fill_rect:7
#: easygraphics.image.Image.fill_rounded_rect:8 easygraphics.image.Image.rect:7
#: easygraphics.image.Image.rounded_rect:8 of
msgid "x coordinate value of the lower right corner"
msgstr ""

#: easygraphics.image.Image.draw_rect:8
#: easygraphics.image.Image.draw_rounded_rect:9
#: easygraphics.image.Image.fill_rect:8
#: easygraphics.image.Image.fill_rounded_rect:9 easygraphics.image.Image.rect:8
#: easygraphics.image.Image.rounded_rect:9 of
msgid "y coordinate value of the lower right corner"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:1 of
msgid "print the given texts in the specified rectangle area"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:3 of
msgid "Available flags are: （Defined in pyqt5's PyQt5.QtCore pacakge)"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:5 of
msgid "Qt.AlignLeft          Aligns with the left edge."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:6 of
msgid "Qt::AlignRight        Aligns with the right edge."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:7 of
msgid "Qt::AlignHCenter      Centers horizontally in the available space."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:8 of
msgid "Qt::AlignJustify      Justifies the text in the available space."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:9 of
msgid "Qt::AlignTop          Aligns with the top."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:10 of
msgid "Qt::AlignBottom       Aligns with the bottom."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:11 of
msgid "Qt::AlignVCenter      Centers vertically in the available space."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:12 of
msgid "Qt::AlignCenter       Centers in both dimensions."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:13 of
msgid ""
"Qt::TextDontClip      If it's impossible to stay within the given bounds,"
" it prints outside."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:14 of
msgid ""
"Qt::TextSingleLine    Treats all whitespace as spaces and prints just one"
" line."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:15 of
msgid ""
"Qt::TextExpandTabs    Makes the U+0009 (ASCII tab) character move to the "
"next tab stop."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:16 of
msgid ""
"Qt::TextShowMnemonic  Displays the string \"&P\" as P For an ampersand, "
"use \"&&\"."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:17 of
msgid ""
"Qt::TextWordWrap      Breaks lines at appropriate points, e.g. at word "
"boundaries."
msgstr ""

#: easygraphics.image.Image.draw_rect_text:19 of
msgid "x coordinate of the output rectangle's upper left corner"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:20 of
msgid "y coordinate of the output rectangle's upper left corner"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:21 of
msgid "width of the output rectangle"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:22 of
msgid "height of the output rectangle"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:23 of
msgid "things to be printed (like print())"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:24 of
msgid "align flags"
msgstr ""

#: easygraphics.image.Image.draw_rect_text:25
#: easygraphics.image.Image.draw_text:6 of
msgid "seperator used to join strings"
msgstr ""

#: easygraphics.image.Image.draw_rounded_rect:1 of
msgid ""
"Draws a rounded rectangle with upper left corner at (left, top) , lower "
"right corner at (right,bottom). raidus on x-axis of the corner ellipse "
"arc is round_x, radius on y-axis of the corner ellipse arc is round_y."
msgstr ""

#: easygraphics.image.Image.draw_rounded_rect:10
#: easygraphics.image.Image.fill_rounded_rect:10
#: easygraphics.image.Image.rounded_rect:10 of
msgid "raidus on x-axis of the corner ellipse arc"
msgstr ""

#: easygraphics.image.Image.draw_rounded_rect:11
#: easygraphics.image.Image.fill_rounded_rect:11
#: easygraphics.image.Image.rounded_rect:11 of
msgid "radius on y-axis of the corner ellipse arc"
msgstr ""

#: easygraphics.image.Image.draw_text:1 of
msgid "Prints the given texts beginning at the given position (x,y)"
msgstr ""

#: easygraphics.image.Image.draw_text:5 of
msgid "things to be printed"
msgstr ""

#: easygraphics.image.Image.ellipse:1 of
msgid ""
"draw an ellipse outline centered at (x,y) , radius on x-axis is radius_x,"
" radius on y-axis is radius_y"
msgstr ""

#: easygraphics.image.Image.ellipse:3 of
msgid "the ellipse is not filled"
msgstr ""

#: easygraphics.image.Image.fill_chord:3 of
msgid "the chord doesn't have outline."
msgstr ""

#: easygraphics.image.Image.fill_ellipse:1 of
msgid ""
"fill an ellipse centered at (x,y) , radius on x-axis is radius_x, radius "
"on y-axis is radius_y"
msgstr ""

#: easygraphics.image.Image.fill_ellipse:3 of
msgid "the ellipse dosen't has outline"
msgstr ""

#: easygraphics.image.Image.fill_pie:1 of
msgid ""
"fill an elliptical pie from start_angle to end_angle. The base ellipse is"
" centered at (x,y)          which radius on x-axis is radius_x and radius"
" on y-axis is radius_y."
msgstr ""

#: easygraphics.image.Image.fill_pie:3 of
msgid "the pie dosen't have outline."
msgstr ""

#: easygraphics.image.Image.fill_polygon:1 of
msgid "fill polygon"
msgstr ""

#: easygraphics.image.Image.fill_polygon:9 of
msgid "The polygon doesn't have outline."
msgstr ""

#: easygraphics.image.Image.fill_rect:3
#: easygraphics.image.Image.fill_rounded_rect:4 of
msgid "the rectangle doesn't have outline"
msgstr ""

#: easygraphics.image.Image.fill_rounded_rect:1 of
msgid ""
"Fill a rounded rectangle with upper left corner at (left, top) , lower "
"right corner at (right,bottom). raidus on x-axis of the corner ellipse "
"arc is round_x, radius on y-axis of the corner ellipse arc is round_y."
msgstr ""

#: easygraphics.image.Image.flood_fill:1 of
msgid ""
"flood fill the image starting from(x,y) and ending at borders with "
"border_color"
msgstr ""

#: easygraphics.image.Image.flood_fill:3 of
msgid "The fill region border must be closed,or the whole image will be filled!"
msgstr ""

#: easygraphics.image.Image.flood_fill:7 of
msgid "color of the fill region border"
msgstr ""

#: easygraphics.image.Image.get_background_color:1 of
msgid "get the background color of the image"
msgstr ""

#: easygraphics.image.Image.get_background_color:3
#: easygraphics.image.Image.set_background_color:3 of
msgid "it will be used when the image is cleared. (see clear_device())"
msgstr ""

#: easygraphics.image.Image.get_background_color:5
#: easygraphics.image.Image.set_background_color:9 of
msgid "background color"
msgstr ""

#: easygraphics.image.Image.get_color:1 of
msgid "get the foreground (drawing) color of the specified image"
msgstr ""

#: easygraphics.image.Image.get_color:3 easygraphics.image.Image.set_color:3 of
msgid "it will be used when drawing lines or shape outlines"
msgstr ""

#: easygraphics.image.Image.get_color:5 easygraphics.image.Image.set_color:9 of
msgid "foreground color"
msgstr ""

#: easygraphics.image.Image.get_fill_color:1 of
msgid "get the fill color of the specified image"
msgstr ""

#: easygraphics.image.Image.get_fill_color:3
#: easygraphics.image.Image.get_fill_style:3
#: easygraphics.image.Image.set_fill_color:3 of
msgid "it will be used when drawing and fill shapes."
msgstr ""

#: easygraphics.image.Image.get_fill_color:5
#: easygraphics.image.Image.set_fill_color:9 of
msgid "fill color"
msgstr ""

#: easygraphics.image.Image.get_fill_style:1 of
msgid "get fill style of the specified image"
msgstr ""

#: easygraphics.image.Image.get_fill_style:5
#: easygraphics.image.Image.set_fill_style:6 of
msgid "fill style"
msgstr ""

#: easygraphics.image.Image.get_font:1 of
msgid "get font of the specified image"
msgstr ""

#: easygraphics.image.Image.get_font:3 of
msgid "the font"
msgstr ""

#: easygraphics.image.Image.get_font_size:1 of
msgid "get font size of the specified image :return: font size"
msgstr ""

#: easygraphics.image.Image.get_image:1 of
msgid "get the internal QImage"
msgstr ""

#: easygraphics.image.Image.get_image:3 of
msgid ""
"**note** EasyGraphics don't require and release qpainter each time. "
"Because there can only be one QPainter         for each QImage at time, "
"so if you want to draw on this image customly, use get_painter() to get"
"         the internal QPainter instance. :return: the QImage instance "
"used internally"
msgstr ""

#: easygraphics.image.Image.get_line_style:1 of
msgid "get line style"
msgstr ""

#: easygraphics.image.Image.get_line_style:3 of
msgid "The line style will be used when drawing lines and shape outlines."
msgstr ""

#: easygraphics.image.Image.get_line_style:5
#: easygraphics.image.Image.set_line_style:6 of
msgid "line style"
msgstr ""

#: easygraphics.image.Image.get_line_width:1 of
msgid "get line width (thickness)"
msgstr ""

#: easygraphics.image.Image.get_line_width:3
#: easygraphics.image.Image.set_line_width:3 of
msgid "It will be used when drawing lines or shape outlines"
msgstr ""

#: easygraphics.image.Image.get_line_width:5
#: easygraphics.image.Image.set_line_width:5 of
msgid "line width"
msgstr ""

#: easygraphics.image.Image.get_painter:1 of
msgid ""
"get the QPainter instance for drawing the image :return: the painter used"
" internally"
msgstr ""

#: easygraphics.image.Image.get_pixel:1 of
msgid "get a pixel's color on the specified image"
msgstr ""

#: easygraphics.image.Image.get_pixel:3 easygraphics.image.Image.put_pixel:3 of
msgid "x coordinate value of the pixel"
msgstr ""

#: easygraphics.image.Image.get_pixel:4 easygraphics.image.Image.put_pixel:4 of
msgid "y coordinate value of the pixel"
msgstr ""

#: easygraphics.image.Image.get_pixel:5 of
msgid "color of the pixel"
msgstr ""

#: easygraphics.image.Image.get_write_mode:1 of
msgid "get write mode of the specified image"
msgstr ""

#: easygraphics.image.Image.get_write_mode:4 of
msgid ""
"When drawing ,the write mode will decide how the result pixel color will "
"be computed"
msgstr ""

#: easygraphics.image.Image.get_write_mode:4 of
msgid "(using source color and color of the destination)"
msgstr ""

#: easygraphics.image.Image.get_write_mode:6
#: easygraphics.image.Image.set_write_mode:12 of
msgid "write mode"
msgstr ""

#: easygraphics.image.Image.get_x:1 of
msgid "get the x coordinate value of the current drawing position (x,y)"
msgstr ""

#: easygraphics.image.Image.get_x:3 easygraphics.image.Image.get_y:3 of
msgid ""
"some drawing functions will use the current pos to draw.(see "
"line_to(),line_rel(),move_to(),move_rel())"
msgstr ""

#: easygraphics.image.Image.get_x:5 of
msgid "the x coordinate value of the current drawing position"
msgstr ""

#: easygraphics.image.Image.get_y:1 of
msgid "get the y coordinate value of the current drawing position (x,y)"
msgstr ""

#: easygraphics.image.Image.get_y:5 of
msgid "the y coordinate value of the current drawing position"
msgstr ""

#: easygraphics.image.Image.line_rel:1 of
msgid ""
"draw a line from the current drawing position (x,y) to (x+dx,y+dy),"
"          then set the drawing position is set to (x+d,y+dy)"
msgstr ""

#: easygraphics.image.Image.line_rel:3 easygraphics.image.Image.move_rel:7 of
msgid "x coordinate offset of the new drawing position"
msgstr ""

#: easygraphics.image.Image.line_rel:4 easygraphics.image.Image.move_rel:8 of
msgid "y coordinate offset of the new drawing position"
msgstr ""

#: easygraphics.image.Image.line_to:1 of
msgid ""
"draw a line from the current drawing position to (x,y), then set the "
"drawing position is set to (x,y)"
msgstr ""

#: easygraphics.image.Image.line_to:3 easygraphics.image.Image.move_to:5 of
msgid "x coordinate value of the new drawing position"
msgstr ""

#: easygraphics.image.Image.line_to:4 easygraphics.image.Image.move_to:6 of
msgid "y coordinate value of the new drawing position"
msgstr ""

#: easygraphics.image.Image.move_rel:1 of
msgid "move the drawing position by (dx,dy)"
msgstr ""

#: easygraphics.image.Image.move_rel:3 of
msgid "if the old position is (x,y), then the new position will be (x+dx,y+dy)"
msgstr ""

#: easygraphics.image.Image.move_rel:5 of
msgid "the drawing position is used by line_to(), line_rel()"
msgstr ""

#: easygraphics.image.Image.move_to:1 of
msgid "set the drawing position to (x,y)"
msgstr ""

#: easygraphics.image.Image.move_to:3 of
msgid "the drawing position is used by line_to(), line_rel() and move_rel()"
msgstr ""

#: easygraphics.image.Image.pie:1 of
msgid ""
"draw an elliptical pie outline from start_angle to end_angle. The base "
"ellipse is centered at (x,y)          which radius on x-axis is radius_x "
"and radius on y-axis is radius_y."
msgstr ""

#: easygraphics.image.Image.pie:3 of
msgid "the pie is not filled."
msgstr ""

#: easygraphics.image.Image.polygon:1 of
msgid "draw polygon outline"
msgstr ""

#: easygraphics.image.Image.polygon:9 of
msgid "The polygon is not filled."
msgstr ""

#: easygraphics.image.Image.put_pixel:1 of
msgid "set a pixel's color on the specified image"
msgstr ""

#: easygraphics.image.Image.put_pixel:5 of
msgid "the color"
msgstr ""

#: easygraphics.image.Image.rect:1 of
msgid ""
"Draws a rectangle outline with upper left corner at (left, top) and lower"
" right corner at (right,bottom)"
msgstr ""

#: easygraphics.image.Image.rect:3 easygraphics.image.Image.rounded_rect:4 of
msgid "the rectangle is not filled"
msgstr ""

#: easygraphics.image.Image.reset_transform:1 of
msgid "reset all transforms (translate/rotate/scale)"
msgstr ""

#: easygraphics.image.Image.reset_view_port:1 of
msgid "disable the view port setting"
msgstr ""

#: easygraphics.image.Image.reset_window:1 of
msgid "reset/remove the logical window"
msgstr ""

#: easygraphics.image.Image.reset_window:3 of
msgid "see set_window()"
msgstr ""

#: easygraphics.image.Image.rotate:1 of
msgid "Rotates the coordinate system the given angle (in degree)clockwise ."
msgstr ""

#: easygraphics.image.Image.rotate:3 of
msgid "the rotate angle (in degree)"
msgstr ""

#: easygraphics.image.Image.rounded_rect:1 of
msgid ""
"Draws a rounded rectangle outline with upper left corner at (left, top) ,"
" lower right corner at (right,bottom). raidus on x-axis of the corner "
"ellipse arc is round_x, radius on y-axis of the corner ellipse arc is "
"round_y."
msgstr ""

#: easygraphics.image.Image.scale:1 of
msgid "Scales the coordinate system by (sx, sy)."
msgstr ""

#: easygraphics.image.Image.scale:3 of
msgid "scale factor on x axis."
msgstr ""

#: easygraphics.image.Image.scale:4 of
msgid "scale factor on y axis."
msgstr ""

#: easygraphics.image.Image.set_background_color:1 of
msgid "set the background  color of the image"
msgstr ""

#: easygraphics.image.Image.set_background_color:5
#: easygraphics.image.Image.set_color:5
#: easygraphics.image.Image.set_fill_color:5 of
msgid ""
"the possible color could be consts defined in Color class, or the color "
"created by rgb() function, or PyQt5's QColor , QGradient object or "
"QtCore.Qt.GlobalColor consts (see the pyqt reference)."
msgstr ""

#: easygraphics.image.Image.set_clip_rect:1 of
msgid "set the clip rect"
msgstr ""

#: easygraphics.image.Image.set_clip_rect:3 of
msgid "Drawings outside the clip rect will be clipped."
msgstr ""

#: easygraphics.image.Image.set_clip_rect:5 of
msgid "left of the clip rectangle"
msgstr ""

#: easygraphics.image.Image.set_clip_rect:6 of
msgid "top of the clip rectangle"
msgstr ""

#: easygraphics.image.Image.set_clip_rect:7 of
msgid "right of the clip rectangle"
msgstr ""

#: easygraphics.image.Image.set_clip_rect:8 of
msgid "bottom of the clip rectangle"
msgstr ""

#: easygraphics.image.Image.set_color:1 of
msgid "set the foreground (drawing) color of the specified image"
msgstr ""

#: easygraphics.image.Image.set_fill_color:1 of
msgid "set the fill (drawing) color of the specified image"
msgstr ""

#: easygraphics.image.Image.set_fill_style:1 of
msgid "set fill style of the specified image"
msgstr ""

#: easygraphics.image.Image.set_fill_style:3 of
msgid ""
"it will be used when drawing and fill shapes. Valid values are the consts"
" defined in FillStyle"
msgstr ""

#: easygraphics.image.Image.set_font:1 of
msgid "set font of the specified image"
msgstr ""

#: easygraphics.image.Image.set_font_size:1 of
msgid "set font size of the specified image :param size: font size"
msgstr ""

#: easygraphics.image.Image.set_line_style:1 of
msgid "set line style"
msgstr ""

#: easygraphics.image.Image.set_line_style:3 of
msgid ""
"The line style will be used when drawing lines and shape outlines. "
"Possible value is one of the consts defined in LineStyle."
msgstr ""

#: easygraphics.image.Image.set_line_width:1 of
msgid "set line width (thinkness) of the specified image"
msgstr ""

#: easygraphics.image.Image.set_view_port:1 of
msgid "set the view port of the the specified image"
msgstr ""

#: easygraphics.image.Image.set_view_port:3 of
msgid "View port is the drawing zone on the image."
msgstr ""

#: easygraphics.image.Image.set_view_port:5 of
msgid ""
"The drawing outside the view port is not clipped. If you want to clip the"
" drawing ,use set_clip_rect()"
msgstr ""

#: easygraphics.image.Image.set_view_port:7 of
msgid ""
"**if view port and \"logical window\" don't have the same width and "
"height, drawing will get zoomed.** So set_window() is often used with the"
" set_view_port"
msgstr ""

#: easygraphics.image.Image.set_view_port:10 of
msgid "left of the view port rectangle"
msgstr ""

#: easygraphics.image.Image.set_view_port:11 of
msgid "top of the view port rectangle"
msgstr ""

#: easygraphics.image.Image.set_view_port:12 of
msgid "right of the view port rectangle"
msgstr ""

#: easygraphics.image.Image.set_view_port:13 of
msgid "bottom of the view port rectangle"
msgstr ""

#: easygraphics.image.Image.set_window:1 of
msgid "set the logical drawing window"
msgstr ""

#: easygraphics.image.Image.set_window:3 of
msgid ""
"All your drawing is first drawing on the logical window, then mapping to "
"view port (see set_view_port()).        The logical window's 4 corner "
"points to streched to match the view port."
msgstr ""

#: easygraphics.image.Image.set_window:5 of
msgid ""
"If your view port is 200x200，and you use set_window(-50,-50,100,100) to "
"get a 100x100 logical window with         the origin at (-50,50) , then "
"the logical window's origin (0,0) is mapping to view port's (-50,-50), "
"and         right-bottom corner (100,100) is mapping to view port's right"
" bottom corner (200,200). All logical points is         mapping "
"accordingly."
msgstr ""

#: easygraphics.image.Image.set_window:7 of
msgid ""
"If you just want to transform the drawing, use "
"set_origin()/translate()/rotate()/scale()."
msgstr ""

#: easygraphics.image.Image.set_window:9 of
msgid ""
"The drawing outside the logical window is not clipped. If you want to "
"clip it, use set_clip_rect()."
msgstr ""

#: easygraphics.image.Image.set_window:11 of
msgid "x pos of the logical window's origin"
msgstr ""

#: easygraphics.image.Image.set_window:12 of
msgid "y pos of the logical window's origin"
msgstr ""

#: easygraphics.image.Image.set_window:13 of
msgid "width of the logical window"
msgstr ""

#: easygraphics.image.Image.set_window:14 of
msgid "height of the logical window"
msgstr ""

#: easygraphics.image.Image.set_write_mode:1 of
msgid "set write mode of the specified image"
msgstr ""

#: easygraphics.image.Image.set_write_mode:3 of
msgid ""
"When drawing ,the write mode will decide how the result pixel color will "
"be computed (using source color and color of the destination)"
msgstr ""

#: easygraphics.image.Image.set_write_mode:6 of
msgid "source color is the color of the pen/brush"
msgstr ""

#: easygraphics.image.Image.set_write_mode:8 of
msgid "destination color is the color of the pixel will be painted on"
msgstr ""

#: easygraphics.image.Image.set_write_mode:10 of
msgid "the result color will be computed by bitwise operations"
msgstr ""

#: easygraphics.image.Image.text_height:1 of
msgid "return height of the text (font height)"
msgstr ""

#: easygraphics.image.Image.text_width:1 of
msgid "return width of the text"
msgstr ""

#: easygraphics.image.Image.text_width:3 of
msgid "the text"
msgstr ""

#: easygraphics.image.Image.translate:1 of
msgid ""
"Translates the coordinate system by the given offset; i.e. the given "
"offset is added to points."
msgstr ""

#: easygraphics.image.Image.translate:3 of
msgid "offset on the x coordinate"
msgstr ""

#: easygraphics.image.Image.translate:4 of
msgid "offset on the y coordinate"
msgstr ""

